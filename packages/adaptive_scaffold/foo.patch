diff --git a/packages/adaptive_scaffold/example/images/beauty.png b/packages/adaptive_scaffold/example/images/beauty.png
new file mode 100644
index 00000000..55f263a5
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/beauty.png differ
diff --git a/packages/adaptive_scaffold/example/images/man.png b/packages/adaptive_scaffold/example/images/man.png
new file mode 100644
index 00000000..86655e86
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/man.png differ
diff --git a/packages/adaptive_scaffold/example/images/noodles.png b/packages/adaptive_scaffold/example/images/noodles.png
new file mode 100644
index 00000000..792dd2cf
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/noodles.png differ
diff --git a/packages/adaptive_scaffold/example/images/plant-based.png b/packages/adaptive_scaffold/example/images/plant-based.png
new file mode 100644
index 00000000..3b287e18
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/plant-based.png differ
diff --git a/packages/adaptive_scaffold/example/images/singapore.png b/packages/adaptive_scaffold/example/images/singapore.png
new file mode 100644
index 00000000..3abc9aba
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/singapore.png differ
diff --git a/packages/adaptive_scaffold/example/images/user.png b/packages/adaptive_scaffold/example/images/user.png
new file mode 100644
index 00000000..4cc32ca7
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/user.png differ
diff --git a/packages/adaptive_scaffold/example/images/woman.png b/packages/adaptive_scaffold/example/images/woman.png
new file mode 100644
index 00000000..e0a736e1
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/woman.png differ
diff --git a/packages/adaptive_scaffold/example/images/woman2.png b/packages/adaptive_scaffold/example/images/woman2.png
new file mode 100644
index 00000000..5b768a4e
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/woman2.png differ
diff --git a/packages/adaptive_scaffold/example/images/yoga.png b/packages/adaptive_scaffold/example/images/yoga.png
new file mode 100644
index 00000000..d855a23b
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/yoga.png differ
diff --git a/packages/adaptive_scaffold/example/images/young-man.png b/packages/adaptive_scaffold/example/images/young-man.png
new file mode 100644
index 00000000..2adb2e79
Binary files /dev/null and b/packages/adaptive_scaffold/example/images/young-man.png differ
diff --git a/packages/adaptive_scaffold/example/lib/adaptive_layout_demo.dart b/packages/adaptive_scaffold/example/lib/adaptive_layout_demo.dart
index efe3c5ae..ce9edeff 100644
--- a/packages/adaptive_scaffold/example/lib/adaptive_layout_demo.dart
+++ b/packages/adaptive_scaffold/example/lib/adaptive_layout_demo.dart
@@ -54,54 +54,200 @@ class MyHomePage extends StatelessWidget {
           icon: Icon(Icons.video_call_outlined, color: Colors.black)),
     ];
 
-    // AdaptiveLayout has a number of slots that take SlotLayouts and these
-    // SlotLayouts' configs take maps of Breakpoints to SlotLayoutConfigs.
+    Widget trailingNavRail = Column(
+      children: [
+        const Divider(
+          color: Colors.black,
+        ),
+        const SizedBox(
+          height: 10,
+        ),
+        Row(
+          children: const [
+            SizedBox(
+              width: 27,
+            ),
+            Text(
+              "Folders",
+              style: TextStyle(fontSize: 16),
+            ),
+          ],
+        ),
+        const SizedBox(
+          height: 10,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Text("Freelance"),
+          ],
+        ),
+        const SizedBox(
+          height: 12,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Text("Mortage"),
+          ],
+        ),
+        const SizedBox(
+          height: 12,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Flexible(
+                child: Text(
+              "Taxes",
+              overflow: TextOverflow.ellipsis,
+            )),
+          ],
+        ),
+        const SizedBox(
+          height: 12,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Flexible(
+                child: Text(
+              "Receipts",
+              overflow: TextOverflow.ellipsis,
+            )),
+          ],
+        ),
+      ],
+    );
+
     return AdaptiveLayout(
-      // Primary navigation config has nothing from 0 to 600 dp screen width,
-      // then an unextended NavigationRail with no labels and just icons then an
-      // extended NavigationRail with both icons and labels.
       primaryNavigation: SlotLayout(
-        config: <Breakpoint, SlotLayoutConfig?>{
+        config: {
+          Breakpoints.small: SlotLayout.from(
+              key: const Key('pnav'), builder: (_) => const SizedBox.shrink()),
           Breakpoints.medium: SlotLayout.from(
             inAnimation: AdaptiveScaffold.leftOutIn,
-            key: const Key('pn'),
-            builder: (_) =>
-                AdaptiveScaffold.toNavigationRail(destinations: destinations),
+            key: const Key('pnav1'),
+            builder: (_) => AdaptiveScaffold.toRailFromDestinations(
+                leading: const Icon(Icons.menu), destinations: destinations),
           ),
           Breakpoints.large: SlotLayout.from(
             key: const Key('pn1'),
             inAnimation: AdaptiveScaffold.leftOutIn,
-            builder: (_) => AdaptiveScaffold.toNavigationRail(
-                extended: true, destinations: destinations),
+            builder: (_) => AdaptiveScaffold.toRailFromDestinations(
+              extended: true,
+              leading: Row(
+                mainAxisAlignment: MainAxisAlignment.spaceAround,
+                children: const [
+                  Text(
+                    "REPLY",
+                    style: TextStyle(color: Color.fromARGB(255, 255, 201, 197)),
+                  ),
+                  Icon(Icons.menu_open)
+                ],
+              ),
+              destinations: destinations,
+              trailing: trailingNavRail,
+            ),
           ),
         },
       ),
-      // Body switches between a ListView and a GridView from small to medium
-      // breakpoints and onwards.
       body: SlotLayout(
-        config: <Breakpoint, SlotLayoutConfig?>{
+        config: <Breakpoint, SlotLayoutConfig>{
           Breakpoints.small: SlotLayout.from(
             key: const Key('body'),
             builder: (_) => ListView.builder(
-                itemCount: 10, itemBuilder: (_, int idx) => children[idx]),
+              itemCount: 10,
+              itemBuilder: (context, index) => Padding(
+                padding: const EdgeInsets.all(8.0),
+                child: Container(
+                  color: const Color.fromARGB(255, 255, 201, 197),
+                  height: 400,
+                ),
+              ),
+            ),
           ),
-          Breakpoints.mediumAndUp: SlotLayout.from(
+          Breakpoints.medium: SlotLayout.from(
+            key: const Key('body1'),
+            builder: (_) =>
+                GridView.count(crossAxisCount: 2, children: <Widget>[
+              for (int i = 0; i < 10; i++)
+                Padding(
+                  padding: const EdgeInsets.all(8.0),
+                  child: Container(
+                    color: const Color.fromARGB(255, 255, 201, 197),
+                    height: 400,
+                  ),
+                )
+            ]),
+          ),
+          Breakpoints.large: SlotLayout.from(
             key: const Key('body1'),
             builder: (_) =>
-                GridView.count(crossAxisCount: 2, children: children),
+                GridView.count(crossAxisCount: 2, children: <Widget>[
+              for (int i = 0; i < 10; i++)
+                Padding(
+                  padding: const EdgeInsets.all(8.0),
+                  child: Container(
+                    color: const Color.fromARGB(255, 255, 201, 197),
+                    height: 400,
+                  ),
+                )
+            ]),
           ),
         },
       ),
-      // BottomNavigation is only active in small views defined as under 600 dp
-      // width.
       bottomNavigation: SlotLayout(
-        config: <Breakpoint, SlotLayoutConfig?>{
+        config: {
           Breakpoints.small: SlotLayout.from(
             key: const Key('bn'),
             inAnimation: AdaptiveScaffold.bottomToTop,
+            outAnimation: AdaptiveScaffold.topToBottom,
             builder: (_) => AdaptiveScaffold.toBottomNavigationBar(
                 destinations: destinations),
           ),
+          Breakpoints.medium: SlotLayoutConfig.empty(),
+          Breakpoints.large: SlotLayoutConfig.empty()
         },
       ),
     );
diff --git a/packages/adaptive_scaffold/example/lib/main.dart b/packages/adaptive_scaffold/example/lib/main.dart
index 72cf851b..8bf301aa 100644
--- a/packages/adaptive_scaffold/example/lib/main.dart
+++ b/packages/adaptive_scaffold/example/lib/main.dart
@@ -114,22 +114,127 @@ class _MyHomePageState extends State<MyHomePage>
 
   @override
   Widget build(BuildContext context) {
-    const Color iconColor = Color.fromARGB(255, 29, 25, 43);
+    Widget trailingNavRail = Column(
+      children: [
+        const Divider(
+          color: Colors.white,
+          thickness: 1.5,
+        ),
+        const SizedBox(
+          height: 10,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 22,
+            ),
+            Text(
+              'Folders',
+              style: TextStyle(fontSize: 13, color: Colors.grey[700]),
+            ),
+          ],
+        ),
+        const SizedBox(
+          height: 22,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Text('Freelance'),
+          ],
+        ),
+        const SizedBox(
+          height: 16,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Text('Mortage'),
+          ],
+        ),
+        const SizedBox(
+          height: 16,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Flexible(
+                child: Text(
+              'Taxes',
+              overflow: TextOverflow.ellipsis,
+            )),
+          ],
+        ),
+        const SizedBox(
+          height: 16,
+        ),
+        Row(
+          children: [
+            const SizedBox(
+              width: 16,
+            ),
+            IconButton(
+              onPressed: () {},
+              icon: const Icon(Icons.folder_copy_outlined),
+              iconSize: 21,
+            ),
+            const SizedBox(
+              width: 21,
+            ),
+            const Flexible(
+                child: Text(
+              'Receipts',
+              overflow: TextOverflow.ellipsis,
+            )),
+          ],
+        ),
+      ],
+    );
 
     // These are the destinations used within the AdaptiveScaffold navigation
     // builders.
-    const List<NavigationDestination> destinations = <NavigationDestination>[
+    const List<NavigationDestination> destinations = [
       NavigationDestination(
-          label: 'Inbox', icon: Icon(Icons.inbox, color: iconColor)),
+          label: 'Inbox', icon: Icon(Icons.inbox, color: Colors.black)),
       NavigationDestination(
           label: 'Articles',
-          icon: Icon(Icons.article_outlined, color: iconColor)),
+          icon: Icon(Icons.article_outlined, color: Colors.black)),
       NavigationDestination(
           label: 'Chat',
-          icon: Icon(Icons.chat_bubble_outline, color: iconColor)),
+          icon: Icon(Icons.chat_bubble_outline, color: Colors.black)),
       NavigationDestination(
           label: 'Video',
-          icon: Icon(Icons.video_call_outlined, color: iconColor)),
+          icon: Icon(Icons.video_call_outlined, color: Colors.black)),
     ];
 
     // Updating the listener value.
@@ -156,7 +261,7 @@ class _MyHomePageState extends State<MyHomePage>
                 // Usually it would be easier to use a builder from
                 // AdaptiveScaffold for these types of navigations but this
                 // navigation has custom staggered item animations.
-                child: NavigationRail(
+                child: AdaptiveScaffold.toNavigationRail(
                   onDestinationSelected: (int index) {
                     setState(() {
                       _navigationIndex = index;
@@ -202,7 +307,7 @@ class _MyHomePageState extends State<MyHomePage>
               key: const Key('primaryNavigation1'),
               // The AdaptiveScaffold builder here greatly simplifies
               // navigational elements.
-              builder: (_) => AdaptiveScaffold.toNavigationRail(
+              builder: (_) => AdaptiveScaffold.toRailFromDestinations(
                 leading: const _ComposeButton(),
                 onDestinationSelected: (int index) {
                   setState(() {
@@ -210,6 +315,7 @@ class _MyHomePageState extends State<MyHomePage>
                   });
                 },
                 selectedIndex: _navigationIndex,
+                trailing: trailingNavRail,
                 extended: true,
                 destinations: destinations,
               ),
@@ -228,7 +334,7 @@ class _MyHomePageState extends State<MyHomePage>
                       padding: const EdgeInsets.fromLTRB(0, 32, 0, 0),
                       child: _ItemList(
                         selected: selected,
-                        items: _all_Items,
+                        items: allItems,
                         selectCard: selectCard,
                       ),
                     )
@@ -244,8 +350,7 @@ class _MyHomePageState extends State<MyHomePage>
                     // disappearing as it is animating out.
                     outAnimation: AdaptiveScaffold.stayOnScreen,
                     key: const Key('sBody'),
-                    builder: (_) =>
-                        _DetailTile(item: _all_Items[selected ?? 0]),
+                    builder: (_) => _DetailTile(item: allItems[selected ?? 0]),
                   ),
                 },
               )
@@ -298,23 +403,32 @@ class _ComposeIcon extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    return Container(
-      decoration: BoxDecoration(
-        color: const Color.fromARGB(255, 254, 215, 227),
-        borderRadius: const BorderRadius.all(Radius.circular(15)),
-        boxShadow: <BoxShadow>[
-          BoxShadow(
-            color: Colors.grey.withOpacity(0.5),
-            spreadRadius: 1,
-            blurRadius: 2,
-            offset: const Offset(0, 2),
-          ),
-        ],
+    int _num = 0;
+    return Column(children: <Widget>[
+      Container(
+        padding: const EdgeInsets.fromLTRB(0, 10, 0, 18),
+        child: const Icon(
+          (Icons.menu),
+        ),
       ),
-      width: 50,
-      height: 50,
-      child: const Icon(Icons.edit_outlined),
-    );
+      Container(
+        decoration: BoxDecoration(
+          color: const Color.fromARGB(255, 254, 215, 227),
+          borderRadius: const BorderRadius.all(Radius.circular(15)),
+          boxShadow: <BoxShadow>[
+            BoxShadow(
+              color: Colors.grey.withOpacity(0.5),
+              spreadRadius: 1,
+              blurRadius: 2,
+              offset: const Offset(0, 2),
+            ),
+          ],
+        ),
+        width: 50,
+        height: 50,
+        child: const Icon(Icons.edit_outlined),
+      )
+    ]);
   }
 }
 
@@ -326,36 +440,56 @@ class _ComposeButton extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
     return Padding(
-      padding: const EdgeInsets.fromLTRB(8.0, 0, 0, 0),
-      child: Container(
-        alignment: Alignment.centerLeft,
-        decoration: BoxDecoration(
-          color: const Color.fromARGB(255, 255, 216, 228),
-          borderRadius: const BorderRadius.all(Radius.circular(15)),
-          boxShadow: Breakpoints.mediumAndUp.isActive(context)
-              ? null
-              : <BoxShadow>[
-                  BoxShadow(
-                    color: Colors.grey.withOpacity(0.5),
-                    spreadRadius: 1,
-                    blurRadius: 2,
-                    offset: const Offset(0, 2),
-                  ),
-                ],
+      padding: const EdgeInsets.fromLTRB(8.0, 5, 0, 12),
+      child: Column(children: <Widget>[
+        Container(
+            padding: const EdgeInsets.fromLTRB(6, 0, 0, 0),
+            child: Row(
+              mainAxisAlignment: MainAxisAlignment.spaceBetween,
+              children: const <Widget>[
+                Text(
+                  'REPLY',
+                  style: TextStyle(color: Colors.deepPurple, fontSize: 15),
+                ),
+                Icon(
+                  Icons.menu_open,
+                  size: 22,
+                )
+              ],
+            )),
+        const SizedBox(
+          height: 10,
         ),
-        width: 200,
-        height: 50,
-        child: Padding(
-          padding: const EdgeInsets.fromLTRB(16.0, 0, 0, 0),
-          child: Row(
-            children: const <Widget>[
-              Icon(Icons.edit_outlined),
-              SizedBox(width: 20),
-              Center(child: Text('Compose')),
-            ],
+        Container(
+          alignment: Alignment.centerLeft,
+          decoration: BoxDecoration(
+            color: const Color.fromARGB(255, 255, 225, 231),
+            borderRadius: const BorderRadius.all(Radius.circular(15)),
+            boxShadow: Breakpoints.mediumAndUp.isActive(context)
+                ? null
+                : <BoxShadow>[
+                    BoxShadow(
+                      color: Colors.grey.withOpacity(0.5),
+                      spreadRadius: 1,
+                      blurRadius: 2,
+                      offset: const Offset(0, 2),
+                    ),
+                  ],
           ),
-        ),
-      ),
+          width: 200,
+          height: 50,
+          child: Padding(
+            padding: const EdgeInsets.fromLTRB(16.0, 0, 0, 0),
+            child: Row(
+              children: const <Widget>[
+                Icon(Icons.edit_outlined),
+                SizedBox(width: 20),
+                Center(child: Text('Compose')),
+              ],
+            ),
+          ),
+        )
+      ]),
     );
   }
 }
@@ -379,7 +513,23 @@ class _ItemList extends StatelessWidget {
       backgroundColor: const Color.fromARGB(0, 0, 0, 0),
       floatingActionButton: Breakpoints.mediumAndUp.isActive(context)
           ? null
-          : const _ComposeIcon(),
+          : Container(
+              decoration: BoxDecoration(
+                color: const Color.fromARGB(255, 254, 215, 227),
+                borderRadius: const BorderRadius.all(Radius.circular(15)),
+                boxShadow: <BoxShadow>[
+                  BoxShadow(
+                    color: Colors.grey.withOpacity(0.5),
+                    spreadRadius: 1,
+                    blurRadius: 2,
+                    offset: const Offset(0, 2),
+                  ),
+                ],
+              ),
+              width: 50,
+              height: 50,
+              child: const Icon(Icons.edit_outlined),
+            ),
       body: Column(
         children: <Widget>[
           Padding(
@@ -393,7 +543,8 @@ class _ItemList extends StatelessWidget {
                 suffixIcon: Padding(
                   padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                   child: CircleAvatar(
-                    backgroundImage: NetworkImage(_all_Items[0].image),
+                    radius: 18,
+                    child: Image.asset('images/woman.png'),
                   ),
                 ),
                 border: OutlineInputBorder(
@@ -412,10 +563,13 @@ class _ItemList extends StatelessWidget {
           Expanded(
             child: ListView.builder(
               itemCount: items.length,
-              itemBuilder: (_, int index) => _ItemListTile(
-                selected: selected,
+              itemBuilder: (BuildContext context, int index) => _ItemListTile(
                 item: items[index],
+                email: items[index].emails![0],
                 selectCard: selectCard,
+                selected: selected,
+                //showGridView: showGridView,
+                //setDisplayed: setDisplayed,
               ),
             ),
           ),
@@ -429,11 +583,13 @@ class _ItemListTile extends StatelessWidget {
   const _ItemListTile({
     Key? key,
     required this.item,
+    required this.email,
     required this.selectCard,
     required this.selected,
   }) : super(key: key);
 
   final _Item item;
+  final _Email email;
   final int? selected;
   final Function selectCard;
 
@@ -445,42 +601,44 @@ class _ItemListTile extends StatelessWidget {
         // than large screens.
         // Small screens open a modal with the detail view while large screens
         // simply show the details on the secondaryBody.
-        selectCard(_all_Items.indexOf(item));
+        selectCard(allItems.indexOf(item));
         if (!Breakpoints.mediumAndUp.isActive(context)) {
           Navigator.of(context).pushNamed(
             _ExtractRouteArguments.routeName,
             arguments: _ScreenArguments(item: item, selectCard: selectCard),
           );
         } else {
-          selectCard(_all_Items.indexOf(item));
+          selectCard(allItems.indexOf(item));
         }
       },
       child: Padding(
         padding: const EdgeInsets.all(8.0),
         child: Container(
           decoration: BoxDecoration(
-              color: selected == _all_Items.indexOf(item)
-                  ? const Color.fromARGB(255, 234, 222, 255)
-                  : const Color.fromARGB(255, 243, 237, 247),
+              color: selected == allItems.indexOf(item)
+                  ? const Color.fromARGB(255, 237, 221, 255)
+                  : const Color.fromARGB(255, 245, 241, 248),
               borderRadius: const BorderRadius.all(Radius.circular(10))),
           child: Padding(
             padding: const EdgeInsets.all(16.0),
             child: Column(
               crossAxisAlignment: CrossAxisAlignment.start,
-              children: <Widget>[
+              children: [
                 Row(
-                  children: <Widget>[
+                  children: [
                     CircleAvatar(
-                      backgroundImage: NetworkImage(item.image),
+                      radius: 18,
+                      child: Image.asset(email.image),
                     ),
                     const SizedBox(width: 8),
                     Column(
                       crossAxisAlignment: CrossAxisAlignment.start,
-                      children: <Widget>[
-                        Text(item.name,
-                            style: Theme.of(context).textTheme.bodyText1),
+                      children: [
+                        Text(email.sender,
+                            style: TextStyle(
+                                color: Colors.grey[850], fontSize: 13)),
                         const SizedBox(height: 3),
-                        Text('${item.time} ago',
+                        Text('${email.time} ago',
                             style: Theme.of(context).textTheme.caption),
                       ],
                     ),
@@ -490,16 +648,26 @@ class _ItemListTile extends StatelessWidget {
                       decoration: const BoxDecoration(
                           color: Colors.white,
                           borderRadius: BorderRadius.all(Radius.circular(50))),
-                      child: const Icon(Icons.star_outline),
+                      child: Icon(
+                        Icons.star_outline,
+                        color: Colors.grey[500],
+                      ),
                     ),
                   ],
                 ),
-                const SizedBox(height: 10),
+                const SizedBox(height: 13),
                 Text(item.title,
-                    style: Theme.of(context).textTheme.titleMedium),
-                const SizedBox(height: 4),
-                Text(item.body.replaceRange(80, item.body.length, '...'),
-                    style: Theme.of(context).textTheme.bodyText1),
+                    style: const TextStyle(color: Colors.black, fontSize: 17)),
+                const SizedBox(height: 9),
+                Text(email.body.replaceRange(116, email.body.length, '...'),
+                    style: TextStyle(
+                        color: Colors.grey[700], height: 1.35, fontSize: 14.5)),
+                const SizedBox(height: 9),
+                SizedBox(
+                    width: MediaQuery.of(context).size.width,
+                    child: (email.bodyImage != '')
+                        ? Image.asset(email.bodyImage)
+                        : Container()),
               ],
             ),
           ),
@@ -521,25 +689,227 @@ class _DetailTile extends StatelessWidget {
     return Padding(
       padding: const EdgeInsets.all(8.0),
       child: SizedBox(
-        height: 300,
+        height: MediaQuery.of(context).size.height,
         child: Container(
           decoration: const BoxDecoration(
-              color: Color.fromARGB(255, 255, 251, 254),
+              color: Color.fromARGB(255, 245, 241, 248),
               borderRadius: BorderRadius.all(Radius.circular(10))),
-          child: Padding(
-            padding: const EdgeInsets.all(16.0),
-            child: Column(
-              crossAxisAlignment: CrossAxisAlignment.start,
-              children: <Widget>[
-                Text(item.title, style: Theme.of(context).textTheme.titleLarge),
-                Text('3 Messages',
-                    style: Theme.of(context).textTheme.labelSmall),
-                const SizedBox(
-                  height: 20,
-                ),
-                Text(item.body, style: Theme.of(context).textTheme.bodyLarge),
-              ],
-            ),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: <Widget>[
+              Padding(
+                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 0),
+                  child: Column(
+                    children: <Widget>[
+                      Row(
+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                          children: <Widget>[
+                            Expanded(
+                              child: Container(
+                                  padding:
+                                      const EdgeInsets.fromLTRB(5, 0, 5, 0),
+                                  child: Column(
+                                      crossAxisAlignment:
+                                          CrossAxisAlignment.start,
+                                      children: <Widget>[
+                                        Text(item.title,
+                                            style: Theme.of(context)
+                                                .textTheme
+                                                .titleLarge),
+                                        const SizedBox(
+                                          height: 7,
+                                        ),
+                                        Text('${item.emails!.length} Messages',
+                                            style: Theme.of(context)
+                                                .textTheme
+                                                .labelSmall)
+                                      ])),
+                            ),
+                            Container(
+                                padding: const EdgeInsets.fromLTRB(5, 0, 5, 0),
+                                child: Row(
+                                  children: <Widget>[
+                                    Container(
+                                      padding: const EdgeInsets.all(8.0),
+                                      decoration: const BoxDecoration(
+                                          color: Colors.white,
+                                          borderRadius: BorderRadius.all(
+                                              Radius.circular(15))),
+                                      child: Icon(
+                                        Icons.restore_from_trash,
+                                        color: Colors.grey[600],
+                                      ),
+                                    ),
+                                    const SizedBox(
+                                      width: 15,
+                                    ),
+                                    Container(
+                                      padding: const EdgeInsets.all(8.0),
+                                      decoration: const BoxDecoration(
+                                          color: Colors.white,
+                                          borderRadius: BorderRadius.all(
+                                              Radius.circular(15))),
+                                      child: Icon(
+                                        Icons.more_vert,
+                                        color: Colors.grey[600],
+                                      ),
+                                    ),
+                                  ],
+                                )),
+                          ]),
+                      const SizedBox(
+                        height: 20,
+                      ),
+                    ],
+                  )),
+              Expanded(
+                child: ListView.builder(
+                    itemCount: item.emails!.length,
+                    itemBuilder: (BuildContext context, int index) {
+                      final _Email thisEmail = item.emails![index];
+                      return _EmailTile(
+                        sender: thisEmail.sender,
+                        time: thisEmail.time,
+                        senderIcon: thisEmail.image,
+                        recepients: thisEmail.recepients,
+                        body: thisEmail.body,
+                        bodyImage: thisEmail.bodyImage,
+                      );
+                    }),
+              ),
+              //Text(item.body, style: Theme.of(context).textTheme.bodyLarge),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
+
+class _EmailTile extends StatelessWidget {
+  const _EmailTile({
+    required this.sender,
+    required this.time,
+    required this.senderIcon,
+    required this.recepients,
+    required this.body,
+    required this.bodyImage,
+    Key? key,
+  }) : super(key: key);
+
+  final String sender;
+  final String time;
+  final String senderIcon;
+  final String recepients;
+  final String body;
+  final String bodyImage;
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: const EdgeInsets.fromLTRB(0, 4, 0, 4),
+      child: Container(
+        decoration: const BoxDecoration(
+            color: Colors.white,
+            borderRadius: BorderRadius.all(Radius.circular(10))),
+        child: Padding(
+          padding: const EdgeInsets.all(16),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: <Widget>[
+              Row(
+                children: <Widget>[
+                  CircleAvatar(
+                    radius: 18,
+                    child: Image.asset(senderIcon),
+                  ),
+                  const SizedBox(width: 8),
+                  Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: <Widget>[
+                      Text(sender,
+                          style:
+                              TextStyle(color: Colors.grey[850], fontSize: 13)),
+                      const SizedBox(height: 3),
+                      Text('$time ago',
+                          style: Theme.of(context).textTheme.caption),
+                    ],
+                  ),
+                  const Spacer(),
+                  Container(
+                    padding: const EdgeInsets.all(8.0),
+                    decoration: const BoxDecoration(
+                        color: Color.fromARGB(255, 245, 241, 248),
+                        borderRadius: BorderRadius.all(Radius.circular(50))),
+                    child: Icon(
+                      Icons.star_outline,
+                      color: Colors.grey[500],
+                    ),
+                  ),
+                ],
+              ),
+              if (recepients != '')
+                Column(children: <Widget>[
+                  const SizedBox(height: 15),
+                  Text('To $recepients',
+                      style: TextStyle(color: Colors.grey[500], fontSize: 12)),
+                ])
+              else
+                Container(),
+              const SizedBox(height: 15),
+              Text(body,
+                  style: TextStyle(
+                      color: Colors.grey[700], height: 1.35, fontSize: 14.5)),
+              const SizedBox(height: 9),
+              SizedBox(
+                  width: MediaQuery.of(context).size.width,
+                  child:
+                      (bodyImage != '') ? Image.asset(bodyImage) : Container()),
+              const SizedBox(height: 10),
+              Row(
+                mainAxisAlignment: MainAxisAlignment.spaceAround,
+                children: [
+                  SizedBox(
+                      width: 126,
+                      child: OutlinedButton(
+                        onPressed: () {},
+                        style: ButtonStyle(
+                          shape: MaterialStateProperty.all(
+                              RoundedRectangleBorder(
+                                  borderRadius: BorderRadius.circular(30.0))),
+                          backgroundColor: MaterialStateProperty.all<Color>(
+                              const Color.fromARGB(255, 245, 241, 248)),
+                          side: MaterialStateProperty.all(const BorderSide(
+                              width: 0.0, color: Colors.transparent)),
+                        ),
+                        child: Text(
+                          'Reply',
+                          style:
+                              TextStyle(color: Colors.grey[700], fontSize: 12),
+                        ),
+                      )),
+                  SizedBox(
+                      width: 126,
+                      child: OutlinedButton(
+                        onPressed: () {},
+                        style: ButtonStyle(
+                          shape: MaterialStateProperty.all(
+                              RoundedRectangleBorder(
+                                  borderRadius: BorderRadius.circular(30.0))),
+                          backgroundColor: MaterialStateProperty.all<Color>(
+                              const Color.fromARGB(255, 245, 241, 248)),
+                          side: MaterialStateProperty.all(const BorderSide(
+                              width: 0.0, color: Colors.transparent)),
+                        ),
+                        child: Text(
+                          'Reply all',
+                          style:
+                              TextStyle(color: Colors.grey[700], fontSize: 12),
+                        ),
+                      )),
+                ],
+              ),
+            ],
           ),
         ),
       ),
@@ -598,7 +968,7 @@ class _RouteDetailView extends StatelessWidget {
               child: const Icon(Icons.arrow_back),
             ),
           ),
-          _DetailTile(item: item),
+          Expanded(child: _DetailTile(item: item)),
         ],
       ),
     );
@@ -616,100 +986,89 @@ class _ExamplePage extends StatelessWidget {
 
 class _Item {
   const _Item({
-    required this.name,
-    required this.time,
     required this.title,
-    required this.body,
+    required this.emails,
+  });
+
+  final String title;
+  final List<_Email>? emails;
+}
+
+class _Email {
+  const _Email({
+    required this.sender,
+    required this.recepients,
     required this.image,
+    required this.time,
+    required this.body,
+    required this.bodyImage,
   });
 
-  final String name;
+  final String sender;
+  final String recepients;
+  final String image;
   final String time;
-  final String title;
   final String body;
-  final String image;
+  final String bodyImage;
 }
 
-const List<_Item> _all_Items = <_Item>[
+const List<_Item> allItems = <_Item>[
   _Item(
-    name: 'So Duri',
-    time: '20 min',
     title: 'Dinner Club',
-    body:
-        "I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1463453091185-61582044d556?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTJ8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
-  ),
-  _Item(
-    name: 'Lily Mac',
-    time: '2 hours',
-    title: 'This food show is made for you',
-    body:
-        "3I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8cHJvZmlsZSUyMHBpY3R1cmV8ZW58MHx8MHx8&auto=format&fit=crop&w=400&q=60',
-  ),
-  _Item(
-    name: 'Lani Mansell',
-    time: '10 min',
-    title: 'Dinner Club 4',
-    body:
-        "4I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1629467057571-42d22d8f0cbd?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTN8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
-  ),
-  _Item(
-    name: 'Caitlyn Mars',
-    time: '10 min',
-    title: 'This food ',
-    body:
-        "1I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1619895862022-09114b41f16f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8cHJvZmlsZSUyMHBpY3R1cmV8ZW58MHx8MHx8&auto=format&fit=crop&w=400&q=60',
-  ),
-  _Item(
-    name: 'Robin Goff',
-    time: '10 min',
-    title: 'Dinner Club 5',
-    body:
-        "5I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1518020382113-a7e8fc38eac9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTh8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
-  ),
-  _Item(
-    name: 'Klara Blan',
-    time: '10 min',
-    title: 'Dinner Club 6',
-    body:
-        "6I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1518020382113-a7e8fc38eac9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTh8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
-  ),
-  _Item(
-    name: 'Bianka Bass',
-    time: '10 min',
-    title: 'Dinner Club 7',
-    body:
-        "7I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1518020382113-a7e8fc38eac9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTh8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
+    emails: <_Email>[
+      _Email(
+        sender: 'So Duri',
+        recepients: 'me, Ziad and Lily',
+        image: 'images/young-man.png',
+        time: '20 min',
+        body:
+            "I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. I'm so intrigued by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
+        bodyImage: '',
+      ),
+      _Email(
+          sender: 'Me',
+          recepients: 'me, Ziad, and Lily',
+          image: 'images/woman.png',
+          time: '4 min',
+          body:
+              'Yes! I forgot about that place! Im definitely up for taking a risk this week and handing control over to this mysterious noodle chef. I wonder what happens if you have allergies though? Lucky none of us have any otherwise Id be a bit concerned.',
+          bodyImage: ''),
+      _Email(
+          sender: 'Ziad Aouad',
+          recepients: 'me, Ziad and Lily',
+          image: 'images/man.png',
+          time: '2 min',
+          body:
+              'Hey guys! Im pretty sure if you tell your waiter about any food restrictions or allergies, they should be able to cater to it. Im super excited though, see yall soon!',
+          bodyImage: ''),
+    ],
   ),
   _Item(
-    name: 'Beau Kline',
-    time: '10 min',
-    title: 'Dinner Club 8',
-    body:
-        "8I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1518020382113-a7e8fc38eac9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTh8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
+    title: '7 Best Yoga Poses for Strength Training',
+    emails: [
+      _Email(
+        sender: 'Elaine Howley',
+        time: '2 hours',
+        body:
+            'Though many people think of yoga as mostly a way to stretch out and relax, in actuality, it can provide a fantastic full-body workout that can even make you stronger.',
+        image: 'images/beauty.png',
+        bodyImage: 'images/yoga.png',
+        recepients: '',
+      ),
+    ],
   ),
   _Item(
-    name: 'Fran Martin',
-    time: '10 min',
-    title: 'Dinner Club 9',
-    body:
-        "9I think it's time for us to finally try that new noodle shop downtown that doesn't use menus. Anyone else have other suggestions for dinner club this week? I'm so intruiged by this idea of a noodle restaurant where no one gets to order for themselves - could be fun, or terrible, or both :)",
-    image:
-        'https://images.unsplash.com/photo-1518020382113-a7e8fc38eac9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTh8fHByb2ZpbGUlMjBwaWN0dXJlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=400&q=60',
+    title: 'A Programming Language for Hardware Accelerators',
+    emails: [
+      _Email(
+        sender: 'Laney Mansell',
+        time: '10 min',
+        body:
+            'Moore’s Law needs a hug. The days of stuffing transistors on little silicon computer chips are numbered, and their life rafts — hardware accelerators — come with a price. ',
+        image: 'images/woman2.png',
+        bodyImage: '',
+        recepients: '',
+      ),
+    ],
   ),
 ];
diff --git a/packages/adaptive_scaffold/example/pubspec.yaml b/packages/adaptive_scaffold/example/pubspec.yaml
index 5643cb0c..28fcdf15 100644
--- a/packages/adaptive_scaffold/example/pubspec.yaml
+++ b/packages/adaptive_scaffold/example/pubspec.yaml
@@ -15,10 +15,30 @@ dependencies:
   flutter:
     sdk: flutter
 
+
+
+  cupertino_icons: ^1.0.2
+
 dev_dependencies:
   flutter_test:
     sdk: flutter
 
+  flutter_lints: ^2.0.0
+
 flutter:
+
   uses-material-design: true
+
+  assets:
+    - images/noodles.png
+    - images/plant-based.png
+    - images/user.png
+    - images/singapore.png
+    - images/woman.png
+    - images/woman2.png
+    - images/young-man.png
+    - images/man.png
+    - images/yoga.png
+    - images/beauty.png
+
   
\ No newline at end of file
diff --git a/packages/adaptive_scaffold/example/test/adaptive_layout_demo_test.dart b/packages/adaptive_scaffold/example/test/adaptive_layout_demo_test.dart
index 33fd406f..12b407ce 100644
--- a/packages/adaptive_scaffold/example/test/adaptive_layout_demo_test.dart
+++ b/packages/adaptive_scaffold/example/test/adaptive_layout_demo_test.dart
@@ -2,11 +2,266 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+import 'package:adaptive_scaffold/src/adaptive_layout.dart';
+import 'package:adaptive_scaffold/src/slot_layout.dart';
+import 'package:adaptive_scaffold/src/breakpoints.dart';
+import 'package:adaptive_scaffold/adaptive_scaffold.dart';
 import 'package:adaptive_scaffold_example/adaptive_layout_demo.dart' as example;
 import 'package:flutter/material.dart';
 import 'package:flutter_test/flutter_test.dart';
 
+Future<MaterialApp> layout({
+  required double width,
+  required WidgetTester tester,
+  Axis orientation = Axis.horizontal,
+  TextDirection directionality = TextDirection.ltr,
+  double? bodyRatio,
+  bool animations = true,
+}) async {
+  await tester.binding.setSurfaceSize(Size(width, 800));
+  final List<Widget> children = List<Widget>.generate(10, (int index) {
+    return Padding(
+      padding: const EdgeInsets.all(8.0),
+      child: Container(
+        color: const Color.fromARGB(255, 255, 201, 197),
+        height: 400,
+      ),
+    );
+  });
+
+  // Define the list of destinations to be used within the app.
+  const List<NavigationDestination> destinations = <NavigationDestination>[
+    NavigationDestination(
+        label: 'Inbox', icon: Icon(Icons.inbox, color: Colors.black)),
+    NavigationDestination(
+        label: 'Articles',
+        icon: Icon(Icons.article_outlined, color: Colors.black)),
+    NavigationDestination(
+        label: 'Chat',
+        icon: Icon(Icons.chat_bubble_outline, color: Colors.black)),
+    NavigationDestination(
+        label: 'Video',
+        icon: Icon(Icons.video_call_outlined, color: Colors.black)),
+  ];
+
+  Widget trailingNavRail = Column(
+    children: [
+      const Divider(
+        color: Colors.black,
+      ),
+      const SizedBox(
+        height: 10,
+      ),
+      Row(
+        children: const [
+          SizedBox(
+            width: 27,
+          ),
+          Text(
+            "Folders",
+            style: TextStyle(fontSize: 16),
+          ),
+        ],
+      ),
+      const SizedBox(
+        height: 10,
+      ),
+      Row(
+        children: [
+          const SizedBox(
+            width: 16,
+          ),
+          IconButton(
+            onPressed: () {},
+            icon: const Icon(Icons.folder_copy_outlined),
+            iconSize: 21,
+          ),
+          const SizedBox(
+            width: 21,
+          ),
+          const Text("Freelance"),
+        ],
+      ),
+      const SizedBox(
+        height: 12,
+      ),
+      Row(
+        children: [
+          const SizedBox(
+            width: 16,
+          ),
+          IconButton(
+            onPressed: () {},
+            icon: const Icon(Icons.folder_copy_outlined),
+            iconSize: 21,
+          ),
+          const SizedBox(
+            width: 21,
+          ),
+          const Text("Mortage"),
+        ],
+      ),
+      const SizedBox(
+        height: 12,
+      ),
+      Row(
+        children: [
+          const SizedBox(
+            width: 16,
+          ),
+          IconButton(
+            onPressed: () {},
+            icon: const Icon(Icons.folder_copy_outlined),
+            iconSize: 21,
+          ),
+          const SizedBox(
+            width: 21,
+          ),
+          const Flexible(
+              child: Text(
+            "Taxes",
+            overflow: TextOverflow.ellipsis,
+          )),
+        ],
+      ),
+      const SizedBox(
+        height: 12,
+      ),
+      Row(
+        children: [
+          const SizedBox(
+            width: 16,
+          ),
+          IconButton(
+            onPressed: () {},
+            icon: const Icon(Icons.folder_copy_outlined),
+            iconSize: 21,
+          ),
+          const SizedBox(
+            width: 21,
+          ),
+          const Flexible(
+              child: Text(
+            "Receipts",
+            overflow: TextOverflow.ellipsis,
+          )),
+        ],
+      ),
+    ],
+  );
+  return MaterialApp(
+      home: MediaQuery(
+    data: MediaQueryData(size: Size(width, 800)),
+    child: Directionality(
+      textDirection: directionality,
+      child: AdaptiveLayout(
+        bodyOrientation: orientation,
+        bodyRatio: bodyRatio,
+        internalAnimations: animations,
+        primaryNavigation: SlotLayout(
+          config: {
+            Breakpoints.small: SlotLayout.from(
+                key: const Key('pnav'),
+                builder: (_) => const SizedBox.shrink()),
+            Breakpoints.medium: SlotLayout.from(
+              inAnimation: AdaptiveScaffold.leftOutIn,
+              key: const Key('pnav1'),
+              builder: (_) => AdaptiveScaffold.toRailFromDestinations(
+                  leading: const Icon(Icons.menu), destinations: destinations),
+            ),
+            Breakpoints.large: SlotLayout.from(
+              key: const Key('pn1'),
+              inAnimation: AdaptiveScaffold.leftOutIn,
+              builder: (_) => AdaptiveScaffold.toRailFromDestinations(
+                extended: true,
+                leading: Row(
+                  mainAxisAlignment: MainAxisAlignment.spaceAround,
+                  children: const [
+                    Text(
+                      "REPLY",
+                      style:
+                          TextStyle(color: Color.fromARGB(255, 255, 201, 197)),
+                    ),
+                    Icon(Icons.menu_open)
+                  ],
+                ),
+                destinations: destinations,
+                trailing: trailingNavRail,
+              ),
+            ),
+          },
+        ),
+        body: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            Breakpoints.small: SlotLayout.from(
+              key: const Key('body'),
+              builder: (_) => ListView.builder(
+                itemCount: 10,
+                itemBuilder: (context, index) => Padding(
+                  padding: const EdgeInsets.all(8.0),
+                  child: Container(
+                    color: const Color.fromARGB(255, 255, 201, 197),
+                    height: 400,
+                  ),
+                ),
+              ),
+            ),
+            Breakpoints.medium: SlotLayout.from(
+              key: const Key('body1'),
+              builder: (_) =>
+                  GridView.count(crossAxisCount: 2, children: <Widget>[
+                for (int i = 0; i < 10; i++)
+                  Padding(
+                    padding: const EdgeInsets.all(8.0),
+                    child: Container(
+                      color: const Color.fromARGB(255, 255, 201, 197),
+                      height: 400,
+                    ),
+                  )
+              ]),
+            ),
+            Breakpoints.large: SlotLayout.from(
+              key: const Key('body1'),
+              builder: (_) =>
+                  GridView.count(crossAxisCount: 2, children: <Widget>[
+                for (int i = 0; i < 10; i++)
+                  Padding(
+                    padding: const EdgeInsets.all(8.0),
+                    child: Container(
+                      color: const Color.fromARGB(255, 255, 201, 197),
+                      height: 400,
+                    ),
+                  )
+              ]),
+            ),
+          },
+        ),
+        bottomNavigation: SlotLayout(
+          config: {
+            Breakpoints.small: SlotLayout.from(
+              key: const Key('bn'),
+              inAnimation: AdaptiveScaffold.bottomToTop,
+              outAnimation: AdaptiveScaffold.topToBottom,
+              builder: (_) => AdaptiveScaffold.toBottomNavigationBar(
+                  destinations: destinations),
+            ),
+            Breakpoints.medium: SlotLayoutConfig.empty(),
+            Breakpoints.large: SlotLayoutConfig.empty()
+          },
+        ),
+      ),
+    ),
+  ));
+}
+
 void main() {
+  final Finder body = find.byKey(const Key('body'));
+  final Finder body1 = find.byKey(const Key('body1'));
+  final Finder pnav = find.byKey(const Key('pnav'));
+  final Finder pnav1 = find.byKey(const Key('pnav1'));
+  final Finder pn1 = find.byKey(const Key('pn1'));
+  final Finder bn = find.byKey(const Key('bn'));
+
   Future<void> updateScreen(double width, WidgetTester tester) async {
     await tester.binding.setSurfaceSize(Size(width, 800));
     await tester.pumpWidget(
@@ -23,7 +278,7 @@ void main() {
       (WidgetTester tester) async {
     await updateScreen(300, tester);
     expect(find.byKey(const Key('body')), findsOneWidget);
-    expect(find.byKey(const Key('pn')), findsNothing);
+    expect(find.byKey(const Key('pnav')), findsOneWidget);
     expect(find.byKey(const Key('bn')), findsOneWidget);
     expect(find.byKey(const Key('body1')), findsNothing);
     expect(find.byKey(const Key('pn1')), findsNothing);
@@ -32,11 +287,72 @@ void main() {
     expect(find.byKey(const Key('body')), findsNothing);
     expect(find.byKey(const Key('bn')), findsNothing);
     expect(find.byKey(const Key('body1')), findsOneWidget);
-    expect(find.byKey(const Key('pn')), findsOneWidget);
+    expect(find.byKey(const Key('pnav1')), findsOneWidget);
     expect(find.byKey(const Key('pn1')), findsNothing);
+  });
+
+  testWidgets(
+      'adaptive layout bottom navigation displays with correct properties',
+      (WidgetTester tester) async {
+    await updateScreen(400, tester);
+    final BuildContext context = tester.element(find.byType(MaterialApp));
+
+    // Bottom Navigation Bar
+    final findKey = find.byKey(const Key('bn'));
+    SlotLayoutConfig slotLayoutConfig =
+        tester.firstWidget<SlotLayoutConfig>(findKey);
+    WidgetBuilder? widgetBuilder = slotLayoutConfig.builder;
+    Widget Function(BuildContext) widgetFunction =
+        widgetBuilder as Widget Function(BuildContext);
+
+    BottomNavigationBar bottomNavigationBar =
+        ((widgetFunction(context) as Builder).builder(context) as Theme).child
+            as BottomNavigationBar;
+    expect(bottomNavigationBar.backgroundColor, Colors.white);
+    expect(bottomNavigationBar.selectedItemColor, Colors.black);
+    expect(bottomNavigationBar.iconSize, 24);
+  });
+
+  testWidgets(
+      'adaptive layout navigation rail displays with correct properties',
+      (WidgetTester tester) async {
+    await updateScreen(620, tester);
+    final BuildContext context = tester.element(find.byType(AdaptiveLayout));
+
+    final findKey = find.byKey(const Key('pnav1'));
+    SlotLayoutConfig slotLayoutConfig =
+        tester.firstWidget<SlotLayoutConfig>(findKey);
+    WidgetBuilder? widgetBuilder = slotLayoutConfig.builder;
+    Widget Function(BuildContext) widgetFunction =
+        widgetBuilder as Widget Function(BuildContext);
+    SizedBox sizedBox =
+        ((widgetFunction(context) as Builder).builder(context) as Padding).child
+            as SizedBox;
+    expect(sizedBox.width, 72);
+  });
+
+  testWidgets('adaptive layout displays children in correct places',
+      (WidgetTester tester) async {
+    await updateScreen(400, tester);
+    expect(tester.getTopLeft(pnav), Offset.zero);
+    expect(tester.getTopRight(pnav), Offset.zero);
+    expect(tester.getBottomLeft(bn), const Offset(0, 800));
+    expect(tester.getBottomRight(bn), const Offset(400, 800));
+    expect(tester.getTopRight(body), const Offset(400, 0));
+    expect(tester.getTopLeft(body), const Offset(0, 0));
+  });
+
+  testWidgets('adaptive layout does not animate when animations off',
+      (WidgetTester tester) async {
+    final Finder b = find.byKey(const Key('body1'));
+
+    await tester.pumpWidget(
+        await layout(width: 690, tester: tester, animations: false));
+
+    await tester.pump();
+    await tester.pump(const Duration(milliseconds: 100));
 
-    await updateScreen(900, tester);
-    expect(find.byKey(const Key('pn')), findsNothing);
-    expect(find.byKey(const Key('pn1')), findsOneWidget);
+    expect(tester.getTopLeft(b), const Offset(88, 0));
+    expect(tester.getBottomRight(b), const Offset(690, 800));
   });
 }
diff --git a/packages/adaptive_scaffold/example/test/adaptive_scaffold_demo_test.dart b/packages/adaptive_scaffold/example/test/adaptive_scaffold_demo_test.dart
index 5f3011d8..08c47f6a 100644
--- a/packages/adaptive_scaffold/example/test/adaptive_scaffold_demo_test.dart
+++ b/packages/adaptive_scaffold/example/test/adaptive_scaffold_demo_test.dart
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+import 'package:adaptive_scaffold/adaptive_scaffold.dart';
 import 'package:adaptive_scaffold_example/adaptive_scaffold_demo.dart'
     as example;
 import 'package:flutter/material.dart';
@@ -27,11 +28,62 @@ void main() {
     await tester.pumpAndSettle();
   }
 
+  Future<MaterialApp> scaffold({
+    required double width,
+    required WidgetTester tester,
+    bool animations = true,
+  }) async {
+    await tester.binding.setSurfaceSize(Size(width, 800));
+    final List<Widget> children = <Widget>[
+      for (int i = 0; i < 10; i++)
+        Padding(
+          padding: const EdgeInsets.all(8.0),
+          child: Container(
+            color: const Color.fromARGB(255, 255, 201, 197),
+            height: 400,
+          ),
+        )
+    ];
+    return MaterialApp(
+      home: BottomNavigationBarTheme(
+        data: const BottomNavigationBarThemeData(
+            unselectedItemColor: Colors.black, selectedItemColor: Colors.black),
+        child: AdaptiveScaffold(
+          // An option to override the default breakpoints used for small, medium,
+          // and large.
+          smallBreakpoint: const WidthPlatformBreakpoint(end: 700),
+          mediumBreakpoint:
+              const WidthPlatformBreakpoint(begin: 700, end: 1000),
+          largeBreakpoint: const WidthPlatformBreakpoint(begin: 1000),
+          useDrawer: false,
+          destinations: const <NavigationDestination>[
+            NavigationDestination(icon: Icon(Icons.inbox), label: 'Inbox'),
+            NavigationDestination(icon: Icon(Icons.article), label: 'Articles'),
+            NavigationDestination(icon: Icon(Icons.chat), label: 'Chat'),
+            NavigationDestination(icon: Icon(Icons.video_call), label: 'Video'),
+          ],
+          body: (_) => GridView.count(crossAxisCount: 2, children: children),
+          smallBody: (_) => ListView.builder(
+              itemCount: 10, itemBuilder: (_, int idx) => children[idx]),
+          // Define a default secondaryBody.
+          secondaryBody: (_) =>
+              Container(color: const Color.fromARGB(255, 234, 158, 192)),
+          // Override the default secondaryBody during the smallBreakpoint to be
+          // empty. Must use AdaptiveScaffold.emptyBuilder to ensure it is properly
+          // overriden.
+          smallSecondaryBody: AdaptiveScaffold.emptyBuilder,
+        ),
+      ),
+    );
+  }
+
   testWidgets('dislays correct item of config based on screen width',
       (WidgetTester tester) async {
     await updateScreen(300, tester);
     expect(smallBody, findsOneWidget);
     expect(bnav, findsOneWidget);
+    expect(tester.getTopLeft(smallBody), Offset.zero);
+    expect(tester.getTopLeft(bnav), const Offset(0, 744));
     expect(body, findsNothing);
     expect(largeBody, findsNothing);
     expect(pnav, findsNothing);
@@ -39,15 +91,80 @@ void main() {
 
     await updateScreen(800, tester);
     expect(body, findsOneWidget);
+    expect(tester.getTopLeft(body), const Offset(88, 0));
     expect(body, findsOneWidget);
     expect(bnav, findsNothing);
     expect(largeBody, findsNothing);
     expect(pnav, findsOneWidget);
+    expect(tester.getTopLeft(pnav), Offset.zero);
+    expect(tester.getBottomRight(pnav), const Offset(88, 800));
     expect(pnav1, findsNothing);
 
     await updateScreen(1100, tester);
     expect(body, findsOneWidget);
     expect(pnav, findsNothing);
     expect(pnav1, findsOneWidget);
+    expect(tester.getTopLeft(pnav1), Offset.zero);
+    expect(tester.getBottomRight(pnav1), const Offset(208, 800));
+  });
+
+  testWidgets('adaptive scaffold animations work correctly',
+      (WidgetTester tester) async {
+    final Finder b = find.byKey(const Key('body'));
+    final Finder sBody = find.byKey(const Key('sBody'));
+
+    await tester.pumpWidget(await scaffold(width: 400, tester: tester));
+    await tester.pumpWidget(await scaffold(width: 800, tester: tester));
+
+    await tester.pump();
+    await tester.pump(const Duration(milliseconds: 200));
+
+    expect(tester.getTopLeft(b), const Offset(17.6, 0));
+    expect(tester.getBottomRight(b),
+        offsetMoreOrLessEquals(const Offset(778.2, 800), epsilon: 1.0));
+    expect(tester.getTopLeft(sBody),
+        offsetMoreOrLessEquals(const Offset(778.2, 0), epsilon: 1.0));
+    expect(tester.getBottomRight(sBody),
+        offsetMoreOrLessEquals(const Offset(1178.2, 800), epsilon: 1.0));
+
+    await tester.pump();
+    await tester.pump(const Duration(milliseconds: 600));
+
+    expect(tester.getTopLeft(b), const Offset(70.4, 0));
+    expect(tester.getBottomRight(b),
+        offsetMoreOrLessEquals(const Offset(416.0, 800), epsilon: 1.0));
+    expect(tester.getTopLeft(sBody),
+        offsetMoreOrLessEquals(const Offset(416, 0), epsilon: 1.0));
+    expect(tester.getBottomRight(sBody),
+        offsetMoreOrLessEquals(const Offset(816, 800), epsilon: 1.0));
+
+    await tester.pump();
+    await tester.pump(const Duration(milliseconds: 200));
+
+    expect(tester.getTopLeft(b), const Offset(88, 0));
+    expect(tester.getBottomRight(b), const Offset(400, 800));
+    expect(tester.getTopLeft(sBody), const Offset(400, 0));
+    expect(tester.getBottomRight(sBody), const Offset(800, 800));
+  });
+
+  testWidgets('adaptive scaffold animations can be disabled',
+      (WidgetTester tester) async {
+    final Finder b = find.byKey(const Key('body'));
+    final Finder sBody = find.byKey(const Key('sBody'));
+
+    await tester.pumpWidget(
+        await scaffold(width: 400, tester: tester, animations: false));
+    await tester.pumpWidget(
+        await scaffold(width: 800, tester: tester, animations: false));
+
+    await tester.pump();
+    await tester.pump(const Duration(milliseconds: 200));
+
+    expect(tester.getTopLeft(b),
+        offsetMoreOrLessEquals(const Offset(17.6, 0), epsilon: 0.1));
+    expect(tester.getBottomRight(b),
+        offsetMoreOrLessEquals(const Offset(778.2, 800.0), epsilon: 0.1));
+    expect(tester.getTopLeft(sBody),
+        offsetMoreOrLessEquals(const Offset(778.2, 0), epsilon: 0.1));
   });
 }
diff --git a/packages/adaptive_scaffold/lib/adaptive_helper.dart b/packages/adaptive_scaffold/lib/adaptive_helper.dart
new file mode 100644
index 00000000..6fd676c8
--- /dev/null
+++ b/packages/adaptive_scaffold/lib/adaptive_helper.dart
@@ -0,0 +1,8 @@
+// Copyright 2013 The Flutter Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+export 'src/adaptive_layout.dart';
+export 'src/slot_layout.dart';
+export 'src/adaptive_scaffold.dart';
+export 'src/breakpoints.dart';
diff --git a/packages/adaptive_scaffold/lib/src/adaptive_scaffold.dart b/packages/adaptive_scaffold/lib/src/adaptive_scaffold.dart
index e1f3fd80..34b60d1b 100644
--- a/packages/adaptive_scaffold/lib/src/adaptive_scaffold.dart
+++ b/packages/adaptive_scaffold/lib/src/adaptive_scaffold.dart
@@ -3,11 +3,18 @@
 // found in the LICENSE file.
 
 import 'package:flutter/material.dart';
+import 'package:masonry_grid/masonry_grid.dart';
+
 import 'adaptive_layout.dart';
 import 'breakpoints.dart';
 import 'slot_layout.dart';
 
-/// Implements the basic visual layout structure for [Material Design 3](https://m3.material.io/foundations/adaptive-design/overview) that
+const double materialGutterValue = 8;
+const double materialCompactMinMargin = 8;
+const double materialMediumMinMargin = 12;
+const double materialExpandedMinMargin = 32;
+
+/// Implements the basic visual layout structure for Material Design 3 that
 /// adapts to a variety of screens.
 ///
 /// !["Example of a display made with AdaptiveScaffold"](../../example/demo_files/adaptiveScaffold.gif)
@@ -62,6 +69,9 @@ class AdaptiveScaffold extends StatefulWidget {
     super.key,
     required this.destinations,
     this.selectedIndex = 0,
+    this.leadingUnExtendedNavRail,
+    this.leadingExtendedNavRail,
+    this.trailingNavRail,
     this.smallBody,
     this.body,
     this.largeBody,
@@ -91,6 +101,18 @@ class AdaptiveScaffold extends StatefulWidget {
   /// The index to be used by the [NavigationRail].
   final int selectedIndex;
 
+  /// Option to display a leading widget at the top of the navigation rail
+  /// at the middle breakpoint.
+  final Widget? leadingUnExtendedNavRail;
+
+  /// Option to display a leading widget at the top of the navigation rail
+  /// at the largest breakpoint.
+  final Widget? leadingExtendedNavRail;
+
+  /// Option to display a trailing widget below the destinations of the
+  /// navigation rail at the largest breakpoint.
+  final Widget? trailingNavRail;
+
   /// Widget to be displayed in the body slot at the smallest breakpoint.
   ///
   /// If nothing is entered for this property, then the default [body] is
@@ -199,12 +221,44 @@ class AdaptiveScaffold extends StatefulWidget {
   /// Callback function for when the index of a [NavigationRail] changes.
   static WidgetBuilder emptyBuilder = (_) => const SizedBox();
 
+  static Builder toRailFromDestinations({
+    required List<NavigationDestination> destinations,
+    double width = 72,
+    int selectedIndex = 0,
+    bool extended = false,
+    Color backgroundColor = Colors.transparent,
+    Widget? leading,
+    Widget? trailing,
+    Function(int)? onDestinationSelected,
+    IconThemeData selectedIconTheme = const IconThemeData(color: Colors.black),
+    IconThemeData unselectedIconTheme =
+        const IconThemeData(color: Colors.black),
+    TextStyle selectedLabelTextStyle = const TextStyle(color: Colors.black),
+    NavigationRailLabelType labelType = NavigationRailLabelType.none,
+  }) {
+    return toNavigationRail(
+        width: width,
+        labelType: labelType,
+        leading: leading,
+        trailing: trailing,
+        onDestinationSelected: onDestinationSelected,
+        backgroundColor: backgroundColor,
+        extended: extended,
+        selectedIndex: selectedIndex,
+        selectedIconTheme: selectedIconTheme,
+        unselectedIconTheme: unselectedIconTheme,
+        selectedLabelTextStyle: selectedLabelTextStyle,
+        destinations: destinations
+            .map((NavigationDestination e) => _toRailDestination(e))
+            .toList());
+  }
+
   /// Public helper method to be used for creating a [NavigationRail] from a
   /// list of [NavigationDestination]s. Takes in a [selectedIndex] property for
   /// the current selected item in the [NavigationRail] and [extended] for
   /// whether the [NavigationRail] is extended or not.
   static Builder toNavigationRail({
-    required List<NavigationDestination> destinations,
+    required List<NavigationRailDestination> destinations,
     double width = 72,
     int selectedIndex = 0,
     bool extended = false,
@@ -212,43 +266,134 @@ class AdaptiveScaffold extends StatefulWidget {
     Widget? leading,
     Widget? trailing,
     Function(int)? onDestinationSelected,
+    IconThemeData selectedIconTheme = const IconThemeData(color: Colors.black),
+    IconThemeData unselectedIconTheme =
+        const IconThemeData(color: Colors.black),
+    TextStyle selectedLabelTextStyle = const TextStyle(color: Colors.black),
     NavigationRailLabelType labelType = NavigationRailLabelType.none,
   }) {
     if (extended && width == 72) {
-      width = 192;
+      width = 150;
     }
-    return Builder(
-      builder: (BuildContext context) {
-        return SizedBox(
+    return Builder(builder: (BuildContext context) {
+      return Padding(
+        padding: const EdgeInsets.all(8.0),
+        child: SizedBox(
           width: width,
           height: MediaQuery.of(context).size.height,
-          child: NavigationRail(
-              onDestinationSelected: onDestinationSelected,
-              labelType: labelType,
-              leading: leading,
-              trailing: trailing,
-              backgroundColor: backgroundColor,
-              extended: extended,
-              selectedIndex: selectedIndex,
-              destinations: destinations
-                  .map((NavigationDestination e) => _toRailDestination(e))
-                  .toList()),
-        );
-      },
-    );
+          child: LayoutBuilder(
+            builder: (BuildContext context, BoxConstraints constraints) {
+              return SingleChildScrollView(
+                child: ConstrainedBox(
+                  constraints: BoxConstraints(minHeight: constraints.maxHeight),
+                  child: IntrinsicHeight(
+                    child: NavigationRail(
+                        labelType: labelType,
+                        leading: leading,
+                        trailing: trailing,
+                        onDestinationSelected: onDestinationSelected,
+                        backgroundColor: backgroundColor,
+                        extended: extended,
+                        selectedIndex: selectedIndex,
+                        selectedIconTheme: selectedIconTheme,
+                        unselectedIconTheme: unselectedIconTheme,
+                        selectedLabelTextStyle: selectedLabelTextStyle,
+                        destinations: destinations.toList()),
+                  ),
+                ),
+              );
+            },
+          ),
+        ),
+      );
+    });
   }
 
   /// Public helper method to be used for creating a [BottomNavigationBar] from
   /// a list of [NavigationDestination]s.
-  static BottomNavigationBar toBottomNavigationBar(
-      {required List<NavigationDestination> destinations}) {
-    return BottomNavigationBar(
-      items: destinations
-          .map((NavigationDestination e) => _toBottomNavItem(e))
-          .toList(),
+  static Builder toBottomNavigationBar(
+      {required List<NavigationDestination> destinations,
+      int currentIndex = 0,
+      double iconSize = 24,
+      Color selectedItemColor = Colors.black,
+      Color backgroundColor = Colors.white}) {
+    return Builder(
+      builder: (BuildContext context) {
+        return Theme(
+            data: Theme.of(context).copyWith(
+              canvasColor: backgroundColor,
+            ),
+            child: BottomNavigationBar(
+              backgroundColor: backgroundColor,
+              selectedItemColor: selectedItemColor,
+              currentIndex: currentIndex,
+              iconSize: iconSize,
+              items: destinations
+                  .map((NavigationDestination e) => _toBottomNavItem(e))
+                  .toList(),
+            ));
+      },
     );
   }
 
+  /// Public helper method to be used for creating a [MasonryGrid] following m3
+  /// specs from a list of [Widget]s
+  static Builder toMaterialGrid({
+    List<Widget> thisWidgets = const <Widget>[],
+    List<Breakpoint> breakpoints = const <Breakpoint>[
+      Breakpoints.small,
+      Breakpoints.medium,
+      Breakpoints.large,
+    ],
+    double margin = 8,
+    int itemColumns = 1,
+    required BuildContext context,
+  }) {
+    return Builder(builder: (BuildContext context) {
+      Breakpoint? currentBreakpoint;
+      for (final Breakpoint breakpoint in breakpoints) {
+        if (breakpoint.isActive(context)) {
+          currentBreakpoint = breakpoint;
+        }
+      }
+      double? thisMargin = margin;
+
+      if (currentBreakpoint == Breakpoints.small) {
+        if (thisMargin < materialCompactMinMargin) {
+          thisMargin = materialCompactMinMargin;
+        }
+      } else if (currentBreakpoint == Breakpoints.medium) {
+        if (thisMargin < materialMediumMinMargin) {
+          thisMargin = materialMediumMinMargin;
+        }
+      } else if (currentBreakpoint == Breakpoints.large) {
+        if (thisMargin < materialExpandedMinMargin) {
+          thisMargin = materialExpandedMinMargin;
+        }
+      }
+      return CustomScrollView(
+        primary: false,
+        controller: ScrollController(),
+        shrinkWrap: true,
+        physics: const AlwaysScrollableScrollPhysics(),
+        scrollDirection: Axis.vertical,
+        slivers: [
+          SliverToBoxAdapter(
+            child: Padding(
+              padding: EdgeInsets.all(thisMargin),
+              child: MasonryGrid(
+                column: itemColumns,
+                crossAxisSpacing: materialGutterValue,
+                mainAxisSpacing: materialGutterValue,
+                children: thisWidgets,
+              ),
+            ),
+          ),
+        ],
+      );
+    });
+  }
+
   /// Animation from bottom offscreen up onto the screen.
   static AnimatedWidget bottomToTop(Widget child, Animation<double> animation) {
     return SlideTransition(
@@ -366,7 +511,10 @@ class _AdaptiveScaffoldState extends State<AdaptiveScaffold> {
                           builder: (_) => AdaptiveScaffold.toNavigationRail(
                             width: widget.navigationRailWidth,
                             selectedIndex: widget.selectedIndex,
-                            destinations: widget.destinations,
+                            destinations: widget.destinations
+                                .map((NavigationDestination e) =>
+                                    _toRailDestination(e))
+                                .toList(),
                             onDestinationSelected: widget.onSelectedIndexChange,
                           ),
                         ),
@@ -376,7 +524,10 @@ class _AdaptiveScaffoldState extends State<AdaptiveScaffold> {
                             width: widget.extendedNavigationRailWidth,
                             extended: true,
                             selectedIndex: widget.selectedIndex,
-                            destinations: widget.destinations,
+                            destinations: widget.destinations
+                                .map((NavigationDestination e) =>
+                                    _toRailDestination(e))
+                                .toList(),
                             onDestinationSelected: widget.onSelectedIndexChange,
                           ),
                         ),
diff --git a/packages/adaptive_scaffold/lib/src/breakpoint.dart b/packages/adaptive_scaffold/lib/src/breakpoint.dart
new file mode 100644
index 00000000..d7cbdf62
--- /dev/null
+++ b/packages/adaptive_scaffold/lib/src/breakpoint.dart
@@ -0,0 +1,14 @@
+// Copyright 2014 The Flutter Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'package:flutter/widgets.dart';
+
+/// Breakpoint used in [SlotLayout] and [AdaptiveScaffold].
+abstract class Breakpoint {
+  /// Returns a [Breakpoint].
+  const Breakpoint();
+  /// Whether the breakpoint is active under some conditions related to the
+  /// context of the screen.
+  bool isActive(BuildContext context);
+}
diff --git a/packages/adaptive_scaffold/lib/src/slot_layout_config.dart b/packages/adaptive_scaffold/lib/src/slot_layout_config.dart
new file mode 100644
index 00000000..fb7f0d89
--- /dev/null
+++ b/packages/adaptive_scaffold/lib/src/slot_layout_config.dart
@@ -0,0 +1,62 @@
+// Copyright 2014 The Flutter Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'package:flutter/widgets.dart';
+
+/// A Widget that takes a child and a Function that returns an animated Widget
+/// then displays the child with this animation.
+///
+/// Most commonly used in [LayoutSlot] however it would be functional outside of
+/// this Widget as well.
+///
+class SlotLayoutConfig extends StatefulWidget {
+  /// Creates a new [SlotLayoutConfig].
+  ///
+  /// Returns the child widget as is but holds properties to be accessed by other
+  /// classes.
+  const SlotLayoutConfig({
+    required this.builder,
+    this.inAnimation,
+    this.outAnimation,
+    required super.key,
+  });
+
+  /// The child Widget that the parent eventually returns with an animation.
+  final WidgetBuilder? builder;
+
+  /// A function that takes an [AnimationController] and a [Widget] and returns
+  /// a [Widget].
+  ///
+  /// The animation to be played when the child enters.
+  ///
+  /// While it is not enforced, the recommended usage for this property is to
+  /// return a Widget of type [AnimatedWidget] or [ImplicitlyAnimatedWidget].
+  final Widget Function(Widget, Animation<double>)? inAnimation;
+
+  /// A function that takes an [AnimationController] and a [Widget] and returns
+  /// a [Widget].
+  ///
+  /// This animation is ran on the overtaken Widget when this child Widget is
+  /// animated into view, replacing the other Widget.
+  ///
+  /// While it is not enforced, the recommended usage for this property is to
+  /// return a Widget of type [AnimatedWidget] or [ImplicitlyAnimatedWidget].
+  final Widget Function(Widget, Animation<double>)? outAnimation;
+
+  /// An empty [SlotLayoutConfig] to be placed in a slot to indicate it is not
+  /// used.
+  static SlotLayoutConfig empty() {
+    return const SlotLayoutConfig(key: Key(''), builder: null);
+  }
+
+  @override
+  State<SlotLayoutConfig> createState() => _SlotLayoutConfigState();
+}
+
+class _SlotLayoutConfigState extends State<SlotLayoutConfig> {
+  @override
+  Widget build(BuildContext context) {
+    return (widget.builder != null) ? widget.builder!(context) : const SizedBox.shrink();
+  }
+}
diff --git a/packages/adaptive_scaffold/pubspec.yaml b/packages/adaptive_scaffold/pubspec.yaml
index a88e9b3d..33e2fcc1 100644
--- a/packages/adaptive_scaffold/pubspec.yaml
+++ b/packages/adaptive_scaffold/pubspec.yaml
@@ -11,6 +11,7 @@ environment:
   flutter: ">=3.0.0"
 
 dependencies:
+  masonry_grid: ^1.0.0
   flutter:
     sdk: flutter
 
@@ -18,4 +19,4 @@ dev_dependencies:
   flutter_lints: ^2.0.0
   flutter_test:
     sdk: flutter
-    
\ No newline at end of file
+    
diff --git a/packages/adaptive_scaffold/test/adaptive_layout_test.dart b/packages/adaptive_scaffold/test/adaptive_layout_test.dart
index 7a841930..d06cdbcd 100644
--- a/packages/adaptive_scaffold/test/adaptive_layout_test.dart
+++ b/packages/adaptive_scaffold/test/adaptive_layout_test.dart
@@ -3,10 +3,12 @@
 // found in the LICENSE file.
 
 import 'package:adaptive_scaffold/src/adaptive_layout.dart';
+import 'package:adaptive_scaffold/src/adaptive_scaffold.dart';
 import 'package:adaptive_scaffold/src/breakpoints.dart';
 import 'package:adaptive_scaffold/src/slot_layout.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_test/flutter_test.dart';
+import 'package:masonry_grid/masonry_grid.dart';
 
 class TestBreakpoint0 extends Breakpoint {
   @override
@@ -134,6 +136,219 @@ Future<MediaQuery> layout({
   );
 }
 
+Future<MaterialApp> layout2({
+  required double width,
+  required WidgetTester tester,
+  bool orientation = true,
+  TextDirection directionality = TextDirection.ltr,
+  Axis bodyOrientation = Axis.horizontal,
+  double? bodyRatio,
+  bool animations = true,
+}) async {
+  await tester.binding.setSurfaceSize(Size(width, 800));
+  return MaterialApp(
+      home: MediaQuery(
+    data: MediaQueryData(size: Size(width, 800)),
+    child: Directionality(
+      textDirection: directionality,
+      child: AdaptiveLayout(
+        bodyOrientation: bodyOrientation,
+        bodyRatio: bodyRatio,
+        internalAnimations: animations,
+        primaryNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: Key('pnav'),
+                builder: (_) => AdaptiveScaffold.toRailFromDestinations(
+                      destinations: navDestinations,
+                      backgroundColor: Colors.amber,
+                    )),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('pnav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('pnav2'), builder: on),
+          },
+        ),
+        secondaryNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(key: Key('snav'), builder: on),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('snav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('snav2'), builder: on),
+          },
+        ),
+        topNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(key: Key('tnav'), builder: on),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('tnav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('tnav2'), builder: on),
+          },
+        ),
+        bottomNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: Key('bnav'),
+                builder: (_) => AdaptiveScaffold.toBottomNavigationBar(
+                    destinations: navDestinations,
+                    backgroundColor: Colors.amber,
+                    iconSize: 26)),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('bnav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('bnav2'), builder: on),
+          },
+        ),
+        body: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: const Key('b'),
+                builder: (_) => Container(
+                      color: Colors.red,
+                    )),
+            TestBreakpoint400(): SlotLayout.from(
+                key: const Key('b1'),
+                builder: (_) => Container(color: Colors.red)),
+            TestBreakpoint800(): SlotLayout.from(
+                key: const Key('b2'),
+                builder: (_) => Container(color: Colors.red)),
+          },
+        ),
+        secondaryBody: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: const Key('sb'),
+                builder: (_) => Container(color: Colors.blue)),
+            TestBreakpoint400(): SlotLayout.from(
+                key: const Key('sb1'),
+                builder: (_) => Container(color: Colors.blue)),
+            TestBreakpoint800(): SlotLayout.from(
+                key: const Key('sb2'),
+                builder: (_) => Container(color: Colors.blue)),
+          },
+        ),
+      ),
+    ),
+  ));
+}
+
+MaterialApp layout3({
+  required double width,
+  required WidgetTester tester,
+  bool orientation = true,
+  TextDirection directionality = TextDirection.ltr,
+  Axis bodyOrientation = Axis.horizontal,
+  double? bodyRatio,
+  bool animations = true,
+  required BuildContext context,
+}) {
+  return MaterialApp(
+      home: MediaQuery(
+    data: MediaQueryData(size: Size(width, 800)),
+    child: Directionality(
+      textDirection: directionality,
+      child: AdaptiveLayout(
+        bodyOrientation: bodyOrientation,
+        bodyRatio: bodyRatio,
+        internalAnimations: animations,
+        primaryNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: Key('pnav'),
+                builder: (_) => AdaptiveScaffold.toRailFromDestinations(
+                      destinations: navDestinations,
+                      backgroundColor: Colors.amber,
+                    )),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('pnav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('pnav2'), builder: on),
+          },
+        ),
+        secondaryNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(key: Key('snav'), builder: on),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('snav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('snav2'), builder: on),
+          },
+        ),
+        topNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(key: Key('tnav'), builder: on),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('tnav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('tnav2'), builder: on),
+          },
+        ),
+        bottomNavigation: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: Key('bnav'),
+                builder: (_) => AdaptiveScaffold.toBottomNavigationBar(
+                    destinations: navDestinations,
+                    backgroundColor: Colors.amber,
+                    iconSize: 26)),
+            TestBreakpoint400():
+                SlotLayout.from(key: Key('bnav1'), builder: on),
+            TestBreakpoint800():
+                SlotLayout.from(key: Key('bnav2'), builder: on),
+          },
+        ),
+        body: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: const Key('b'),
+                builder: (_) => AdaptiveScaffold.toMaterialGrid(
+                        context: context,
+                        itemColumns: 2,
+                        margin: 2,
+                        thisWidgets: [
+                          Container(
+                            color: Colors.red,
+                            child: const SizedBox(
+                              width: 100,
+                              height: 100,
+                            ),
+                          ),
+                          Container(
+                            color: Colors.red,
+                            child: const SizedBox(
+                              width: 100,
+                              height: 100,
+                            ),
+                          )
+                        ])),
+            TestBreakpoint400(): SlotLayout.from(
+                key: const Key('b1'),
+                builder: (_) => Container(color: Colors.red)),
+            TestBreakpoint800(): SlotLayout.from(
+                key: const Key('b2'),
+                builder: (_) => Container(color: Colors.red)),
+          },
+        ),
+        secondaryBody: SlotLayout(
+          config: <Breakpoint, SlotLayoutConfig>{
+            TestBreakpoint0(): SlotLayout.from(
+                key: const Key('sb'),
+                builder: (_) => Container(color: Colors.blue)),
+            TestBreakpoint400(): SlotLayout.from(
+                key: const Key('sb1'),
+                builder: (_) => Container(color: Colors.blue)),
+            TestBreakpoint800(): SlotLayout.from(
+                key: const Key('sb2'),
+                builder: (_) => Container(color: Colors.blue)),
+          },
+        ),
+      ),
+    ),
+  ));
+}
+
 AnimatedWidget leftOutIn(Widget child, Animation<double> animation) {
   return SlideTransition(
     key: Key('in-${child.key}'),
@@ -183,6 +398,77 @@ MediaQuery slot(double width) {
 }
 
 void main() {
+  testWidgets(
+      'adaptive layout bottom navigation displays with correct properties',
+      (WidgetTester tester) async {
+    await tester.pumpWidget(await layout2(width: 400, tester: tester));
+    final BuildContext context = tester.element(find.byType(MaterialApp));
+    await tester.pumpAndSettle();
+
+    // Bottom Navigation Bar
+    final findKey = find.byKey(const Key('bnav'));
+    SlotLayoutConfig slotLayoutConfig =
+        tester.firstWidget<SlotLayoutConfig>(findKey);
+    WidgetBuilder? widgetBuilder = slotLayoutConfig.builder;
+    Widget Function(BuildContext) widgetFunction =
+        widgetBuilder as Widget Function(BuildContext);
+
+    BottomNavigationBar bottomNavigationBar =
+        ((widgetFunction(context) as Builder).builder(context) as Theme).child
+            as BottomNavigationBar;
+    expect(bottomNavigationBar.backgroundColor, Colors.amber);
+    expect(bottomNavigationBar.iconSize, 26);
+  });
+
+  testWidgets(
+      'adaptive layout navigation rail displays with correct properties',
+      (WidgetTester tester) async {
+    await tester.pumpWidget(await layout2(width: 400, tester: tester));
+    final BuildContext context = tester.element(find.byType(AdaptiveLayout));
+
+    await tester.pumpAndSettle();
+
+    final findKey = find.byKey(const Key('pnav'));
+    SlotLayoutConfig slotLayoutConfig =
+        tester.firstWidget<SlotLayoutConfig>(findKey);
+    WidgetBuilder? widgetBuilder = slotLayoutConfig.builder;
+    Widget Function(BuildContext) widgetFunction =
+        widgetBuilder as Widget Function(BuildContext);
+    SizedBox sizedBox =
+        ((widgetFunction(context) as Builder).builder(context) as Padding).child
+            as SizedBox;
+    expect(sizedBox.width, 72);
+    ;
+  });
+
+  testWidgets('adaptive layout material grid displays with correct properties',
+      (WidgetTester tester) async {
+    await tester.pumpWidget(
+      Builder(
+        builder: ((context) {
+          return layout3(width: 400, tester: tester, context: context);
+        }),
+      ),
+    );
+
+    final BuildContext context = tester.element(find.byType(AdaptiveLayout));
+
+    final findKey = find.byKey(const Key('b'));
+    SlotLayoutConfig slotLayoutConfig =
+        tester.firstWidget<SlotLayoutConfig>(findKey);
+    WidgetBuilder? widgetBuilder = slotLayoutConfig.builder;
+    Widget Function(BuildContext) widgetFunction =
+        widgetBuilder as Widget Function(BuildContext);
+    Padding padding = (((widgetFunction(context) as Builder).builder(context)
+                as CustomScrollView)
+            .slivers[0] as SliverToBoxAdapter)
+        .child as Padding;
+    expect(padding.padding, const EdgeInsets.all(8));
+    MasonryGrid masonryGrid = padding.child as MasonryGrid;
+    expect(masonryGrid.column, 2);
+    expect(masonryGrid.children.length, 2);
+  });
+
   testWidgets(
       'slot layout dislays correct item of config based on screen width',
       (WidgetTester tester) async {
@@ -401,6 +687,21 @@ void main() {
     expect(tester.getBottomRight(sb), const Offset(390, 790));
   }, skip: true);
 }
+
+const List<NavigationDestination> navDestinations = [
+  NavigationDestination(
+      label: 'Inbox', icon: Icon(Icons.inbox, color: Colors.black)),
+  NavigationDestination(
+      label: 'Articles',
+      icon: Icon(Icons.article_outlined, color: Colors.black)),
+  NavigationDestination(
+      label: 'Chat',
+      icon: Icon(Icons.chat_bubble_outline, color: Colors.black)),
+  NavigationDestination(
+      label: 'Video',
+      icon: Icon(Icons.video_call_outlined, color: Colors.black)),
+];
+
 // Some animation related tests are temporarily disabled while waiting for the
 // roll to packages to be fixed.
 // TODO(serenabehera): remove the skip: true from the tests once they properly
