// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v17.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.inapppurchase;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
          "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Pigeon version of billing_client_wrapper.dart's BillingChoiceMode. */
  public enum PlatformBillingChoiceMode {
    /**
     * Billing through google play.
     *
     * <p>Default state.
     */
    PLAY_BILLING_ONLY(0),
    /** Billing through app provided flow. */
    ALTERNATIVE_BILLING_ONLY(1);

    final int index;

    private PlatformBillingChoiceMode(final int index) {
      this.index = index;
    }
  }

  /**
   * Pigeon version of Java BillingResult.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformBillingResult {
    private @NonNull Long responseCode;

    public @NonNull Long getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"responseCode\" is null.");
      }
      this.responseCode = setterArg;
    }

    private @NonNull String debugMessage;

    public @NonNull String getDebugMessage() {
      return debugMessage;
    }

    public void setDebugMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"debugMessage\" is null.");
      }
      this.debugMessage = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformBillingResult() {}

    public static final class Builder {

      private @Nullable Long responseCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setResponseCode(@NonNull Long setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String debugMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setDebugMessage(@NonNull String setterArg) {
        this.debugMessage = setterArg;
        return this;
      }

      public @NonNull PlatformBillingResult build() {
        PlatformBillingResult pigeonReturn = new PlatformBillingResult();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setDebugMessage(debugMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(responseCode);
      toListResult.add(debugMessage);
      return toListResult;
    }

    static @NonNull PlatformBillingResult fromList(@NonNull ArrayList<Object> list) {
      PlatformBillingResult pigeonResult = new PlatformBillingResult();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode(
          (responseCode == null)
              ? null
              : ((responseCode instanceof Integer) ? (Integer) responseCode : (Long) responseCode));
      Object debugMessage = list.get(1);
      pigeonResult.setDebugMessage((String) debugMessage);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java BillingFlowParams.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformBillingFlowParams {
    private @NonNull String product;

    public @NonNull String getProduct() {
      return product;
    }

    public void setProduct(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"product\" is null.");
      }
      this.product = setterArg;
    }

    private @NonNull Long prorationMode;

    public @NonNull Long getProrationMode() {
      return prorationMode;
    }

    public void setProrationMode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"prorationMode\" is null.");
      }
      this.prorationMode = setterArg;
    }

    private @Nullable String offerToken;

    public @Nullable String getOfferToken() {
      return offerToken;
    }

    public void setOfferToken(@Nullable String setterArg) {
      this.offerToken = setterArg;
    }

    private @Nullable String accountId;

    public @Nullable String getAccountId() {
      return accountId;
    }

    public void setAccountId(@Nullable String setterArg) {
      this.accountId = setterArg;
    }

    private @Nullable String obfuscatedProfileId;

    public @Nullable String getObfuscatedProfileId() {
      return obfuscatedProfileId;
    }

    public void setObfuscatedProfileId(@Nullable String setterArg) {
      this.obfuscatedProfileId = setterArg;
    }

    private @Nullable String oldProduct;

    public @Nullable String getOldProduct() {
      return oldProduct;
    }

    public void setOldProduct(@Nullable String setterArg) {
      this.oldProduct = setterArg;
    }

    private @Nullable String purchaseToken;

    public @Nullable String getPurchaseToken() {
      return purchaseToken;
    }

    public void setPurchaseToken(@Nullable String setterArg) {
      this.purchaseToken = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformBillingFlowParams() {}

    public static final class Builder {

      private @Nullable String product;

      @CanIgnoreReturnValue
      public @NonNull Builder setProduct(@NonNull String setterArg) {
        this.product = setterArg;
        return this;
      }

      private @Nullable Long prorationMode;

      @CanIgnoreReturnValue
      public @NonNull Builder setProrationMode(@NonNull Long setterArg) {
        this.prorationMode = setterArg;
        return this;
      }

      private @Nullable String offerToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setOfferToken(@Nullable String setterArg) {
        this.offerToken = setterArg;
        return this;
      }

      private @Nullable String accountId;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccountId(@Nullable String setterArg) {
        this.accountId = setterArg;
        return this;
      }

      private @Nullable String obfuscatedProfileId;

      @CanIgnoreReturnValue
      public @NonNull Builder setObfuscatedProfileId(@Nullable String setterArg) {
        this.obfuscatedProfileId = setterArg;
        return this;
      }

      private @Nullable String oldProduct;

      @CanIgnoreReturnValue
      public @NonNull Builder setOldProduct(@Nullable String setterArg) {
        this.oldProduct = setterArg;
        return this;
      }

      private @Nullable String purchaseToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseToken(@Nullable String setterArg) {
        this.purchaseToken = setterArg;
        return this;
      }

      public @NonNull PlatformBillingFlowParams build() {
        PlatformBillingFlowParams pigeonReturn = new PlatformBillingFlowParams();
        pigeonReturn.setProduct(product);
        pigeonReturn.setProrationMode(prorationMode);
        pigeonReturn.setOfferToken(offerToken);
        pigeonReturn.setAccountId(accountId);
        pigeonReturn.setObfuscatedProfileId(obfuscatedProfileId);
        pigeonReturn.setOldProduct(oldProduct);
        pigeonReturn.setPurchaseToken(purchaseToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(product);
      toListResult.add(prorationMode);
      toListResult.add(offerToken);
      toListResult.add(accountId);
      toListResult.add(obfuscatedProfileId);
      toListResult.add(oldProduct);
      toListResult.add(purchaseToken);
      return toListResult;
    }

    static @NonNull PlatformBillingFlowParams fromList(@NonNull ArrayList<Object> list) {
      PlatformBillingFlowParams pigeonResult = new PlatformBillingFlowParams();
      Object product = list.get(0);
      pigeonResult.setProduct((String) product);
      Object prorationMode = list.get(1);
      pigeonResult.setProrationMode(
          (prorationMode == null)
              ? null
              : ((prorationMode instanceof Integer)
                  ? (Integer) prorationMode
                  : (Long) prorationMode));
      Object offerToken = list.get(2);
      pigeonResult.setOfferToken((String) offerToken);
      Object accountId = list.get(3);
      pigeonResult.setAccountId((String) accountId);
      Object obfuscatedProfileId = list.get(4);
      pigeonResult.setObfuscatedProfileId((String) obfuscatedProfileId);
      Object oldProduct = list.get(5);
      pigeonResult.setOldProduct((String) oldProduct);
      Object purchaseToken = list.get(6);
      pigeonResult.setPurchaseToken((String) purchaseToken);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class InAppPurchaseApiCodec extends StandardMessageCodec {
    public static final InAppPurchaseApiCodec INSTANCE = new InAppPurchaseApiCodec();

    private InAppPurchaseApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PlatformBillingFlowParams.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PlatformBillingResult.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PlatformBillingFlowParams) {
        stream.write(128);
        writeValue(stream, ((PlatformBillingFlowParams) value).toList());
      } else if (value instanceof PlatformBillingResult) {
        stream.write(129);
        writeValue(stream, ((PlatformBillingResult) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface InAppPurchaseApi {
    /** Wraps BillingClient#isReady. */
    @NonNull
    Boolean isReady();
    /** Wraps BillingClient#startConnection(BillingClientStateListener). */
    void startConnection(
        @NonNull Long callbackHandle,
        @NonNull PlatformBillingChoiceMode billingMode,
        @NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#endConnection(BillingClientStateListener). */
    void endConnection();
    /** Wraps BillingClient#launchBillingFlow(Activity, BillingFlowParams). */
    @NonNull
    PlatformBillingResult launchBillingFlow(@NonNull PlatformBillingFlowParams params);
    /**
     * Wraps BillingClient#acknowledgePurchase(AcknowledgePurchaseParams,
     * AcknowledgePurchaseResponseListener).
     */
    void acknowledgePurchase(
        @NonNull String purchaseToken, @NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#consumeAsync(ConsumeParams, ConsumeResponseListener). */
    void consumeAsync(@NonNull String purchaseToken, @NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#isFeatureSupported(String). */
    @NonNull
    Boolean isFeatureSupported(@NonNull String feature);
    /** Wraps BillingClient#isAlternativeBillingOnlyAvailableAsync(). */
    void isAlternativeBillingOnlyAvailableAsync(@NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#showAlternativeBillingOnlyInformationDialog(). */
    void showAlternativeBillingOnlyInformationDialog(@NonNull Result<PlatformBillingResult> result);

    /** The codec used by InAppPurchaseApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return InAppPurchaseApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `InAppPurchaseApi` to handle messages through the `binaryMessenger`.
     */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable InAppPurchaseApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isReady",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isReady();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.startConnection",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number callbackHandleArg = (Number) args.get(0);
                PlatformBillingChoiceMode billingModeArg =
                    PlatformBillingChoiceMode.values()[(int) args.get(1)];
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startConnection(
                    (callbackHandleArg == null) ? null : callbackHandleArg.longValue(),
                    billingModeArg,
                    resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.endConnection",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.endConnection();
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.launchBillingFlow",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformBillingFlowParams paramsArg = (PlatformBillingFlowParams) args.get(0);
                try {
                  PlatformBillingResult output = api.launchBillingFlow(paramsArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.acknowledgePurchase",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String purchaseTokenArg = (String) args.get(0);
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.acknowledgePurchase(purchaseTokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.consumeAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String purchaseTokenArg = (String) args.get(0);
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.consumeAsync(purchaseTokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isFeatureSupported",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String featureArg = (String) args.get(0);
                try {
                  Boolean output = api.isFeatureSupported(featureArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isAlternativeBillingOnlyAvailableAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isAlternativeBillingOnlyAvailableAsync(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.showAlternativeBillingOnlyInformationDialog",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.showAlternativeBillingOnlyInformationDialog(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
