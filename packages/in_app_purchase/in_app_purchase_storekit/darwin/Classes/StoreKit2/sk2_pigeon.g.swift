// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum SK2ProductTypeMessage: Int {
  /// A consumable in-app purchase.
  case consumable = 0
  /// A non-consumable in-app purchase.
  case nonConsumable = 1
  /// A non-renewing subscription.
  case nonRenewable = 2
  /// An auto-renewable subscription.
  case autoRenewable = 3
}

enum SK2SubscriptionOfferTypeMessage: Int {
  case introductory = 0
  case promotional = 1
}

enum SK2SubscriptionOfferPaymentModeMessage: Int {
  case payAsYouGo = 0
  case payUpFront = 1
  case freeTrial = 2
}

enum SK2SubscriptionPeriodUnitMessage: Int {
  case day = 0
  case week = 1
  case month = 2
  case year = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct SK2SubscriptionOfferMessage {
  var id: String? = nil
  var price: Double
  var type: SK2SubscriptionOfferTypeMessage
  var period: SK2SubscriptionPeriodMessage
  var periodCount: Int64
  var paymentMode: SK2SubscriptionOfferPaymentModeMessage

  static func fromList(_ list: [Any?]) -> SK2SubscriptionOfferMessage? {
    let id: String? = nilOrValue(list[0])
    let price = list[1] as! Double
    let type = SK2SubscriptionOfferTypeMessage(rawValue: list[2] as! Int)!
    let period = SK2SubscriptionPeriodMessage.fromList(list[3] as! [Any?])!
    let periodCount = list[4] is Int64 ? list[4] as! Int64 : Int64(list[4] as! Int32)
    let paymentMode = SK2SubscriptionOfferPaymentModeMessage(rawValue: list[5] as! Int)!

    return SK2SubscriptionOfferMessage(
      id: id,
      price: price,
      type: type,
      period: period,
      periodCount: periodCount,
      paymentMode: paymentMode
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      price,
      type.rawValue,
      period.toList(),
      periodCount,
      paymentMode.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SK2SubscriptionPeriodMessage {
  /// The number of units that the period represents.
  var value: Int64
  /// The unit of time that this period represents.
  var unit: SK2SubscriptionPeriodUnitMessage

  static func fromList(_ list: [Any?]) -> SK2SubscriptionPeriodMessage? {
    let value = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let unit = SK2SubscriptionPeriodUnitMessage(rawValue: list[1] as! Int)!

    return SK2SubscriptionPeriodMessage(
      value: value,
      unit: unit
    )
  }
  func toList() -> [Any?] {
    return [
      value,
      unit.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SK2SubscriptionInfoMessage {
  /// An array of all the promotional offers configured for this subscription.
  /// This should be List<SK2SubscriptionOfferMessage> but pigeon doesnt support
  /// null-safe generics. https://github.com/flutter/flutter/issues/97848
  var promotionalOffers: [SK2SubscriptionOfferMessage?]
  /// The group identifier for this subscription.
  var subscriptionGroupID: String
  /// The duration that this subscription lasts before auto-renewing.
  var subscriptionPeriod: SK2SubscriptionPeriodMessage

  static func fromList(_ list: [Any?]) -> SK2SubscriptionInfoMessage? {
    let promotionalOffers = list[0] as! [SK2SubscriptionOfferMessage?]
    let subscriptionGroupID = list[1] as! String
    let subscriptionPeriod = SK2SubscriptionPeriodMessage.fromList(list[2] as! [Any?])!

    return SK2SubscriptionInfoMessage(
      promotionalOffers: promotionalOffers,
      subscriptionGroupID: subscriptionGroupID,
      subscriptionPeriod: subscriptionPeriod
    )
  }
  func toList() -> [Any?] {
    return [
      promotionalOffers,
      subscriptionGroupID,
      subscriptionPeriod.toList(),
    ]
  }
}

/// A Pigeon message class representing a Product
/// https://developer.apple.com/documentation/storekit/product
///
/// Generated class from Pigeon that represents data sent in messages.
struct SK2ProductMessage {
  /// The unique product identifier.
  var id: String
  /// The localized display name of the product, if it exists.
  var displayName: String
  /// The localized description of the product.
  var description: String
  /// The localized string representation of the product price, suitable for display.
  var price: Double
  /// The localized price of the product as a string.
  var displayPrice: String
  /// The types of in-app purchases.
  var type: SK2ProductTypeMessage
  /// The subscription information for an auto-renewable subscription.
  var subscription: SK2SubscriptionInfoMessage? = nil
  /// The currency and locale information for this product
  var priceLocale: SK2PriceLocaleMessage

  static func fromList(_ list: [Any?]) -> SK2ProductMessage? {
    let id = list[0] as! String
    let displayName = list[1] as! String
    let description = list[2] as! String
    let price = list[3] as! Double
    let displayPrice = list[4] as! String
    let type = SK2ProductTypeMessage(rawValue: list[5] as! Int)!
    var subscription: SK2SubscriptionInfoMessage? = nil
    if let subscriptionList: [Any?] = nilOrValue(list[6]) {
      subscription = SK2SubscriptionInfoMessage.fromList(subscriptionList)
    }
    let priceLocale = SK2PriceLocaleMessage.fromList(list[7] as! [Any?])!

    return SK2ProductMessage(
      id: id,
      displayName: displayName,
      description: description,
      price: price,
      displayPrice: displayPrice,
      type: type,
      subscription: subscription,
      priceLocale: priceLocale
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      displayName,
      description,
      price,
      displayPrice,
      type.rawValue,
      subscription?.toList(),
      priceLocale.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SK2PriceLocaleMessage {
  var currencyCode: String
  var currencySymbol: String

  static func fromList(_ list: [Any?]) -> SK2PriceLocaleMessage? {
    let currencyCode = list[0] as! String
    let currencySymbol = list[1] as! String

    return SK2PriceLocaleMessage(
      currencyCode: currencyCode,
      currencySymbol: currencySymbol
    )
  }
  func toList() -> [Any?] {
    return [
      currencyCode,
      currencySymbol,
    ]
  }
}

private class InAppPurchase2APICodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return SK2PriceLocaleMessage.fromList(self.readValue() as! [Any?])
    case 129:
      return SK2ProductMessage.fromList(self.readValue() as! [Any?])
    case 130:
      return SK2SubscriptionInfoMessage.fromList(self.readValue() as! [Any?])
    case 131:
      return SK2SubscriptionOfferMessage.fromList(self.readValue() as! [Any?])
    case 132:
      return SK2SubscriptionPeriodMessage.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class InAppPurchase2APICodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SK2PriceLocaleMessage {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? SK2ProductMessage {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? SK2SubscriptionInfoMessage {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? SK2SubscriptionOfferMessage {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? SK2SubscriptionPeriodMessage {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class InAppPurchase2APICodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return InAppPurchase2APICodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return InAppPurchase2APICodecWriter(data: data)
  }
}

class InAppPurchase2APICodec: FlutterStandardMessageCodec {
  static let shared = InAppPurchase2APICodec(readerWriter: InAppPurchase2APICodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol InAppPurchase2API {
  func canMakePayments() throws -> Bool
  func products(
    identifiers: [String], completion: @escaping (Result<[SK2ProductMessage], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class InAppPurchase2APISetup {
  /// The codec used by InAppPurchase2API.
  static var codec: FlutterStandardMessageCodec { InAppPurchase2APICodec.shared }
  /// Sets up an instance of `InAppPurchase2API` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: InAppPurchase2API?) {
    let canMakePaymentsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchase2API.canMakePayments",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canMakePaymentsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.canMakePayments()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      canMakePaymentsChannel.setMessageHandler(nil)
    }
    let productsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchase2API.products",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      productsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifiersArg = args[0] as! [String]
        api.products(identifiers: identifiersArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      productsChannel.setMessageHandler(nil)
    }
  }
}
