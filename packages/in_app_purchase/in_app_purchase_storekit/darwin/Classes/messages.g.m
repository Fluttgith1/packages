// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation SKPaymentTransactionStateMessageBox
- (instancetype)initWithValue:(SKPaymentTransactionStateMessage)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation SKProductDiscountTypeMessageBox
- (instancetype)initWithValue:(SKProductDiscountTypeMessage)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation SKProductDiscountPaymentModeMessageBox
- (instancetype)initWithValue:(SKProductDiscountPaymentModeMessage)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation SKSubscriptionPeriodUnitMessageBox
- (instancetype)initWithValue:(SKSubscriptionPeriodUnitMessage)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface SKPaymentTransactionMessage ()
+ (SKPaymentTransactionMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKPaymentTransactionMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKPaymentMessage ()
+ (SKPaymentMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKPaymentMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKErrorMessage ()
+ (SKErrorMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKErrorMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKPaymentDiscountMessage ()
+ (SKPaymentDiscountMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKPaymentDiscountMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKStorefrontMessage ()
+ (SKStorefrontMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKStorefrontMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKProductsResponseMessage ()
+ (SKProductsResponseMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKProductsResponseMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKProductMessage ()
+ (SKProductMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKProductMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKPriceLocaleMessage ()
+ (SKPriceLocaleMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKPriceLocaleMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKProductDiscountMessage ()
+ (SKProductDiscountMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKProductDiscountMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SKProductSubscriptionPeriodMessage ()
+ (SKProductSubscriptionPeriodMessage *)fromList:(NSArray<id> *)list;
+ (nullable SKProductSubscriptionPeriodMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation SKPaymentTransactionMessage
+ (instancetype)makeWithPayment:(SKPaymentMessage *)payment
               transactionState:(SKPaymentTransactionStateMessage)transactionState
            originalTransaction:(nullable SKPaymentTransactionMessage *)originalTransaction
           transactionTimeStamp:(nullable NSNumber *)transactionTimeStamp
          transactionIdentifier:(nullable NSString *)transactionIdentifier
                          error:(nullable SKErrorMessage *)error {
  SKPaymentTransactionMessage *pigeonResult = [[SKPaymentTransactionMessage alloc] init];
  pigeonResult.payment = payment;
  pigeonResult.transactionState = transactionState;
  pigeonResult.originalTransaction = originalTransaction;
  pigeonResult.transactionTimeStamp = transactionTimeStamp;
  pigeonResult.transactionIdentifier = transactionIdentifier;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (SKPaymentTransactionMessage *)fromList:(NSArray<id> *)list {
  SKPaymentTransactionMessage *pigeonResult = [[SKPaymentTransactionMessage alloc] init];
  pigeonResult.payment = GetNullableObjectAtIndex(list, 0);
  SKPaymentTransactionStateMessageBox *boxedSKPaymentTransactionStateMessage =
      GetNullableObjectAtIndex(list, 1);
  pigeonResult.transactionState = boxedSKPaymentTransactionStateMessage.value;
  pigeonResult.originalTransaction = GetNullableObjectAtIndex(list, 2);
  pigeonResult.transactionTimeStamp = GetNullableObjectAtIndex(list, 3);
  pigeonResult.transactionIdentifier = GetNullableObjectAtIndex(list, 4);
  pigeonResult.error = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable SKPaymentTransactionMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKPaymentTransactionMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.payment ?: [NSNull null],
    [[SKPaymentTransactionStateMessageBox alloc] initWithValue:self.transactionState],
    self.originalTransaction ?: [NSNull null],
    self.transactionTimeStamp ?: [NSNull null],
    self.transactionIdentifier ?: [NSNull null],
    self.error ?: [NSNull null],
  ];
}
@end

@implementation SKPaymentMessage
+ (instancetype)makeWithProductIdentifier:(NSString *)productIdentifier
                      applicationUsername:(nullable NSString *)applicationUsername
                              requestData:(nullable NSString *)requestData
                                 quantity:(NSInteger)quantity
               simulatesAskToBuyInSandbox:(BOOL)simulatesAskToBuyInSandbox
                          paymentDiscount:(nullable SKPaymentDiscountMessage *)paymentDiscount {
  SKPaymentMessage *pigeonResult = [[SKPaymentMessage alloc] init];
  pigeonResult.productIdentifier = productIdentifier;
  pigeonResult.applicationUsername = applicationUsername;
  pigeonResult.requestData = requestData;
  pigeonResult.quantity = quantity;
  pigeonResult.simulatesAskToBuyInSandbox = simulatesAskToBuyInSandbox;
  pigeonResult.paymentDiscount = paymentDiscount;
  return pigeonResult;
}
+ (SKPaymentMessage *)fromList:(NSArray<id> *)list {
  SKPaymentMessage *pigeonResult = [[SKPaymentMessage alloc] init];
  pigeonResult.productIdentifier = GetNullableObjectAtIndex(list, 0);
  pigeonResult.applicationUsername = GetNullableObjectAtIndex(list, 1);
  pigeonResult.requestData = GetNullableObjectAtIndex(list, 2);
  pigeonResult.quantity = [GetNullableObjectAtIndex(list, 3) integerValue];
  pigeonResult.simulatesAskToBuyInSandbox = [GetNullableObjectAtIndex(list, 4) boolValue];
  pigeonResult.paymentDiscount = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable SKPaymentMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKPaymentMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.productIdentifier ?: [NSNull null],
    self.applicationUsername ?: [NSNull null],
    self.requestData ?: [NSNull null],
    @(self.quantity),
    @(self.simulatesAskToBuyInSandbox),
    self.paymentDiscount ?: [NSNull null],
  ];
}
@end

@implementation SKErrorMessage
+ (instancetype)makeWithCode:(NSInteger)code
                      domain:(NSString *)domain
                    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  SKErrorMessage *pigeonResult = [[SKErrorMessage alloc] init];
  pigeonResult.code = code;
  pigeonResult.domain = domain;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (SKErrorMessage *)fromList:(NSArray<id> *)list {
  SKErrorMessage *pigeonResult = [[SKErrorMessage alloc] init];
  pigeonResult.code = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.domain = GetNullableObjectAtIndex(list, 1);
  pigeonResult.userInfo = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable SKErrorMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKErrorMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.code),
    self.domain ?: [NSNull null],
    self.userInfo ?: [NSNull null],
  ];
}
@end

@implementation SKPaymentDiscountMessage
+ (instancetype)makeWithIdentifier:(NSString *)identifier
                     keyIdentifier:(NSString *)keyIdentifier
                             nonce:(NSString *)nonce
                         signature:(NSString *)signature
                         timestamp:(NSInteger)timestamp {
  SKPaymentDiscountMessage *pigeonResult = [[SKPaymentDiscountMessage alloc] init];
  pigeonResult.identifier = identifier;
  pigeonResult.keyIdentifier = keyIdentifier;
  pigeonResult.nonce = nonce;
  pigeonResult.signature = signature;
  pigeonResult.timestamp = timestamp;
  return pigeonResult;
}
+ (SKPaymentDiscountMessage *)fromList:(NSArray<id> *)list {
  SKPaymentDiscountMessage *pigeonResult = [[SKPaymentDiscountMessage alloc] init];
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 0);
  pigeonResult.keyIdentifier = GetNullableObjectAtIndex(list, 1);
  pigeonResult.nonce = GetNullableObjectAtIndex(list, 2);
  pigeonResult.signature = GetNullableObjectAtIndex(list, 3);
  pigeonResult.timestamp = [GetNullableObjectAtIndex(list, 4) integerValue];
  return pigeonResult;
}
+ (nullable SKPaymentDiscountMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKPaymentDiscountMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.identifier ?: [NSNull null],
    self.keyIdentifier ?: [NSNull null],
    self.nonce ?: [NSNull null],
    self.signature ?: [NSNull null],
    @(self.timestamp),
  ];
}
@end

@implementation SKStorefrontMessage
+ (instancetype)makeWithCountryCode:(NSString *)countryCode identifier:(NSString *)identifier {
  SKStorefrontMessage *pigeonResult = [[SKStorefrontMessage alloc] init];
  pigeonResult.countryCode = countryCode;
  pigeonResult.identifier = identifier;
  return pigeonResult;
}
+ (SKStorefrontMessage *)fromList:(NSArray<id> *)list {
  SKStorefrontMessage *pigeonResult = [[SKStorefrontMessage alloc] init];
  pigeonResult.countryCode = GetNullableObjectAtIndex(list, 0);
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SKStorefrontMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKStorefrontMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.countryCode ?: [NSNull null],
    self.identifier ?: [NSNull null],
  ];
}
@end

@implementation SKProductsResponseMessage
+ (instancetype)makeWithProducts:(nullable NSArray<SKProductMessage *> *)products
       invalidProductIdentifiers:(nullable NSArray<NSString *> *)invalidProductIdentifiers {
  SKProductsResponseMessage *pigeonResult = [[SKProductsResponseMessage alloc] init];
  pigeonResult.products = products;
  pigeonResult.invalidProductIdentifiers = invalidProductIdentifiers;
  return pigeonResult;
}
+ (SKProductsResponseMessage *)fromList:(NSArray<id> *)list {
  SKProductsResponseMessage *pigeonResult = [[SKProductsResponseMessage alloc] init];
  pigeonResult.products = GetNullableObjectAtIndex(list, 0);
  pigeonResult.invalidProductIdentifiers = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SKProductsResponseMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKProductsResponseMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.products ?: [NSNull null],
    self.invalidProductIdentifiers ?: [NSNull null],
  ];
}
@end

@implementation SKProductMessage
+ (instancetype)
      makeWithProductIdentifier:(NSString *)productIdentifier
                 localizedTitle:(NSString *)localizedTitle
           localizedDescription:(nullable NSString *)localizedDescription
                    priceLocale:(SKPriceLocaleMessage *)priceLocale
    subscriptionGroupIdentifier:(nullable NSString *)subscriptionGroupIdentifier
                          price:(NSString *)price
             subscriptionPeriod:(nullable SKProductSubscriptionPeriodMessage *)subscriptionPeriod
              introductoryPrice:(nullable SKProductDiscountMessage *)introductoryPrice
                      discounts:(nullable NSArray<SKProductDiscountMessage *> *)discounts {
  SKProductMessage *pigeonResult = [[SKProductMessage alloc] init];
  pigeonResult.productIdentifier = productIdentifier;
  pigeonResult.localizedTitle = localizedTitle;
  pigeonResult.localizedDescription = localizedDescription;
  pigeonResult.priceLocale = priceLocale;
  pigeonResult.subscriptionGroupIdentifier = subscriptionGroupIdentifier;
  pigeonResult.price = price;
  pigeonResult.subscriptionPeriod = subscriptionPeriod;
  pigeonResult.introductoryPrice = introductoryPrice;
  pigeonResult.discounts = discounts;
  return pigeonResult;
}
+ (SKProductMessage *)fromList:(NSArray<id> *)list {
  SKProductMessage *pigeonResult = [[SKProductMessage alloc] init];
  pigeonResult.productIdentifier = GetNullableObjectAtIndex(list, 0);
  pigeonResult.localizedTitle = GetNullableObjectAtIndex(list, 1);
  pigeonResult.localizedDescription = GetNullableObjectAtIndex(list, 2);
  pigeonResult.priceLocale = GetNullableObjectAtIndex(list, 3);
  pigeonResult.subscriptionGroupIdentifier = GetNullableObjectAtIndex(list, 4);
  pigeonResult.price = GetNullableObjectAtIndex(list, 5);
  pigeonResult.subscriptionPeriod = GetNullableObjectAtIndex(list, 6);
  pigeonResult.introductoryPrice = GetNullableObjectAtIndex(list, 7);
  pigeonResult.discounts = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable SKProductMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKProductMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.productIdentifier ?: [NSNull null],
    self.localizedTitle ?: [NSNull null],
    self.localizedDescription ?: [NSNull null],
    self.priceLocale ?: [NSNull null],
    self.subscriptionGroupIdentifier ?: [NSNull null],
    self.price ?: [NSNull null],
    self.subscriptionPeriod ?: [NSNull null],
    self.introductoryPrice ?: [NSNull null],
    self.discounts ?: [NSNull null],
  ];
}
@end

@implementation SKPriceLocaleMessage
+ (instancetype)makeWithCurrencySymbol:(NSString *)currencySymbol
                          currencyCode:(NSString *)currencyCode
                           countryCode:(NSString *)countryCode {
  SKPriceLocaleMessage *pigeonResult = [[SKPriceLocaleMessage alloc] init];
  pigeonResult.currencySymbol = currencySymbol;
  pigeonResult.currencyCode = currencyCode;
  pigeonResult.countryCode = countryCode;
  return pigeonResult;
}
+ (SKPriceLocaleMessage *)fromList:(NSArray<id> *)list {
  SKPriceLocaleMessage *pigeonResult = [[SKPriceLocaleMessage alloc] init];
  pigeonResult.currencySymbol = GetNullableObjectAtIndex(list, 0);
  pigeonResult.currencyCode = GetNullableObjectAtIndex(list, 1);
  pigeonResult.countryCode = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable SKPriceLocaleMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKPriceLocaleMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.currencySymbol ?: [NSNull null],
    self.currencyCode ?: [NSNull null],
    self.countryCode ?: [NSNull null],
  ];
}
@end

@implementation SKProductDiscountMessage
+ (instancetype)makeWithPrice:(NSString *)price
                  priceLocale:(SKPriceLocaleMessage *)priceLocale
              numberOfPeriods:(NSInteger)numberOfPeriods
                  paymentMode:(SKProductDiscountPaymentModeMessage)paymentMode
           subscriptionPeriod:(SKProductSubscriptionPeriodMessage *)subscriptionPeriod
                   identifier:(nullable NSString *)identifier
                         type:(SKProductDiscountTypeMessage)type {
  SKProductDiscountMessage *pigeonResult = [[SKProductDiscountMessage alloc] init];
  pigeonResult.price = price;
  pigeonResult.priceLocale = priceLocale;
  pigeonResult.numberOfPeriods = numberOfPeriods;
  pigeonResult.paymentMode = paymentMode;
  pigeonResult.subscriptionPeriod = subscriptionPeriod;
  pigeonResult.identifier = identifier;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (SKProductDiscountMessage *)fromList:(NSArray<id> *)list {
  SKProductDiscountMessage *pigeonResult = [[SKProductDiscountMessage alloc] init];
  pigeonResult.price = GetNullableObjectAtIndex(list, 0);
  pigeonResult.priceLocale = GetNullableObjectAtIndex(list, 1);
  pigeonResult.numberOfPeriods = [GetNullableObjectAtIndex(list, 2) integerValue];
  SKProductDiscountPaymentModeMessageBox *boxedSKProductDiscountPaymentModeMessage =
      GetNullableObjectAtIndex(list, 3);
  pigeonResult.paymentMode = boxedSKProductDiscountPaymentModeMessage.value;
  pigeonResult.subscriptionPeriod = GetNullableObjectAtIndex(list, 4);
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 5);
  SKProductDiscountTypeMessageBox *boxedSKProductDiscountTypeMessage =
      GetNullableObjectAtIndex(list, 6);
  pigeonResult.type = boxedSKProductDiscountTypeMessage.value;
  return pigeonResult;
}
+ (nullable SKProductDiscountMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKProductDiscountMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.price ?: [NSNull null],
    self.priceLocale ?: [NSNull null],
    @(self.numberOfPeriods),
    [[SKProductDiscountPaymentModeMessageBox alloc] initWithValue:self.paymentMode],
    self.subscriptionPeriod ?: [NSNull null],
    self.identifier ?: [NSNull null],
    [[SKProductDiscountTypeMessageBox alloc] initWithValue:self.type],
  ];
}
@end

@implementation SKProductSubscriptionPeriodMessage
+ (instancetype)makeWithNumberOfUnits:(NSInteger)numberOfUnits
                                 unit:(SKSubscriptionPeriodUnitMessage)unit {
  SKProductSubscriptionPeriodMessage *pigeonResult =
      [[SKProductSubscriptionPeriodMessage alloc] init];
  pigeonResult.numberOfUnits = numberOfUnits;
  pigeonResult.unit = unit;
  return pigeonResult;
}
+ (SKProductSubscriptionPeriodMessage *)fromList:(NSArray<id> *)list {
  SKProductSubscriptionPeriodMessage *pigeonResult =
      [[SKProductSubscriptionPeriodMessage alloc] init];
  pigeonResult.numberOfUnits = [GetNullableObjectAtIndex(list, 0) integerValue];
  SKSubscriptionPeriodUnitMessageBox *boxedSKSubscriptionPeriodUnitMessage =
      GetNullableObjectAtIndex(list, 1);
  pigeonResult.unit = boxedSKSubscriptionPeriodUnitMessage.value;
  return pigeonResult;
}
+ (nullable SKProductSubscriptionPeriodMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SKProductSubscriptionPeriodMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.numberOfUnits),
    [[SKSubscriptionPeriodUnitMessageBox alloc] initWithValue:self.unit],
  ];
}
@end

@interface nullMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation nullMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil
                                 : [[SKPaymentTransactionStateMessageBox alloc]
                                       initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil
                                 : [[SKProductDiscountTypeMessageBox alloc]
                                       initWithValue:[enumAsNumber integerValue]];
    }
    case 131: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil
                                 : [[SKProductDiscountPaymentModeMessageBox alloc]
                                       initWithValue:[enumAsNumber integerValue]];
    }
    case 132: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil
                                 : [[SKSubscriptionPeriodUnitMessageBox alloc]
                                       initWithValue:[enumAsNumber integerValue]];
    }
    case 133:
      return [SKPaymentTransactionMessage fromList:[self readValue]];
    case 134:
      return [SKPaymentMessage fromList:[self readValue]];
    case 135:
      return [SKErrorMessage fromList:[self readValue]];
    case 136:
      return [SKPaymentDiscountMessage fromList:[self readValue]];
    case 137:
      return [SKStorefrontMessage fromList:[self readValue]];
    case 138:
      return [SKProductsResponseMessage fromList:[self readValue]];
    case 139:
      return [SKProductMessage fromList:[self readValue]];
    case 140:
      return [SKPriceLocaleMessage fromList:[self readValue]];
    case 141:
      return [SKProductDiscountMessage fromList:[self readValue]];
    case 142:
      return [SKProductSubscriptionPeriodMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SKPaymentTransactionStateMessageBox class]]) {
    SKPaymentTransactionStateMessageBox *box = (SKPaymentTransactionStateMessageBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[SKProductDiscountTypeMessageBox class]]) {
    SKProductDiscountTypeMessageBox *box = (SKProductDiscountTypeMessageBox *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[SKProductDiscountPaymentModeMessageBox class]]) {
    SKProductDiscountPaymentModeMessageBox *box = (SKProductDiscountPaymentModeMessageBox *)value;
    [self writeByte:131];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[SKSubscriptionPeriodUnitMessageBox class]]) {
    SKSubscriptionPeriodUnitMessageBox *box = (SKSubscriptionPeriodUnitMessageBox *)value;
    [self writeByte:132];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[SKPaymentTransactionMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKPaymentMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKErrorMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKPaymentDiscountMessage class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKStorefrontMessage class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKProductsResponseMessage class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKProductMessage class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKPriceLocaleMessage class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKProductDiscountMessage class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKProductSubscriptionPeriodMessage class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullMessagesPigeonCodecReaderWriter *readerWriter =
        [[nullMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpInAppPurchaseAPI(id<FlutterBinaryMessenger> binaryMessenger,
                           NSObject<InAppPurchaseAPI> *api) {
  SetUpInAppPurchaseAPIWithSuffix(binaryMessenger, api, @"");
}

void SetUpInAppPurchaseAPIWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                     NSObject<InAppPurchaseAPI> *api,
                                     NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  /// Returns if the current device is able to make payments
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.canMakePayments",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(canMakePaymentsWithError:)],
          @"InAppPurchaseAPI api (%@) doesn't respond to @selector(canMakePaymentsWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api canMakePaymentsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.transactions",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(transactionsWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to @selector(transactionsWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<SKPaymentTransactionMessage *> *output = [api transactionsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.storefront",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(storefrontWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to @selector(storefrontWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        SKStorefrontMessage *output = [api storefrontWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.addPayment",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(addPaymentPaymentMap:error:)],
          @"InAppPurchaseAPI api (%@) doesn't respond to @selector(addPaymentPaymentMap:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_paymentMap = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addPaymentPaymentMap:arg_paymentMap error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.startProductRequest",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startProductRequestProductIdentifiers:
                                                                             completion:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(startProductRequestProductIdentifiers:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<NSString *> *arg_productIdentifiers = GetNullableObjectAtIndex(args, 0);
        [api startProductRequestProductIdentifiers:arg_productIdentifiers
                                        completion:^(SKProductsResponseMessage *_Nullable output,
                                                     FlutterError *_Nullable error) {
                                          callback(wrapResult(output, error));
                                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.finishTransaction",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(finishTransactionFinishMap:error:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(finishTransactionFinishMap:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_finishMap = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api finishTransactionFinishMap:arg_finishMap error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.restoreTransactions",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(restoreTransactionsApplicationUserName:error:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(restoreTransactionsApplicationUserName:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_applicationUserName = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api restoreTransactionsApplicationUserName:arg_applicationUserName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.presentCodeRedemptionSheet",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(presentCodeRedemptionSheetWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(presentCodeRedemptionSheetWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api presentCodeRedemptionSheetWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.retrieveReceiptData",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(retrieveReceiptDataWithError:)],
          @"InAppPurchaseAPI api (%@) doesn't respond to @selector(retrieveReceiptDataWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api retrieveReceiptDataWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.refreshReceipt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(refreshReceiptReceiptProperties:completion:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(refreshReceiptReceiptProperties:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_receiptProperties = GetNullableObjectAtIndex(args, 0);
        [api refreshReceiptReceiptProperties:arg_receiptProperties
                                  completion:^(FlutterError *_Nullable error) {
                                    callback(wrapResult(nil, error));
                                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.startObservingPaymentQueue",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startObservingPaymentQueueWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(startObservingPaymentQueueWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startObservingPaymentQueueWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.stopObservingPaymentQueue",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopObservingPaymentQueueWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(stopObservingPaymentQueueWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopObservingPaymentQueueWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.registerPaymentQueueDelegate",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerPaymentQueueDelegateWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(registerPaymentQueueDelegateWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api registerPaymentQueueDelegateWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.removePaymentQueueDelegate",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removePaymentQueueDelegateWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(removePaymentQueueDelegateWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api removePaymentQueueDelegateWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.in_app_purchase_storekit."
                                                   @"InAppPurchaseAPI.showPriceConsentIfNeeded",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showPriceConsentIfNeededWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to "
                @"@selector(showPriceConsentIfNeededWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showPriceConsentIfNeededWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
