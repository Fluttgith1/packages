// Autogenerated from Pigeon (v18.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.packages.interactive_media_ads

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(exception.code, exception.message, exception.details)
  } else {
    return listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception))
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError(
      "channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * <p>Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * <p>When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * <p>Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener` is made with the instance's identifier. However, if the strong reference
 * is removed and then the identifier is retrieved with the intention to pass the identifier to Dart
 * (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance is
 * recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate", "unused")
class PigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager. */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     *
     * @param finalizationListener the listener for garbage collected weak references.
     * @return a new `PigeonInstanceManager`.
     */
    fun create(finalizationListener: PigeonFinalizationListener): PigeonInstanceManager {
      return PigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and its associated strongly referenced instance, if present, from the
   * manager.
   *
   * @param identifier the identifier paired to an instance.
   * @param <T> the expected return type.
   * @return the removed instance if the manager contains the given identifier, otherwise `null` if
   *   the manager doesn't contain the value. </T>
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance.
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `PigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   *
   * @param instance an instance that may be stored in the manager.
   * @return the identifier associated with `instance` if the manager contains the value, otherwise
   *   `null` if the manager doesn't contain the value.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This allows
   * two objects that are equivalent (e.g. the `equals` method returns true and their hashcodes are
   * equal) to both be added.
   *
   * @param instance the instance to be stored.
   * @param identifier the identifier to be paired with instance. This value must be >= 0 and
   *   unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new instance that was instantiated from the host platform.
   *
   * @param instance the instance to be stored. This must be unique to all other added instances.
   * @return the unique identifier (>= 0) stored with instance.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) {
      "Instance of ${instance.javaClass} has already been added."
    }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /**
   * Retrieves the instance associated with identifier.
   *
   * @param identifier the identifier associated with an instance.
   * @param <T> the expected return type.
   * @return the instance associated with `identifier` if the manager contains the value, otherwise
   *   `null` if the manager doesn't contain the value. </T>
   */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /**
   * Returns whether this manager contains the given `instance`.
   *
   * @param instance the instance whose presence in this manager is to be tested.
   * @return whether this manager contains the given `instance`.
   */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stop the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } !=
        null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
          tag,
          "The manager was used after calls to the PigeonFinalizationListener has been stopped.")
    }
  }
}

/** Generated API for managing the Dart and native `PigeonInstanceManager`s. */
private class PigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PigeonInstanceManagerApi. */
    private val codec: MessageCodec<Any?> by lazy { StandardMessageCodec() }

    /**
     * Sets up an instance of `PigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        instanceManager: PigeonInstanceManager?
    ) {
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val identifier = message as Number
            val wrapped: List<Any?> =
                try {
                  instanceManager.remove<Any?>(identifier.toLong())
                  listOf<Any?>(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.clear",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> =
                try {
                  instanceManager.clear()
                  listOf<Any?>(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifier: Long, callback: (Result<Unit>) -> Unit) {
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(identifier) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/**
 * Provides implementations for each ProxyApi implementation and provides access to resources needed
 * by any implementation.
 */
abstract class PigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  val instanceManager: PigeonInstanceManager
  private var _codec: StandardMessageCodec? = null
  val codec: StandardMessageCodec
    get() {
      if (_codec == null) {
        _codec = PigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = PigeonInstanceManagerApi(binaryMessenger)
    instanceManager =
        PigeonInstanceManager.create(
            object : PigeonInstanceManager.PigeonFinalizationListener {
              override fun onFinalize(identifier: Long) {
                api.removeStrongReference(identifier) {
                  if (it.isFailure) {
                    Log.e(
                        "PigeonProxyApiRegistrar",
                        "Failed to remove Dart strong reference with identifier: $identifier")
                  }
                }
              }
            })
  }

  /**
   * An implementation of [PigeonApiBaseDisplayContainer] used to add a new Dart instance of
   * `BaseDisplayContainer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer

  /**
   * An implementation of [PigeonApiAdDisplayContainer] used to add a new Dart instance of
   * `AdDisplayContainer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdDisplayContainer(): PigeonApiAdDisplayContainer

  /**
   * An implementation of [PigeonApiAdsLoader] used to add a new Dart instance of `AdsLoader` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoader(): PigeonApiAdsLoader

  /**
   * An implementation of [PigeonApiAdsRequest] used to add a new Dart instance of `AdsRequest` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsRequest(): PigeonApiAdsRequest

  /**
   * An implementation of [PigeonApiAdsManager] used to add a new Dart instance of `AdsManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManager(): PigeonApiAdsManager

  /**
   * An implementation of [PigeonApiImaSdkFactory] used to add a new Dart instance of
   * `ImaSdkFactory` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImaSdkFactory(): PigeonApiImaSdkFactory

  /**
   * An implementation of [PigeonApiVideoAdPlayer] used to add a new Dart instance of
   * `VideoAdPlayer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayer(): PigeonApiVideoAdPlayer

  /**
   * An implementation of [PigeonApiVideoProgressUpdate] used to add a new Dart instance of
   * `VideoProgressUpdate` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoProgressUpdate(): PigeonApiVideoProgressUpdate

  /**
   * An implementation of [PigeonApiVideoAdPlayerCallback] used to add a new Dart instance of
   * `VideoAdPlayerCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayerCallback(): PigeonApiVideoAdPlayerCallback

  /**
   * An implementation of [PigeonApiAdMediaInfo] used to add a new Dart instance of `AdMediaInfo` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdMediaInfo(): PigeonApiAdMediaInfo

  /**
   * An implementation of [PigeonApiAdPodInfo] used to add a new Dart instance of `AdPodInfo` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdPodInfo(): PigeonApiAdPodInfo

  /**
   * An implementation of [PigeonApiFrameLayout] used to add a new Dart instance of `FrameLayout` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFrameLayout(): PigeonApiFrameLayout

  /**
   * An implementation of [PigeonApiViewGroup] used to add a new Dart instance of `ViewGroup` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiViewGroup(): PigeonApiViewGroup

  /**
   * An implementation of [PigeonApiVideoView] used to add a new Dart instance of `VideoView` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoView(): PigeonApiVideoView

  /**
   * An implementation of [PigeonApiView] used to add a new Dart instance of `View` to the Dart
   * `InstanceManager`.
   */
  abstract fun getPigeonApiView(): PigeonApiView

  fun setUp() {
    PigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, getPigeonApiImaSdkFactory())
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoAdPlayer())
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoProgressUpdate())
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoAdPlayerCallback())
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, getPigeonApiFrameLayout())
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, getPigeonApiViewGroup())
  }

  fun tearDown() {
    PigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, null)
  }
}

private class PigeonProxyApiBaseCodec(val registrar: PigeonProxyApiRegistrar) :
    StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return registrar.instanceManager.getInstance(
            readValue(buffer).let { if (it is Int) it.toLong() else it as Long })
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is com.google.ads.interactivemedia.v3.api.AdDisplayContainer) {
      registrar.getPigeonApiAdDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseDisplayContainer) {
      registrar.getPigeonApiBaseDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader) {
      registrar.getPigeonApiAdsLoader().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsRequest) {
      registrar.getPigeonApiAdsRequest().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManager) {
      registrar.getPigeonApiAdsManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkFactory) {
      registrar.getPigeonApiImaSdkFactory().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer) {
      registrar.getPigeonApiVideoAdPlayer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
      registrar.getPigeonApiVideoProgressUpdate().pigeon_newInstance(value) {}
    } else if (value
        is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      registrar.getPigeonApiVideoAdPlayerCallback().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      registrar.getPigeonApiAdMediaInfo().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdPodInfo) {
      registrar.getPigeonApiAdPodInfo().pigeon_newInstance(value) {}
    } else if (value is android.widget.FrameLayout) {
      registrar.getPigeonApiFrameLayout().pigeon_newInstance(value) {}
    } else if (value is android.view.ViewGroup) {
      registrar.getPigeonApiViewGroup().pigeon_newInstance(value) {}
    } else if (value is android.widget.VideoView) {
      registrar.getPigeonApiVideoView().pigeon_newInstance(value) {}
    } else if (value is android.view.View) {
      registrar.getPigeonApiView().pigeon_newInstance(value) {}
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> super.writeValue(stream, value)
    }
  }
}
/**
 * A base class for more specialized container interfaces.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseDisplayContainer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseDisplayContainer(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * A container in which to display the ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdDisplayContainer.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdDisplayContainer(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseDisplayContainer] used to access callback methods */
  fun pigeon_getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer {
    return pigeonRegistrar.getPigeonApiBaseDisplayContainer()
  }
}
/**
 * An object which allows publishers to request ads from ad servers or a dynamic ad insertion
 * stream.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoader(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoader and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An object containing the data used to request ads from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRequest.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsRequest(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsRequest and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsRequest,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An object which handles playing ads after they've been received from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManager.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManager(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Factory class for creating SDK objects.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkFactory.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImaSdkFactory(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  abstract fun createAdDisplayContainer(
      container: android.view.ViewGroup,
      player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
  ): com.google.ads.interactivemedia.v3.api.AdDisplayContainer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImaSdkFactory?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdDisplayContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val containerArg = args[0] as android.view.ViewGroup
            val playerArg = args[1] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.createAdDisplayContainer(containerArg, playerArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkFactory and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines the set of methods that a video player must implement to be used by the IMA SDK, as well
 * as a set of callbacks that it must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayer(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  /** The volume of the player as a percentage from 0 to 100. */
  abstract fun setVolume(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      value: Long
  )

  /** The `VideoProgressUpdate` describing playback progress of the current video. */
  abstract fun setAdProgress(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoAdPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setVolume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val valueArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.setVolume(pigeon_instanceArg, valueArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val progressArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            var wrapped: List<Any?>
            try {
              api.setAdProgress(pigeon_instanceArg, progressArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoAdPlayer, but the class has a nonnull callback method.")
  }

  /** Adds a callback. */
  fun addCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Loads a video ad hosted at AdMediaInfo. */
  fun loadAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      adPodInfoArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg, adPodInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Pauses playing the current ad. */
  fun pauseAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /**
   * Starts or resumes playing the video ad referenced by the AdMediaInfo, provided loadAd has
   * already been called for it.
   */
  fun playAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Cleans up and releases all resources used by the `VideoAdPlayer`. */
  fun release(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Removes a callback. */
  fun removeCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Stops playing the current ad. */
  fun stopAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines an update to the video's progress.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoProgressUpdate.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoProgressUpdate(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(
      currentTimeMs: Long,
      durationMs: Long
  ): com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  /** Value to use for cases when progress is not yet defined, such as video initialization. */
  abstract fun videoTimeNotReady():
      com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoProgressUpdate?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val currentTimeMsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val durationMsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                  api.pigeon_defaultConstructor(currentTimeMsArg, durationMsArg),
                  pigeon_identifierArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.videoTimeNotReady",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                  api.videoTimeNotReady(), pigeon_identifierArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoProgressUpdate and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Callbacks that the player must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.VideoAdPlayerCallback.html
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayerCallback(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  /** Fire this callback periodically as ad playback occurs. */
  abstract fun onAdProgress(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      videoProgressUpdate: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  /** Fire this callback when video playback stalls waiting for data. */
  abstract fun onBuffering(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when all content has finished playing. */
  abstract fun onContentComplete(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
  )

  /** Fire this callback when the video finishes playing. */
  abstract fun onEnded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video has encountered an error. */
  abstract fun onError(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is ready to begin playback. */
  abstract fun onLoaded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is paused. */
  abstract fun onPause(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the player begins playing a video. */
  abstract fun onPlay(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is unpaused. */
  abstract fun onResume(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the playback volume changes. */
  abstract fun onVolumeChanged(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      percentage: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiVideoAdPlayerCallback?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val videoProgressUpdateArg =
                args[2] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            var wrapped: List<Any?>
            try {
              api.onAdProgress(pigeon_instanceArg, adMediaInfoArg, videoProgressUpdateArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onBuffering",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onBuffering(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onContentComplete",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            var wrapped: List<Any?>
            try {
              api.onContentComplete(pigeon_instanceArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onEnded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onEnded(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onError",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onError(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onLoaded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onLoaded(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onPause(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPlay",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onPlay(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onResume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            var wrapped: List<Any?>
            try {
              api.onResume(pigeon_instanceArg, adMediaInfoArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onVolumeChanged",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val percentageArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.onVolumeChanged(pigeon_instanceArg, adMediaInfoArg, percentageArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayerCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * The minimal information required to play an ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/AdMediaInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdMediaInfo(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  abstract fun url(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdMediaInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val urlArg = url(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An ad may be part of a pod of ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdPodInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdPodInfo(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  /**
   * The position of the ad within the pod.
   *
   * The value returned is one-based, for example, 1 of 2, 2 of 2, etc. If the ad is not part of a
   * pod, this will return 1.
   */
  abstract fun adPosition(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The maximum duration of the pod in seconds.
   *
   * For unknown duration, -1 is returned.
   */
  abstract fun maxDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo
  ): Double

  /** Client side and DAI VOD: Returns the index of the ad pod. */
  abstract fun podIndex(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The content time offset at which the current ad pod was scheduled.
   *
   * For preroll pod, 0 is returned. For midrolls, the scheduled time is returned in seconds. For
   * postroll, -1 is returned. Defaults to 0 if this ad is not part of a pod, or the pod is not part
   * of an ad playlist.
   */
  abstract fun timeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Double

  /** The total number of ads contained within this pod, including bumpers. */
  abstract fun totalAds(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /** Returns true if the ad is a bumper ad. */
  abstract fun isBumper(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdPodInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adPositionArg = adPosition(pigeon_instanceArg)
    val maxDurationArg = maxDuration(pigeon_instanceArg)
    val podIndexArg = podIndex(pigeon_instanceArg)
    val timeOffsetArg = timeOffset(pigeon_instanceArg)
    val totalAdsArg = totalAds(pigeon_instanceArg)
    val isBumperArg = isBumper(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adPositionArg,
            maxDurationArg,
            podIndexArg,
            timeOffsetArg,
            totalAdsArg,
            isBumperArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}
/**
 * FrameLayout is designed to block out an area on the screen to display a single item.
 *
 * See https://developer.android.com/reference/android/widget/FrameLayout.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFrameLayout(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): android.widget.FrameLayout

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFrameLayout?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                  api.pigeon_defaultConstructor(), pigeon_identifierArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FrameLayout and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.FrameLayout,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiViewGroup] used to access callback methods */
  fun pigeon_getPigeonApiViewGroup(): PigeonApiViewGroup {
    return pigeonRegistrar.getPigeonApiViewGroup()
  }
}
/**
 * A special view that can contain other views (called children.)
 *
 * See https://developer.android.com/reference/android/view/ViewGroup.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiViewGroup(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  abstract fun addView(pigeon_instance: android.view.ViewGroup, view: android.view.View)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiViewGroup?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ViewGroup.addView",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.view.ViewGroup
            val viewArg = args[1] as android.view.View
            var wrapped: List<Any?>
            try {
              api.addView(pigeon_instanceArg, viewArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ViewGroup and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.view.ViewGroup,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}
/**
 * Displays a video file.
 *
 * See https://developer.android.com/reference/android/widget/VideoView.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoView(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoView and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.VideoView,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}
/**
 * This class represents the basic building block for user interface components.
 *
 * See https://developer.android.com/reference/android/view/View.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiView(val pigeonRegistrar: PigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of View and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.view.View, callback: (Result<Unit>) -> Unit) {
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
