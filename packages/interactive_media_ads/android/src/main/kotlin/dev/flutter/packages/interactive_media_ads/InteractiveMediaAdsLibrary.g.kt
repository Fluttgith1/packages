// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.flutter.packages.interactive_media_ads

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(exception.code, exception.message, exception.details)
  } else {
    listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception))
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError(
      "channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in an
 * InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong reference
 * is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the
 * strong reference is removed and then the identifier is retrieved with the intention to pass the
 * identifier to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the
 * instance is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class InteractiveMediaAdsLibraryPigeonInstanceManager(
    private val finalizationListener: PigeonFinalizationListener
) {
  /** Interface for listening when a weak reference of an instance is removed from the manager. */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(
        finalizationListener: PigeonFinalizationListener
    ): InteractiveMediaAdsLibraryPigeonInstanceManager {
      return InteractiveMediaAdsLibraryPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present, from
   * the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `InteractiveMediaAdsLibraryPigeonInstanceManager` to have, or recreate, a weak reference to the
   * Dart instance the identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This allows
   * two objects that are equivalent (e.g. the `equals` method returns true and their hashcodes are
   * equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) {
      "Instance of ${instance.javaClass} has already been added."
    }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } !=
        null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
          tag,
          "The manager was used after calls to the PigeonFinalizationListener has been stopped.")
    }
  }
}

/** Generated API for managing the Dart and native `PigeonInstanceManager`s. */
private class InteractiveMediaAdsLibraryPigeonInstanceManagerApi(
    val binaryMessenger: BinaryMessenger
) {
  companion object {
    /** The codec used by InteractiveMediaAdsLibraryPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy { StandardMessageCodec() }

    /**
     * Sets up an instance of `InteractiveMediaAdsLibraryPigeonInstanceManagerApi` to handle
     * messages from the `binaryMessenger`.
     */
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager?
    ) {
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  instanceManager.remove<Any?>(identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.clear",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> =
                try {
                  instanceManager.clear()
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit) {
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources needed
 * by any implementation.
 */
abstract class InteractiveMediaAdsLibraryPigeonProxyApiRegistrar(
    val binaryMessenger: BinaryMessenger
) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager
  private var _codec: StandardMessageCodec? = null
  val codec: StandardMessageCodec
    get() {
      if (_codec == null) {
        _codec = InteractiveMediaAdsLibraryPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = InteractiveMediaAdsLibraryPigeonInstanceManagerApi(binaryMessenger)
    instanceManager =
        InteractiveMediaAdsLibraryPigeonInstanceManager.create(
            object : InteractiveMediaAdsLibraryPigeonInstanceManager.PigeonFinalizationListener {
              override fun onFinalize(identifier: Long) {
                api.removeStrongReference(identifier) {
                  if (it.isFailure) {
                    Log.e(
                        "PigeonProxyApiRegistrar",
                        "Failed to remove Dart strong reference with identifier: $identifier")
                  }
                }
              }
            })
  }
  /**
   * An implementation of [PigeonApiAd] used to add a new Dart instance of `Ad` to the Dart
   * `InstanceManager`.
   */
  abstract fun getPigeonApiAd(): PigeonApiAd

  /**
   * An implementation of [PigeonApiCuePoint] used to add a new Dart instance of `CuePoint` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCuePoint(): PigeonApiCuePoint

  /**
   * An implementation of [PigeonApiCompanionAd] used to add a new Dart instance of `CompanionAd` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAd(): PigeonApiCompanionAd

  /**
   * An implementation of [PigeonApiUniversalAdId] used to add a new Dart instance of
   * `UniversalAdId` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiUniversalAdId(): PigeonApiUniversalAdId

  /**
   * An implementation of [PigeonApiBaseDisplayContainer] used to add a new Dart instance of
   * `BaseDisplayContainer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer

  /**
   * An implementation of [PigeonApiCompanionAdSlot] used to add a new Dart instance of
   * `CompanionAdSlot` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAdSlot(): PigeonApiCompanionAdSlot

  /**
   * An implementation of [PigeonApiCompanionAdSlotClickListener] used to add a new Dart instance of
   * `CompanionAdSlotClickListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAdSlotClickListener(): PigeonApiCompanionAdSlotClickListener

  /**
   * An implementation of [PigeonApiFriendlyObstruction] used to add a new Dart instance of
   * `FriendlyObstruction` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFriendlyObstruction(): PigeonApiFriendlyObstruction

  /**
   * An implementation of [PigeonApiAdDisplayContainer] used to add a new Dart instance of
   * `AdDisplayContainer` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiAdDisplayContainer(): PigeonApiAdDisplayContainer {
    return PigeonApiAdDisplayContainer(this)
  }

  /**
   * An implementation of [PigeonApiAdsLoader] used to add a new Dart instance of `AdsLoader` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoader(): PigeonApiAdsLoader

  /**
   * An implementation of [PigeonApiAdsManagerLoadedEvent] used to add a new Dart instance of
   * `AdsManagerLoadedEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManagerLoadedEvent(): PigeonApiAdsManagerLoadedEvent

  /**
   * An implementation of [PigeonApiAdErrorEvent] used to add a new Dart instance of `AdErrorEvent`
   * to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdErrorEvent(): PigeonApiAdErrorEvent

  /**
   * An implementation of [PigeonApiAdError] used to add a new Dart instance of `AdError` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdError(): PigeonApiAdError

  /**
   * An implementation of [PigeonApiAdsRequest] used to add a new Dart instance of `AdsRequest` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsRequest(): PigeonApiAdsRequest

  /**
   * An implementation of [PigeonApiContentProgressProvider] used to add a new Dart instance of
   * `ContentProgressProvider` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiContentProgressProvider(): PigeonApiContentProgressProvider {
    return PigeonApiContentProgressProvider(this)
  }

  /**
   * An implementation of [PigeonApiAdsManager] used to add a new Dart instance of `AdsManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManager(): PigeonApiAdsManager

  /**
   * An implementation of [PigeonApiBaseManager] used to add a new Dart instance of `BaseManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseManager(): PigeonApiBaseManager

  /**
   * An implementation of [PigeonApiAdEvent] used to add a new Dart instance of `AdEvent` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdEvent(): PigeonApiAdEvent

  /**
   * An implementation of [PigeonApiImaSdkFactory] used to add a new Dart instance of
   * `ImaSdkFactory` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImaSdkFactory(): PigeonApiImaSdkFactory

  /**
   * An implementation of [PigeonApiImaSdkSettings] used to add a new Dart instance of
   * `ImaSdkSettings` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiImaSdkSettings(): PigeonApiImaSdkSettings {
    return PigeonApiImaSdkSettings(this)
  }

  /**
   * An implementation of [PigeonApiVideoProgressUpdate] used to add a new Dart instance of
   * `VideoProgressUpdate` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoProgressUpdate(): PigeonApiVideoProgressUpdate

  /**
   * An implementation of [PigeonApiAdMediaInfo] used to add a new Dart instance of `AdMediaInfo` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdMediaInfo(): PigeonApiAdMediaInfo

  /**
   * An implementation of [PigeonApiAdPodInfo] used to add a new Dart instance of `AdPodInfo` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdPodInfo(): PigeonApiAdPodInfo

  /**
   * An implementation of [PigeonApiFrameLayout] used to add a new Dart instance of `FrameLayout` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFrameLayout(): PigeonApiFrameLayout

  /**
   * An implementation of [PigeonApiViewGroup] used to add a new Dart instance of `ViewGroup` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiViewGroup(): PigeonApiViewGroup

  /**
   * An implementation of [PigeonApiVideoView] used to add a new Dart instance of `VideoView` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoView(): PigeonApiVideoView

  /**
   * An implementation of [PigeonApiView] used to add a new Dart instance of `View` to the Dart
   * `InstanceManager`.
   */
  open fun getPigeonApiView(): PigeonApiView {
    return PigeonApiView(this)
  }

  /**
   * An implementation of [PigeonApiMediaPlayer] used to add a new Dart instance of `MediaPlayer` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMediaPlayer(): PigeonApiMediaPlayer

  /**
   * An implementation of [PigeonApiVideoAdPlayerCallback] used to add a new Dart instance of
   * `VideoAdPlayerCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayerCallback(): PigeonApiVideoAdPlayerCallback

  /**
   * An implementation of [PigeonApiVideoAdPlayer] used to add a new Dart instance of
   * `VideoAdPlayer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayer(): PigeonApiVideoAdPlayer

  /**
   * An implementation of [PigeonApiAdsLoadedListener] used to add a new Dart instance of
   * `AdsLoadedListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoadedListener(): PigeonApiAdsLoadedListener

  /**
   * An implementation of [PigeonApiAdErrorListener] used to add a new Dart instance of
   * `AdErrorListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdErrorListener(): PigeonApiAdErrorListener

  /**
   * An implementation of [PigeonApiAdEventListener] used to add a new Dart instance of
   * `AdEventListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdEventListener(): PigeonApiAdEventListener

  fun setUp() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(
        binaryMessenger, instanceManager)
    PigeonApiBaseDisplayContainer.setUpMessageHandlers(
        binaryMessenger, getPigeonApiBaseDisplayContainer())
    PigeonApiCompanionAdSlot.setUpMessageHandlers(binaryMessenger, getPigeonApiCompanionAdSlot())
    PigeonApiCompanionAdSlotClickListener.setUpMessageHandlers(
        binaryMessenger, getPigeonApiCompanionAdSlotClickListener())
    PigeonApiAdsLoader.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsLoader())
    PigeonApiAdsRequest.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsRequest())
    PigeonApiAdsManager.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsManager())
    PigeonApiBaseManager.setUpMessageHandlers(binaryMessenger, getPigeonApiBaseManager())
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, getPigeonApiImaSdkFactory())
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoProgressUpdate())
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, getPigeonApiFrameLayout())
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, getPigeonApiViewGroup())
    PigeonApiVideoView.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoView())
    PigeonApiMediaPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiMediaPlayer())
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoAdPlayerCallback())
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoAdPlayer())
    PigeonApiAdsLoadedListener.setUpMessageHandlers(
        binaryMessenger, getPigeonApiAdsLoadedListener())
    PigeonApiAdErrorListener.setUpMessageHandlers(binaryMessenger, getPigeonApiAdErrorListener())
    PigeonApiAdEventListener.setUpMessageHandlers(binaryMessenger, getPigeonApiAdEventListener())
  }

  fun tearDown() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBaseDisplayContainer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCompanionAdSlot.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCompanionAdSlotClickListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsLoader.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsRequest.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBaseManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoView.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMediaPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsLoadedListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdErrorListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdEventListener.setUpMessageHandlers(binaryMessenger, null)
  }
}

private class InteractiveMediaAdsLibraryPigeonProxyApiBaseCodec(
    val registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) : InteractiveMediaAdsLibraryPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return registrar.instanceManager.getInstance(
            readValue(buffer).let { if (it is Int) it.toLong() else it as Long })
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean ||
        value is ByteArray ||
        value is Double ||
        value is DoubleArray ||
        value is FloatArray ||
        value is Int ||
        value is IntArray ||
        value is List<*> ||
        value is Long ||
        value is LongArray ||
        value is Map<*, *> ||
        value is String ||
        value is AdErrorCode ||
        value is AdErrorType ||
        value is AdEventType ||
        value is UiElement ||
        value is FriendlyObstructionPurpose ||
        value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is com.google.ads.interactivemedia.v3.api.Ad) {
      registrar.getPigeonApiAd().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CuePoint) {
      registrar.getPigeonApiCuePoint().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAd) {
      registrar.getPigeonApiCompanionAd().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.UniversalAdId) {
      registrar.getPigeonApiUniversalAdId().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAdSlot) {
      registrar.getPigeonApiCompanionAdSlot().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener) {
      registrar.getPigeonApiCompanionAdSlotClickListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.FriendlyObstruction) {
      registrar.getPigeonApiFriendlyObstruction().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdDisplayContainer) {
      registrar.getPigeonApiAdDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseDisplayContainer) {
      registrar.getPigeonApiBaseDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader) {
      registrar.getPigeonApiAdsLoader().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent) {
      registrar.getPigeonApiAdsManagerLoadedEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdErrorEvent) {
      registrar.getPigeonApiAdErrorEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdError) {
      registrar.getPigeonApiAdError().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsRequest) {
      registrar.getPigeonApiAdsRequest().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider) {
      registrar.getPigeonApiContentProgressProvider().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManager) {
      registrar.getPigeonApiAdsManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseManager) {
      registrar.getPigeonApiBaseManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdEvent) {
      registrar.getPigeonApiAdEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkFactory) {
      registrar.getPigeonApiImaSdkFactory().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkSettings) {
      registrar.getPigeonApiImaSdkSettings().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
      registrar.getPigeonApiVideoProgressUpdate().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      registrar.getPigeonApiAdMediaInfo().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdPodInfo) {
      registrar.getPigeonApiAdPodInfo().pigeon_newInstance(value) {}
    } else if (value is android.widget.FrameLayout) {
      registrar.getPigeonApiFrameLayout().pigeon_newInstance(value) {}
    } else if (value is android.view.ViewGroup) {
      registrar.getPigeonApiViewGroup().pigeon_newInstance(value) {}
    } else if (value is android.widget.VideoView) {
      registrar.getPigeonApiVideoView().pigeon_newInstance(value) {}
    } else if (value is android.view.View) {
      registrar.getPigeonApiView().pigeon_newInstance(value) {}
    } else if (value is android.media.MediaPlayer) {
      registrar.getPigeonApiMediaPlayer().pigeon_newInstance(value) {}
    } else if (value
        is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      registrar.getPigeonApiVideoAdPlayerCallback().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer) {
      registrar.getPigeonApiVideoAdPlayer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener) {
      registrar.getPigeonApiAdsLoadedListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
      registrar.getPigeonApiAdErrorListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener) {
      registrar.getPigeonApiAdEventListener().pigeon_newInstance(value) {}
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else ->
          throw IllegalArgumentException(
              "Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

/**
 * The types of error that can be encountered.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorCode.html.
 */
enum class AdErrorCode(val raw: Int) {
  /** Ads player was not provided. */
  ADS_PLAYER_WAS_NOT_PROVIDED(0),
  /** There was a problem requesting ads from the server. */
  ADS_REQUEST_NETWORK_ERROR(1),
  /** A companion ad failed to load or render. */
  COMPANION_AD_LOADING_FAILED(2),
  /** There was a problem requesting ads from the server. */
  FAILED_TO_REQUEST_ADS(3),
  /** An error internal to the SDK occurred. */
  INTERNAL_ERROR(4),
  /** Invalid arguments were provided to SDK methods. */
  INVALID_ARGUMENTS(5),
  /** An overlay ad failed to load. */
  OVERLAY_AD_LOADING_FAILED(6),
  /** An overlay ad failed to render. */
  OVERLAY_AD_PLAYING_FAILED(7),
  /** Ads list was returned but ContentProgressProvider was not configured. */
  PLAYLIST_NO_CONTENT_TRACKING(8),
  /** Ads loader sent ads loaded event when it was not expected. */
  UNEXPECTED_ADS_LOADED_EVENT(9),
  /** The ad response was not understood and cannot be parsed. */
  UNKNOWN_AD_RESPONSE(10),
  /** An unexpected error occurred and the cause is not known. */
  UNKNOWN_ERROR(11),
  /** No assets were found in the VAST ad response. */
  VAST_ASSET_NOT_FOUND(12),
  /** A VAST response containing a single `<VAST>` tag with no child tags. */
  VAST_EMPTY_RESPONSE(13),
  /**
   * Assets were found in the VAST ad response for a linear ad, but none of them matched the video
   * player's capabilities.
   */
  VAST_LINEAR_ASSET_MISMATCH(14),
  /**
   * At least one VAST wrapper ad loaded successfully and a subsequent wrapper or inline ad load has
   * timed out.
   */
  VAST_LOAD_TIMEOUT(15),
  /** The ad response was not recognized as a valid VAST ad. */
  VAST_MALFORMED_RESPONSE(16),
  /** Failed to load media assets from a VAST response. */
  VAST_MEDIA_LOAD_TIMEOUT(17),
  /**
   * Assets were found in the VAST ad response for a nonlinear ad, but none of them matched the
   * video player's capabilities.
   */
  VAST_NONLINEAR_ASSET_MISMATCH(18),
  /** No Ads VAST response after one or more wrappers. */
  VAST_NO_ADS_AFTER_WRAPPER(19),
  /** The maximum number of VAST wrapper redirects has been reached. */
  VAST_TOO_MANY_REDIRECTS(20),
  /**
   * Trafficking error.
   *
   * Video player received an ad type that it was not expecting and/or cannot display.
   */
  VAST_TRAFFICKING_ERROR(21),
  /** There was an error playing the video ad. */
  VIDEO_PLAY_ERROR(22),
  /** The error code is not recognized by this wrapper. */
  UNKNOWN(23);

  companion object {
    fun ofRaw(raw: Int): AdErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Specifies when the error was encountered, during either ad loading or playback.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorType.html.
 */
enum class AdErrorType(val raw: Int) {
  /** Indicates that the error was encountered when the ad was being loaded. */
  LOAD(0),
  /** Indicates that the error was encountered after the ad loaded, during ad play. */
  PLAY(1),
  /** The error is not recognized by this wrapper. */
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): AdErrorType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Types of events that can occur during ad playback.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventType.html.
 */
enum class AdEventType(val raw: Int) {
  /** Fired when an ad break in a stream ends. */
  AD_BREAK_ENDED(0),
  /** Fired when an ad break will not play back any ads. */
  AD_BREAK_FETCH_ERROR(1),
  /** Fired when an ad break is ready from VMAP or ad rule ads. */
  AD_BREAK_READY(2),
  /** Fired when an ad break in a stream starts. */
  AD_BREAK_STARTED(3),
  /** Fired when playback stalls while the ad buffers. */
  AD_BUFFERING(4),
  /** Fired when an ad period in a stream ends. */
  AD_PERIOD_ENDED(5),
  /** Fired when an ad period in a stream starts. */
  AD_PERIOD_STARTED(6),
  /** Fired to inform of ad progress and can be used by publisher to display a countdown timer. */
  AD_PROGRESS(7),
  /**
   * Fired when the ads manager is done playing all the valid ads in the ads response, or when the
   * response doesn't return any valid ads.
   */
  ALL_ADS_COMPLETED(8),
  /** Fired when an ad is clicked. */
  CLICKED(9),
  /** Fired when an ad completes playing. */
  COMPLETED(10),
  /** Fired when content should be paused. */
  CONTENT_PAUSE_REQUESTED(11),
  /** Fired when content should be resumed. */
  CONTENT_RESUME_REQUESTED(12),
  /** Fired when VOD stream cuepoints have changed. */
  CUEPOINTS_CHANGED(13),
  /** Fired when the ad playhead crosses first quartile. */
  FIRST_QUARTILE(14),
  /** The user has closed the icon fallback image dialog. */
  ICON_FALLBACK_IMAGE_CLOSED(15),
  /** The user has tapped an ad icon. */
  ICON_TAPPED(16),
  /** Fired when the VAST response has been received. */
  LOADED(17),
  /** Fired to enable the SDK to communicate a message to be logged, which is stored in adData. */
  LOG(18),
  /** Fired when the ad playhead crosses midpoint. */
  MIDPOINT(19),
  /** Fired when an ad is paused. */
  PAUSED(20),
  /** Fired when an ad is resumed. */
  RESUMED(21),
  /** Fired when an ad changes its skippable state. */
  SKIPPABLE_STATE_CHANGED(22),
  /** Fired when an ad was skipped. */
  SKIPPED(23),
  /** Fired when an ad starts playing. */
  STARTED(24),
  /** Fired when a non-clickthrough portion of a video ad is clicked. */
  TAPPED(25),
  /** Fired when the ad playhead crosses third quartile. */
  THIRD_QUARTILE(26),
  /** The event type is not recognized by this wrapper. */
  UNKNOWN(27);

  companion object {
    fun ofRaw(raw: Int): AdEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Describes an element of the ad UI, to be requested or rendered by the SDK.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/UiElement.html.
 */
enum class UiElement(val raw: Int) {
  /** The ad attribution UI element, for example, "Ad". */
  AD_ATTRIBUTION(0),
  /** Ad attribution is required for a countdown timer to be displayed. */
  COUNTDOWN(1),
  /** The element is not recognized by this wrapper. */
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): UiElement? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * A list of purposes for which an obstruction would be registered as friendly.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/FriendlyObstructionPurpose.html.
 */
enum class FriendlyObstructionPurpose(val raw: Int) {
  CLOSE_AD(0),
  NOT_VISIBLE(1),
  OTHER(2),
  VIDEO_CONTROLS(3),
  UNKNOWN(4);

  companion object {
    fun ofRaw(raw: Int): FriendlyObstructionPurpose? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

private open class InteractiveMediaAdsLibraryPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Int?)?.let { AdErrorCode.ofRaw(it) }
      }
      130.toByte() -> {
        return (readValue(buffer) as Int?)?.let { AdErrorType.ofRaw(it) }
      }
      131.toByte() -> {
        return (readValue(buffer) as Int?)?.let { AdEventType.ofRaw(it) }
      }
      132.toByte() -> {
        return (readValue(buffer) as Int?)?.let { UiElement.ofRaw(it) }
      }
      133.toByte() -> {
        return (readValue(buffer) as Int?)?.let { FriendlyObstructionPurpose.ofRaw(it) }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is AdErrorCode -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is AdErrorType -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is AdEventType -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is UiElement -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is FriendlyObstructionPurpose -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * An object that holds data corresponding to the main Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/Ad.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAd(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Returns the ad ID as specified in the VAST response. */
  abstract fun adId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** Returns the pod metadata object. */
  abstract fun adPodInfo(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): com.google.ads.interactivemedia.v3.api.AdPodInfo

  /** Returns the ad system as specified in the VAST response. */
  abstract fun adSystem(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** Returns the IDs of the ads' creatives, starting with the first wrapper ad. */
  abstract fun adWrapperCreativeIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** Returns the wrapper ad IDs as specified in the VAST response. */
  abstract fun adWrapperIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** Returns the wrapper ad systems as specified in the VAST response. */
  abstract fun adWrapperSystems(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** Returns the advertiser name as defined by the serving party. */
  abstract fun advertiserName(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /**
   * Returns the companions for the current ad while using DAI.
   *
   * Returns an empty list in any other scenario.
   */
  abstract fun companionAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<com.google.ads.interactivemedia.v3.api.CompanionAd>

  /**
   * Returns the content type of the currently selected creative, or null if no creative is selected
   * or the content type is unavailable.
   */
  abstract fun contentType(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** Returns the ISCI (Industry Standard Commercial Identifier) code for an ad. */
  abstract fun creativeAdId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** Returns the ID of the selected creative for the ad, */
  abstract fun creativeId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /**
   * Returns the first deal ID present in the wrapper chain for the current ad, starting from the
   * top.
   */
  abstract fun dealId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** Returns the description of this ad from the VAST response. */
  abstract fun description(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** Returns the duration of the ad in seconds, -1 if not available. */
  abstract fun duration(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Double

  /** Returns the height of the selected creative if non-linear, else returns 0. */
  abstract fun height(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Returns the number of seconds of playback before the ad becomes skippable. */
  abstract fun skipTimeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Double

  /** Returns the URL associated with the survey for the given ad. */
  abstract fun surveyUrl(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** Returns the title of this ad from the VAST response. */
  abstract fun title(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** Returns custom parameters associated with the ad at the time of ad trafficking. */
  abstract fun traffickingParameters(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): String

  /** Returns the set of ad UI elements rendered by the IMA SDK for this ad. */
  abstract fun uiElements(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<UiElement>

  /** The list of all universal ad IDs for this ad. */
  abstract fun universalAdIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<com.google.ads.interactivemedia.v3.api.UniversalAdId>

  /** Returns the VAST bitrate in Kbps of the selected creative. */
  abstract fun vastMediaBitrate(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Returns the VAST media height in pixels of the selected creative. */
  abstract fun vastMediaHeight(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Returns the VAST media width in pixels of the selected creative. */
  abstract fun vastMediaWidth(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Returns the width of the selected creative if non-linear, else returns 0. */
  abstract fun width(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Indicates whether the ad’s current mode of operation is linear or non-linear. */
  abstract fun isLinear(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Boolean

  /** Indicates whether the ad can be skipped by the user. */
  abstract fun isSkippable(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Ad and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.Ad,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adIdArg = adId(pigeon_instanceArg)
    val adPodInfoArg = adPodInfo(pigeon_instanceArg)
    val adSystemArg = adSystem(pigeon_instanceArg)
    val adWrapperCreativeIdsArg = adWrapperCreativeIds(pigeon_instanceArg)
    val adWrapperIdsArg = adWrapperIds(pigeon_instanceArg)
    val adWrapperSystemsArg = adWrapperSystems(pigeon_instanceArg)
    val advertiserNameArg = advertiserName(pigeon_instanceArg)
    val companionAdsArg = companionAds(pigeon_instanceArg)
    val contentTypeArg = contentType(pigeon_instanceArg)
    val creativeAdIdArg = creativeAdId(pigeon_instanceArg)
    val creativeIdArg = creativeId(pigeon_instanceArg)
    val dealIdArg = dealId(pigeon_instanceArg)
    val descriptionArg = description(pigeon_instanceArg)
    val durationArg = duration(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val skipTimeOffsetArg = skipTimeOffset(pigeon_instanceArg)
    val surveyUrlArg = surveyUrl(pigeon_instanceArg)
    val titleArg = title(pigeon_instanceArg)
    val traffickingParametersArg = traffickingParameters(pigeon_instanceArg)
    val uiElementsArg = uiElements(pigeon_instanceArg)
    val universalAdIdsArg = universalAdIds(pigeon_instanceArg)
    val vastMediaBitrateArg = vastMediaBitrate(pigeon_instanceArg)
    val vastMediaHeightArg = vastMediaHeight(pigeon_instanceArg)
    val vastMediaWidthArg = vastMediaWidth(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val isLinearArg = isLinear(pigeon_instanceArg)
    val isSkippableArg = isSkippable(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.Ad.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adIdArg,
            adPodInfoArg,
            adSystemArg,
            adWrapperCreativeIdsArg,
            adWrapperIdsArg,
            adWrapperSystemsArg,
            advertiserNameArg,
            companionAdsArg,
            contentTypeArg,
            creativeAdIdArg,
            creativeIdArg,
            dealIdArg,
            descriptionArg,
            durationArg,
            heightArg,
            skipTimeOffsetArg,
            surveyUrlArg,
            titleArg,
            traffickingParametersArg,
            uiElementsArg,
            universalAdIdsArg,
            vastMediaBitrateArg,
            vastMediaHeightArg,
            vastMediaWidthArg,
            widthArg,
            isLinearArg,
            isSkippableArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.Ad
import com.google.ads.interactivemedia.v3.api.CompanionAd
import com.google.ads.interactivemedia.v3.api.UniversalAdId
import com.google.ads.interactivemedia.v3.api.AdPodInfo

/**
 * ProxyApi implementation for [Ad].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAd(pigeonRegistrar) {

  override fun adId(pigeon_instance: Ad): String {
    return pigeon_instance.adId
  }

  override fun adPodInfo(pigeon_instance: Ad): com.google.ads.interactivemedia.v3.api.AdPodInfo {
    return pigeon_instance.adPodInfo
  }

  override fun adSystem(pigeon_instance: Ad): String {
    return pigeon_instance.adSystem
  }

  override fun adWrapperCreativeIds(pigeon_instance: Ad): List<String> {
    return pigeon_instance.adWrapperCreativeIds
  }

  override fun adWrapperIds(pigeon_instance: Ad): List<String> {
    return pigeon_instance.adWrapperIds
  }

  override fun adWrapperSystems(pigeon_instance: Ad): List<String> {
    return pigeon_instance.adWrapperSystems
  }

  override fun advertiserName(pigeon_instance: Ad): String {
    return pigeon_instance.advertiserName
  }

  override fun companionAds(pigeon_instance: Ad): List<com.google.ads.interactivemedia.v3.api.CompanionAd> {
    return pigeon_instance.companionAds
  }

  override fun contentType(pigeon_instance: Ad): String? {
    return pigeon_instance.contentType
  }

  override fun creativeAdId(pigeon_instance: Ad): String {
    return pigeon_instance.creativeAdId
  }

  override fun creativeId(pigeon_instance: Ad): String {
    return pigeon_instance.creativeId
  }

  override fun dealId(pigeon_instance: Ad): String {
    return pigeon_instance.dealId
  }

  override fun description(pigeon_instance: Ad): String? {
    return pigeon_instance.description
  }

  override fun duration(pigeon_instance: Ad): Double {
    return pigeon_instance.duration
  }

  override fun height(pigeon_instance: Ad): Long {
    return pigeon_instance.height
  }

  override fun skipTimeOffset(pigeon_instance: Ad): Double {
    return pigeon_instance.skipTimeOffset
  }

  override fun surveyUrl(pigeon_instance: Ad): String {
    return pigeon_instance.surveyUrl
  }

  override fun title(pigeon_instance: Ad): String? {
    return pigeon_instance.title
  }

  override fun traffickingParameters(pigeon_instance: Ad): String {
    return pigeon_instance.traffickingParameters
  }

  override fun uiElements(pigeon_instance: Ad): List<UiElement> {
    return pigeon_instance.uiElements
  }

  override fun universalAdIds(pigeon_instance: Ad): List<com.google.ads.interactivemedia.v3.api.UniversalAdId> {
    return pigeon_instance.universalAdIds
  }

  override fun vastMediaBitrate(pigeon_instance: Ad): Long {
    return pigeon_instance.vastMediaBitrate
  }

  override fun vastMediaHeight(pigeon_instance: Ad): Long {
    return pigeon_instance.vastMediaHeight
  }

  override fun vastMediaWidth(pigeon_instance: Ad): Long {
    return pigeon_instance.vastMediaWidth
  }

  override fun width(pigeon_instance: Ad): Long {
    return pigeon_instance.width
  }

  override fun isLinear(pigeon_instance: Ad): Boolean {
    return pigeon_instance.isLinear
  }

  override fun isSkippable(pigeon_instance: Ad): Boolean {
    return pigeon_instance.isSkippable
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.Ad
import com.google.ads.interactivemedia.v3.api.CompanionAd
import com.google.ads.interactivemedia.v3.api.UniversalAdId
import com.google.ads.interactivemedia.v3.api.AdPodInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdProxyApiTest {
  @Test
  fun adId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.adId).thenReturn(value)

    assertEquals(value, api.adId(instance))
  }

  @Test
  fun adPodInfo() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = mock<AdPodInfo>()
    whenever(instance.adPodInfo).thenReturn(value)

    assertEquals(value, api.adPodInfo(instance))
  }

  @Test
  fun adSystem() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.adSystem).thenReturn(value)

    assertEquals(value, api.adSystem(instance))
  }

  @Test
  fun adWrapperCreativeIds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf("myString")
    whenever(instance.adWrapperCreativeIds).thenReturn(value)

    assertEquals(value, api.adWrapperCreativeIds(instance))
  }

  @Test
  fun adWrapperIds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf("myString")
    whenever(instance.adWrapperIds).thenReturn(value)

    assertEquals(value, api.adWrapperIds(instance))
  }

  @Test
  fun adWrapperSystems() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf("myString")
    whenever(instance.adWrapperSystems).thenReturn(value)

    assertEquals(value, api.adWrapperSystems(instance))
  }

  @Test
  fun advertiserName() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.advertiserName).thenReturn(value)

    assertEquals(value, api.advertiserName(instance))
  }

  @Test
  fun companionAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf(mock<CompanionAd>())
    whenever(instance.companionAds).thenReturn(value)

    assertEquals(value, api.companionAds(instance))
  }

  @Test
  fun contentType() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.contentType).thenReturn(value)

    assertEquals(value, api.contentType(instance))
  }

  @Test
  fun creativeAdId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.creativeAdId).thenReturn(value)

    assertEquals(value, api.creativeAdId(instance))
  }

  @Test
  fun creativeId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.creativeId).thenReturn(value)

    assertEquals(value, api.creativeId(instance))
  }

  @Test
  fun dealId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.dealId).thenReturn(value)

    assertEquals(value, api.dealId(instance))
  }

  @Test
  fun description() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.description).thenReturn(value)

    assertEquals(value, api.description(instance))
  }

  @Test
  fun duration() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 1.0
    whenever(instance.duration).thenReturn(value)

    assertEquals(value, api.duration(instance))
  }

  @Test
  fun height() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.height).thenReturn(value)

    assertEquals(value, api.height(instance))
  }

  @Test
  fun skipTimeOffset() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 1.0
    whenever(instance.skipTimeOffset).thenReturn(value)

    assertEquals(value, api.skipTimeOffset(instance))
  }

  @Test
  fun surveyUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.surveyUrl).thenReturn(value)

    assertEquals(value, api.surveyUrl(instance))
  }

  @Test
  fun title() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.title).thenReturn(value)

    assertEquals(value, api.title(instance))
  }

  @Test
  fun traffickingParameters() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.traffickingParameters).thenReturn(value)

    assertEquals(value, api.traffickingParameters(instance))
  }

  @Test
  fun uiElements() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf(dev.flutter.packages.interactive_media_ads.UiElement.AD_ATTRIBUTION)
    whenever(instance.uiElements).thenReturn(value)

    assertEquals(value, api.uiElements(instance))
  }

  @Test
  fun universalAdIds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf(mock<UniversalAdId>())
    whenever(instance.universalAdIds).thenReturn(value)

    assertEquals(value, api.universalAdIds(instance))
  }

  @Test
  fun vastMediaBitrate() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.vastMediaBitrate).thenReturn(value)

    assertEquals(value, api.vastMediaBitrate(instance))
  }

  @Test
  fun vastMediaHeight() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.vastMediaHeight).thenReturn(value)

    assertEquals(value, api.vastMediaHeight(instance))
  }

  @Test
  fun vastMediaWidth() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.vastMediaWidth).thenReturn(value)

    assertEquals(value, api.vastMediaWidth(instance))
  }

  @Test
  fun width() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.width).thenReturn(value)

    assertEquals(value, api.width(instance))
  }

  @Test
  fun isLinear() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = true
    whenever(instance.isLinear).thenReturn(value)

    assertEquals(value, api.isLinear(instance))
  }

  @Test
  fun isSkippable() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = true
    whenever(instance.isSkippable).thenReturn(value)

    assertEquals(value, api.isSkippable(instance))
  }

}
*/
/**
 * Represents a cuepoint within a VOD stream.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CuePoint.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCuePoint(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The end time of the cuepoint in milliseconds. */
  abstract fun endTimeMs(pigeon_instance: com.google.ads.interactivemedia.v3.api.CuePoint): Long

  /** The start time of the cuepoint in milliseconds. */
  abstract fun startTimeMs(pigeon_instance: com.google.ads.interactivemedia.v3.api.CuePoint): Long

  /** Whether the corresponding ad break was played. */
  abstract fun isPlayed(pigeon_instance: com.google.ads.interactivemedia.v3.api.CuePoint): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CuePoint and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CuePoint,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val endTimeMsArg = endTimeMs(pigeon_instanceArg)
    val startTimeMsArg = startTimeMs(pigeon_instanceArg)
    val isPlayedArg = isPlayed(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CuePoint.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, endTimeMsArg, startTimeMsArg, isPlayedArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CuePoint

/**
 * ProxyApi implementation for [CuePoint].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CuePointProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCuePoint(pigeonRegistrar) {

  override fun endTimeMs(pigeon_instance: CuePoint): Long {
    return pigeon_instance.endTimeMs
  }

  override fun startTimeMs(pigeon_instance: CuePoint): Long {
    return pigeon_instance.startTimeMs
  }

  override fun isPlayed(pigeon_instance: CuePoint): Boolean {
    return pigeon_instance.isPlayed
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CuePoint
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class CuePointProxyApiTest {
  @Test
  fun endTimeMs() {
    val api = TestProxyApiRegistrar().getPigeonApiCuePoint()

    val instance = mock<CuePoint>()
    val value = 0
    whenever(instance.endTimeMs).thenReturn(value)

    assertEquals(value, api.endTimeMs(instance))
  }

  @Test
  fun startTimeMs() {
    val api = TestProxyApiRegistrar().getPigeonApiCuePoint()

    val instance = mock<CuePoint>()
    val value = 0
    whenever(instance.startTimeMs).thenReturn(value)

    assertEquals(value, api.startTimeMs(instance))
  }

  @Test
  fun isPlayed() {
    val api = TestProxyApiRegistrar().getPigeonApiCuePoint()

    val instance = mock<CuePoint>()
    val value = true
    whenever(instance.isPlayed).thenReturn(value)

    assertEquals(value, api.isPlayed(instance))
  }

}
*/
/**
 * An object that holds data corresponding to the companion Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAd.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAd(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The API needed to execute this ad, or null if unavailable. */
  abstract fun apiFramework(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd
  ): String?

  /**
   * The height of the companion in pixels.
   *
   * 0 if unavailable.
   */
  abstract fun height(pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd): Long

  /** The URL for the static resource of this companion. */
  abstract fun resourceValue(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd
  ): String

  /**
   * The width of the companion in pixels.
   *
   * 0 if unavailable.
   */
  abstract fun width(pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CompanionAd and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAd,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val apiFrameworkArg = apiFramework(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val resourceValueArg = resourceValue(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CompanionAd.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(pigeon_identifierArg, apiFrameworkArg, heightArg, resourceValueArg, widthArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAd

/**
 * ProxyApi implementation for [CompanionAd].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CompanionAdProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCompanionAd(pigeonRegistrar) {

  override fun apiFramework(pigeon_instance: CompanionAd): String? {
    return pigeon_instance.apiFramework
  }

  override fun height(pigeon_instance: CompanionAd): Long {
    return pigeon_instance.height
  }

  override fun resourceValue(pigeon_instance: CompanionAd): String {
    return pigeon_instance.resourceValue
  }

  override fun width(pigeon_instance: CompanionAd): Long {
    return pigeon_instance.width
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAd
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class CompanionAdProxyApiTest {
  @Test
  fun apiFramework() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = "myString"
    whenever(instance.apiFramework).thenReturn(value)

    assertEquals(value, api.apiFramework(instance))
  }

  @Test
  fun height() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = 0
    whenever(instance.height).thenReturn(value)

    assertEquals(value, api.height(instance))
  }

  @Test
  fun resourceValue() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = "myString"
    whenever(instance.resourceValue).thenReturn(value)

    assertEquals(value, api.resourceValue(instance))
  }

  @Test
  fun width() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = 0
    whenever(instance.width).thenReturn(value)

    assertEquals(value, api.width(instance))
  }

}
*/
/**
 * This object exposes information about the universal ad ID.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/UniversalAdId.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiUniversalAdId(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Returns the ad ID registry associated with the ad ID value.
   *
   * Returns "unknown" if the registry is not known.
   */
  abstract fun adIdRegistry(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.UniversalAdId
  ): String

  /**
   * Returns the universal ad ID value.
   *
   * Returns "unknown" if the value is not known.
   */
  abstract fun adIdValue(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.UniversalAdId
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UniversalAdId and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.UniversalAdId,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adIdRegistryArg = adIdRegistry(pigeon_instanceArg)
    val adIdValueArg = adIdValue(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.UniversalAdId.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, adIdRegistryArg, adIdValueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.UniversalAdId

/**
 * ProxyApi implementation for [UniversalAdId].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class UniversalAdIdProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiUniversalAdId(pigeonRegistrar) {

  override fun adIdRegistry(pigeon_instance: UniversalAdId): String {
    return pigeon_instance.adIdRegistry
  }

  override fun adIdValue(pigeon_instance: UniversalAdId): String {
    return pigeon_instance.adIdValue
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.UniversalAdId
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class UniversalAdIdProxyApiTest {
  @Test
  fun adIdRegistry() {
    val api = TestProxyApiRegistrar().getPigeonApiUniversalAdId()

    val instance = mock<UniversalAdId>()
    val value = "myString"
    whenever(instance.adIdRegistry).thenReturn(value)

    assertEquals(value, api.adIdRegistry(instance))
  }

  @Test
  fun adIdValue() {
    val api = TestProxyApiRegistrar().getPigeonApiUniversalAdId()

    val instance = mock<UniversalAdId>()
    val value = "myString"
    whenever(instance.adIdValue).thenReturn(value)

    assertEquals(value, api.adIdValue(instance))
  }

}
*/
/**
 * A base class for more specialized container interfaces.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseDisplayContainer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Returns the previously set container, or null if none has been set. */
  abstract fun getAdContainer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
  ): android.view.ViewGroup?

  /**
   * Gets the companion slots that have been set.
   *
   * Returns an empty list if none have been set.
   */
  abstract fun getCompanionSlots(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
  ): List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>

  /**
   * Registers a view that overlays or obstructs this container as "friendly" for viewability
   * measurement purposes.
   */
  abstract fun registerFriendlyObstruction(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      friendlyObstruction: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  )

  /**
   * Sets slots for displaying companions.
   *
   * Passing null will reset the container to having no companion slots.
   */
  abstract fun setCompanionSlots(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      companionSlots: List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>?
  )

  /** Unregisters all previously registered friendly obstructions. */
  abstract fun unregisterAllFriendlyObstructions(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiBaseDisplayContainer?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.getAdContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdContainer(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.getCompanionSlots",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCompanionSlots(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.registerFriendlyObstruction",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val friendlyObstructionArg =
                args[1] as com.google.ads.interactivemedia.v3.api.FriendlyObstruction
            val wrapped: List<Any?> =
                try {
                  api.registerFriendlyObstruction(pigeon_instanceArg, friendlyObstructionArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.setCompanionSlots",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val companionSlotsArg =
                args[1] as List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>?
            val wrapped: List<Any?> =
                try {
                  api.setCompanionSlots(pigeon_instanceArg, companionSlotsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.unregisterAllFriendlyObstructions",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val wrapped: List<Any?> =
                try {
                  api.unregisterAllFriendlyObstructions(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot

/**
 * ProxyApi implementation for [BaseDisplayContainer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class BaseDisplayContainerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiBaseDisplayContainer(pigeonRegistrar) {

  override fun getAdContainer(pigeon_instance: BaseDisplayContainer): android.view.ViewGroup? {
    return pigeon_instance.getAdContainer()
  }

  override fun getCompanionSlots(pigeon_instance: BaseDisplayContainer): List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot> {
    return pigeon_instance.getCompanionSlots()
  }

  override fun registerFriendlyObstruction(pigeon_instance: BaseDisplayContainer,friendlyObstruction: com.google.ads.interactivemedia.v3.api.FriendlyObstruction) {
    return pigeon_instance.registerFriendlyObstruction(friendlyObstruction)
  }

  override fun setCompanionSlots(pigeon_instance: BaseDisplayContainer,companionSlots: List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>?) {
    return pigeon_instance.setCompanionSlots(companionSlots)
  }

  override fun unregisterAllFriendlyObstructions(pigeon_instance: BaseDisplayContainer) {
    return pigeon_instance.unregisterAllFriendlyObstructions()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class BaseDisplayContainerProxyApiTest {
  @Test
  fun getAdContainer() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val value = mock<ViewGroup>()
    whenever(instance.getAdContainer()).thenReturn(value)

    assertEquals(value, api.getAdContainer(instance ))
  }

  @Test
  fun getCompanionSlots() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val value = listOf(mock<CompanionAdSlot>())
    whenever(instance.getCompanionSlots()).thenReturn(value)

    assertEquals(value, api.getCompanionSlots(instance ))
  }

  @Test
  fun registerFriendlyObstruction() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val friendlyObstruction = mock<FriendlyObstruction>()
    api.registerFriendlyObstruction(instance, friendlyObstruction)

    verify(instance).registerFriendlyObstruction(friendlyObstruction)
  }

  @Test
  fun setCompanionSlots() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val companionSlots = listOf(mock<CompanionAdSlot>())
    api.setCompanionSlots(instance, companionSlots)

    verify(instance).setCompanionSlots(companionSlots)
  }

  @Test
  fun unregisterAllFriendlyObstructions() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    api.unregisterAllFriendlyObstructions(instance )

    verify(instance).unregisterAllFriendlyObstructions()
  }

}
*/
/**
 * A companion ad slot for which the SDK should retrieve ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAdSlot.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAdSlot(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Registers a listener for companion clicks. */
  abstract fun addClickListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
  )

  /** Returns the ViewGroup into which the companion will be rendered. */
  abstract fun getContainer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): android.view.ViewGroup

  /** Returns the height of the companion slot. */
  abstract fun getHeight(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): Long

  /** Returns the width of the companion slot. */
  abstract fun getWidth(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): Long

  /** Returns true if the companion slot is filled, false otherwise. */
  abstract fun isFilled(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): Boolean

  /** Removes a listener for companion clicks. */
  abstract fun removeClickListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
  )

  /**
   * Sets the ViewGroup into which the companion will be rendered.
   *
   * Required.
   */
  abstract fun setContainer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      container: android.view.ViewGroup
  )

  /**
   * Sets the size of the slot.
   *
   * Only companions matching the slot size will be displayed in the slot.
   */
  abstract fun setSize(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      width: Long,
      height: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCompanionAdSlot?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.addClickListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val clickListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
            val wrapped: List<Any?> =
                try {
                  api.addClickListener(pigeon_instanceArg, clickListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.getContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.getContainer(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.getHeight",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.getHeight(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.getWidth",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.getWidth(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.isFilled",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.isFilled(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.removeClickListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val clickListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
            val wrapped: List<Any?> =
                try {
                  api.removeClickListener(pigeon_instanceArg, clickListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.setContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val containerArg = args[1] as android.view.ViewGroup
            val wrapped: List<Any?> =
                try {
                  api.setContainer(pigeon_instanceArg, containerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.setSize",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val widthArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val heightArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setSize(pigeon_instanceArg, widthArg, heightArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CompanionAdSlot and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
import android.view.ViewGroup

/**
 * ProxyApi implementation for [CompanionAdSlot].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CompanionAdSlotProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCompanionAdSlot(pigeonRegistrar) {

  override fun addClickListener(pigeon_instance: CompanionAdSlot,clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener) {
    return pigeon_instance.addClickListener(clickListener)
  }

  override fun getContainer(pigeon_instance: CompanionAdSlot): android.view.ViewGroup {
    return pigeon_instance.getContainer()
  }

  override fun getHeight(pigeon_instance: CompanionAdSlot): Long {
    return pigeon_instance.getHeight()
  }

  override fun getWidth(pigeon_instance: CompanionAdSlot): Long {
    return pigeon_instance.getWidth()
  }

  override fun isFilled(pigeon_instance: CompanionAdSlot): Boolean {
    return pigeon_instance.isFilled()
  }

  override fun removeClickListener(pigeon_instance: CompanionAdSlot,clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener) {
    return pigeon_instance.removeClickListener(clickListener)
  }

  override fun setContainer(pigeon_instance: CompanionAdSlot,container: android.view.ViewGroup) {
    return pigeon_instance.setContainer(container)
  }

  override fun setSize(pigeon_instance: CompanionAdSlot,width: Long, height: Long) {
    return pigeon_instance.setSize(width, height)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
import android.view.ViewGroup
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class CompanionAdSlotProxyApiTest {
  @Test
  fun addClickListener() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val clickListener = mock<CompanionAdSlotClickListener>()
    api.addClickListener(instance, clickListener)

    verify(instance).addClickListener(clickListener)
  }

  @Test
  fun getContainer() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = mock<ViewGroup>()
    whenever(instance.getContainer()).thenReturn(value)

    assertEquals(value, api.getContainer(instance ))
  }

  @Test
  fun getHeight() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = 0
    whenever(instance.getHeight()).thenReturn(value)

    assertEquals(value, api.getHeight(instance ))
  }

  @Test
  fun getWidth() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = 0
    whenever(instance.getWidth()).thenReturn(value)

    assertEquals(value, api.getWidth(instance ))
  }

  @Test
  fun isFilled() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = true
    whenever(instance.isFilled()).thenReturn(value)

    assertEquals(value, api.isFilled(instance ))
  }

  @Test
  fun removeClickListener() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val clickListener = mock<CompanionAdSlotClickListener>()
    api.removeClickListener(instance, clickListener)

    verify(instance).removeClickListener(clickListener)
  }

  @Test
  fun setContainer() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val container = mock<ViewGroup>()
    api.setContainer(instance, container)

    verify(instance).setContainer(container)
  }

  @Test
  fun setSize() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val width = 0
    val height = 0
    api.setSize(instance, width, height)

    verify(instance).setSize(width, height)
  }

}
*/
/**
 * Listener interface for click events.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAdSlot.ClickListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAdSlotClickListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiCompanionAdSlotClickListener?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlotClickListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /**
   * Creates a Dart instance of CompanionAdSlotClickListener and attaches it to
   * [pigeon_instanceArg].
   */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of CompanionAdSlotClickListener, but the class has a nonnull callback method.")
  }

  /** Respond to a click on this companion ad slot. */
  fun onCompanionAdClick(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlotClickListener.onCompanionAdClick"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener

/**
 * ProxyApi implementation for [CompanionAdSlotClickListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CompanionAdSlotClickListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCompanionAdSlotClickListener(pigeonRegistrar) {
  internal class CompanionAdSlotClickListenerImpl(val api: CompanionAdSlotClickListenerProxyApi) : CompanionAdSlotClickListener {
    override fun onCompanionAdClick() {
      api.pigeonRegistrar.runOnMainThread { api.onCompanionAdClick(this ) {} }
    }
  }

  override fun pigeon_defaultConstructor(): CompanionAdSlotClickListener {
    return CompanionAdSlotClickListener()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class CompanionAdSlotClickListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlotClickListener()

    assertTrue(api.pigeon_defaultConstructor() is CompanionAdSlotClickListenerProxyApi.CompanionAdSlotClickListenerImpl)
  }

  @Test
  fun onCompanionAdClick() {
    val mockApi = mock<CompanionAdSlotClickListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = CompanionAdSlotClickListenerImpl(mockApi)
    instance.onCompanionAdClick()

    verify(mockApi).onCompanionAdClick(eq(instance) , any())
  }

}
*/
/**
 * An obstruction that is marked as "friendly" for viewability measurement purposes.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/FriendlyObstruction.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFriendlyObstruction(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The optional, detailed reasoning for registering this obstruction as friendly. */
  abstract fun detailedReason(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  ): String?

  /** The purpose for registering the obstruction as friendly. */
  abstract fun purpose(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  ): FriendlyObstructionPurpose

  /** The view causing the obstruction. */
  abstract fun view(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  ): android.view.View

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FriendlyObstruction and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.FriendlyObstruction,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val detailedReasonArg = detailedReason(pigeon_instanceArg)
    val purposeArg = purpose(pigeon_instanceArg)
    val viewArg = view(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.FriendlyObstruction.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, detailedReasonArg, purposeArg, viewArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import android.view.View

/**
 * ProxyApi implementation for [FriendlyObstruction].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class FriendlyObstructionProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiFriendlyObstruction(pigeonRegistrar) {

  override fun detailedReason(pigeon_instance: FriendlyObstruction): String? {
    return pigeon_instance.detailedReason
  }

  override fun purpose(pigeon_instance: FriendlyObstruction): FriendlyObstructionPurpose {
    return when (pigeon_instance.purpose) {
      FriendlyObstructionPurpose.CLOSE_AD -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.CLOSE_AD
      FriendlyObstructionPurpose.NOT_VISIBLE -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.NOT_VISIBLE
      FriendlyObstructionPurpose.OTHER -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.OTHER
      FriendlyObstructionPurpose.VIDEO_CONTROLS -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.VIDEO_CONTROLS
      else -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.UNKNOWN
    }
  }

  override fun view(pigeon_instance: FriendlyObstruction): android.view.View {
    return pigeon_instance.view
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import android.view.View
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class FriendlyObstructionProxyApiTest {
  @Test
  fun detailedReason() {
    val api = TestProxyApiRegistrar().getPigeonApiFriendlyObstruction()

    val instance = mock<FriendlyObstruction>()
    val value = "myString"
    whenever(instance.detailedReason).thenReturn(value)

    assertEquals(value, api.detailedReason(instance))
  }

  @Test
  fun purpose() {
    val api = TestProxyApiRegistrar().getPigeonApiFriendlyObstruction()

    val instance = mock<FriendlyObstruction>()
    val value = dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.CLOSE_AD
    whenever(instance.purpose).thenReturn(value)

    assertEquals(value, api.purpose(instance))
  }

  @Test
  fun view() {
    val api = TestProxyApiRegistrar().getPigeonApiFriendlyObstruction()

    val instance = mock<FriendlyObstruction>()
    val value = mock<View>()
    whenever(instance.view).thenReturn(value)

    assertEquals(value, api.view(instance))
  }

}
*/
/**
 * A container in which to display the ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdDisplayContainer.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiAdDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseDisplayContainer] used to access callback methods */
  fun pigeon_getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer {
    return pigeonRegistrar.getPigeonApiBaseDisplayContainer()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdDisplayContainer

/**
 * ProxyApi implementation for [AdDisplayContainer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdDisplayContainerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdDisplayContainer(pigeonRegistrar) {

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdDisplayContainer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdDisplayContainerProxyApiTest {
}
*/
/**
 * An object which allows publishers to request ads from ad servers or a dynamic ad insertion
 * stream.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoader(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Registers a listener for errors that occur during the ads request. */
  abstract fun addAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      listener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /** Registers a listener for the ads manager loaded event. */
  abstract fun addAdsLoadedListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      listener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
  )

  /** Requests ads from a server. */
  abstract fun requestAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      request: com.google.ads.interactivemedia.v3.api.AdsRequest
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsLoader?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val listenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.addAdErrorListener(pigeon_instanceArg, listenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdsLoadedListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val listenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
            val wrapped: List<Any?> =
                try {
                  api.addAdsLoadedListener(pigeon_instanceArg, listenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.requestAds",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val requestArg = args[1] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val wrapped: List<Any?> =
                try {
                  api.requestAds(pigeon_instanceArg, requestArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoader and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsRequest

/**
 * ProxyApi implementation for [AdsLoader].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsLoaderProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsLoader(pigeonRegistrar) {

  override fun addAdErrorListener(pigeon_instance: AdsLoader,listener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
    return pigeon_instance.addAdErrorListener(listener)
  }

  override fun addAdsLoadedListener(pigeon_instance: AdsLoader,listener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener) {
    return pigeon_instance.addAdsLoadedListener(listener)
  }

  override fun requestAds(pigeon_instance: AdsLoader,request: com.google.ads.interactivemedia.v3.api.AdsRequest) {
    return pigeon_instance.requestAds(request)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsRequest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdsLoaderProxyApiTest {
  @Test
  fun addAdErrorListener() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val listener = mock<AdErrorListener>()
    api.addAdErrorListener(instance, listener)

    verify(instance).addAdErrorListener(listener)
  }

  @Test
  fun addAdsLoadedListener() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val listener = mock<AdsLoadedListener>()
    api.addAdsLoadedListener(instance, listener)

    verify(instance).addAdsLoadedListener(listener)
  }

  @Test
  fun requestAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val request = mock<AdsRequest>()
    api.requestAds(instance, request)

    verify(instance).requestAds(request)
  }

}
*/
/**
 * An event raised when ads are successfully loaded from the ad server through an AdsLoader.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManagerLoadedEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManagerLoadedEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * The ads manager that will control playback of the loaded ads, or null when using dynamic ad
   * insertion.
   */
  abstract fun manager(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
  ): com.google.ads.interactivemedia.v3.api.AdsManager

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManagerLoadedEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val managerArg = manager(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, managerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
import com.google.ads.interactivemedia.v3.api.AdsManager

/**
 * ProxyApi implementation for [AdsManagerLoadedEvent].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsManagerLoadedEventProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsManagerLoadedEvent(pigeonRegistrar) {

  override fun manager(pigeon_instance: AdsManagerLoadedEvent): com.google.ads.interactivemedia.v3.api.AdsManager {
    return pigeon_instance.manager
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
import com.google.ads.interactivemedia.v3.api.AdsManager
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdsManagerLoadedEventProxyApiTest {
  @Test
  fun manager() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManagerLoadedEvent()

    val instance = mock<AdsManagerLoadedEvent>()
    val value = mock<AdsManager>()
    whenever(instance.manager).thenReturn(value)

    assertEquals(value, api.manager(instance))
  }

}
*/
/**
 * An event raised when there is an error loading or playing ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdErrorEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The AdError that caused this event. */
  abstract fun error(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdErrorEvent
  ): com.google.ads.interactivemedia.v3.api.AdError

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdErrorEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val errorArg = error(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent
import com.google.ads.interactivemedia.v3.api.AdError

/**
 * ProxyApi implementation for [AdErrorEvent].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdErrorEventProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdErrorEvent(pigeonRegistrar) {

  override fun error(pigeon_instance: AdErrorEvent): com.google.ads.interactivemedia.v3.api.AdError {
    return pigeon_instance.error
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent
import com.google.ads.interactivemedia.v3.api.AdError
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdErrorEventProxyApiTest {
  @Test
  fun error() {
    val api = TestProxyApiRegistrar().getPigeonApiAdErrorEvent()

    val instance = mock<AdErrorEvent>()
    val value = mock<AdError>()
    whenever(instance.error).thenReturn(value)

    assertEquals(value, api.error(instance))
  }

}
*/
/**
 * An error that occurred in the SDK.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdError(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The error's code. */
  abstract fun errorCode(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): AdErrorCode

  /** The error code's number. */
  abstract fun errorCodeNumber(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): Long

  /** The error's type. */
  abstract fun errorType(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): AdErrorType

  /** A human-readable summary of the error. */
  abstract fun message(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdError and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdError,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val errorCodeArg = errorCode(pigeon_instanceArg)
    val errorCodeNumberArg = errorCodeNumber(pigeon_instanceArg)
    val errorTypeArg = errorType(pigeon_instanceArg)
    val messageArg = message(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(pigeon_identifierArg, errorCodeArg, errorCodeNumberArg, errorTypeArg, messageArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdError

/**
 * ProxyApi implementation for [AdError].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdErrorProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdError(pigeonRegistrar) {

  override fun errorCode(pigeon_instance: AdError): AdErrorCode {
    return when (pigeon_instance.errorCode) {
      AdErrorCode.ADS_PLAYER_WAS_NOT_PROVIDED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.ADS_PLAYER_WAS_NOT_PROVIDED
      AdErrorCode.ADS_REQUEST_NETWORK_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.ADS_REQUEST_NETWORK_ERROR
      AdErrorCode.COMPANION_AD_LOADING_FAILED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.COMPANION_AD_LOADING_FAILED
      AdErrorCode.FAILED_TO_REQUEST_ADS -> dev.flutter.packages.interactive_media_ads.AdErrorCode.FAILED_TO_REQUEST_ADS
      AdErrorCode.INTERNAL_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.INTERNAL_ERROR
      AdErrorCode.INVALID_ARGUMENTS -> dev.flutter.packages.interactive_media_ads.AdErrorCode.INVALID_ARGUMENTS
      AdErrorCode.OVERLAY_AD_LOADING_FAILED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.OVERLAY_AD_LOADING_FAILED
      AdErrorCode.OVERLAY_AD_PLAYING_FAILED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.OVERLAY_AD_PLAYING_FAILED
      AdErrorCode.PLAYLIST_NO_CONTENT_TRACKING -> dev.flutter.packages.interactive_media_ads.AdErrorCode.PLAYLIST_NO_CONTENT_TRACKING
      AdErrorCode.UNEXPECTED_ADS_LOADED_EVENT -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNEXPECTED_ADS_LOADED_EVENT
      AdErrorCode.UNKNOWN_AD_RESPONSE -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNKNOWN_AD_RESPONSE
      AdErrorCode.UNKNOWN_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNKNOWN_ERROR
      AdErrorCode.VAST_ASSET_NOT_FOUND -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_ASSET_NOT_FOUND
      AdErrorCode.VAST_EMPTY_RESPONSE -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_EMPTY_RESPONSE
      AdErrorCode.VAST_LINEAR_ASSET_MISMATCH -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_LINEAR_ASSET_MISMATCH
      AdErrorCode.VAST_LOAD_TIMEOUT -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_LOAD_TIMEOUT
      AdErrorCode.VAST_MALFORMED_RESPONSE -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_MALFORMED_RESPONSE
      AdErrorCode.VAST_MEDIA_LOAD_TIMEOUT -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_MEDIA_LOAD_TIMEOUT
      AdErrorCode.VAST_NONLINEAR_ASSET_MISMATCH -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_NONLINEAR_ASSET_MISMATCH
      AdErrorCode.VAST_NO_ADS_AFTER_WRAPPER -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_NO_ADS_AFTER_WRAPPER
      AdErrorCode.VAST_TOO_MANY_REDIRECTS -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_TOO_MANY_REDIRECTS
      AdErrorCode.VAST_TRAFFICKING_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_TRAFFICKING_ERROR
      AdErrorCode.VIDEO_PLAY_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VIDEO_PLAY_ERROR
      else -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNKNOWN
    }
  }

  override fun errorCodeNumber(pigeon_instance: AdError): Long {
    return pigeon_instance.errorCodeNumber
  }

  override fun errorType(pigeon_instance: AdError): AdErrorType {
    return when (pigeon_instance.errorType) {
      AdErrorType.LOAD -> dev.flutter.packages.interactive_media_ads.AdErrorType.LOAD
      AdErrorType.PLAY -> dev.flutter.packages.interactive_media_ads.AdErrorType.PLAY
      else -> dev.flutter.packages.interactive_media_ads.AdErrorType.UNKNOWN
    }
  }

  override fun message(pigeon_instance: AdError): String {
    return pigeon_instance.message
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdError
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdErrorProxyApiTest {
  @Test
  fun errorCode() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = dev.flutter.packages.interactive_media_ads.AdErrorCode.ADS_PLAYER_WAS_NOT_PROVIDED
    whenever(instance.errorCode).thenReturn(value)

    assertEquals(value, api.errorCode(instance))
  }

  @Test
  fun errorCodeNumber() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = 0
    whenever(instance.errorCodeNumber).thenReturn(value)

    assertEquals(value, api.errorCodeNumber(instance))
  }

  @Test
  fun errorType() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = dev.flutter.packages.interactive_media_ads.AdErrorType.LOAD
    whenever(instance.errorType).thenReturn(value)

    assertEquals(value, api.errorType(instance))
  }

  @Test
  fun message() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = "myString"
    whenever(instance.message).thenReturn(value)

    assertEquals(value, api.message(instance))
  }

}
*/
/**
 * An object containing the data used to request ads from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRequest.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsRequest(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Sets the URL from which ads will be requested. */
  abstract fun setAdTagUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      adTagUrl: String
  )

  /**
   * Attaches a ContentProgressProvider instance to allow scheduling ad breaks based on content
   * progress (cue points).
   */
  abstract fun setContentProgressProvider(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      provider: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsRequest?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdTagUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val adTagUrlArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setAdTagUrl(pigeon_instanceArg, adTagUrlArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentProgressProvider",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val providerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
            val wrapped: List<Any?> =
                try {
                  api.setContentProgressProvider(pigeon_instanceArg, providerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsRequest and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsRequest,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider

/**
 * ProxyApi implementation for [AdsRequest].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsRequestProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsRequest(pigeonRegistrar) {

  override fun setAdTagUrl(pigeon_instance: AdsRequest,adTagUrl: String) {
    return pigeon_instance.setAdTagUrl(adTagUrl)
  }

  override fun setContentProgressProvider(pigeon_instance: AdsRequest,provider: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider) {
    return pigeon_instance.setContentProgressProvider(provider)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdsRequestProxyApiTest {
  @Test
  fun setAdTagUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val adTagUrl = "myString"
    api.setAdTagUrl(instance, adTagUrl)

    verify(instance).setAdTagUrl(adTagUrl)
  }

  @Test
  fun setContentProgressProvider() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val provider = mock<ContentProgressProvider>()
    api.setContentProgressProvider(instance, provider)

    verify(instance).setContentProgressProvider(provider)
  }

}
*/
/**
 * Defines an interface to allow SDK to track progress of the content video.
 *
 * See
 * https://developers.google.com/ad-manager/dynamic-ad-insertion/sdk/android/api/reference/com/google/ads/interactivemedia/v3/api/player/ContentProgressProvider.html.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiContentProgressProvider(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ContentProgressProvider and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider

/**
 * ProxyApi implementation for [ContentProgressProvider].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ContentProgressProviderProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiContentProgressProvider(pigeonRegistrar) {

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class ContentProgressProviderProxyApiTest {
}
*/
/**
 * An object which handles playing ads after they've been received from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManager.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManager(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Discards current ad break and resumes content. */
  abstract fun discardAdBreak(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /** Pauses the current ad. */
  abstract fun pause(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /** Starts playing the ads. */
  abstract fun start(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.discardAdBreak",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.discardAdBreak(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.pause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.start", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.start(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseManager] used to access callback methods */
  fun pigeon_getPigeonApiBaseManager(): PigeonApiBaseManager {
    return pigeonRegistrar.getPigeonApiBaseManager()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManager

/**
 * ProxyApi implementation for [AdsManager].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsManagerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsManager(pigeonRegistrar) {

  override fun discardAdBreak(pigeon_instance: AdsManager) {
    return pigeon_instance.discardAdBreak()
  }

  override fun pause(pigeon_instance: AdsManager) {
    return pigeon_instance.pause()
  }

  override fun start(pigeon_instance: AdsManager) {
    return pigeon_instance.start()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManager
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdsManagerProxyApiTest {
  @Test
  fun discardAdBreak() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.discardAdBreak(instance )

    verify(instance).discardAdBreak()
  }

  @Test
  fun pause() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.pause(instance )

    verify(instance).pause()
  }

  @Test
  fun start() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.start(instance )

    verify(instance).start()
  }

}
*/
/**
 * Base interface for managing ads..
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseManager.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseManager(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Registers a listener for errors that occur during the ad or stream initialization and playback.
   */
  abstract fun addAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /**
   * Registers a listener for ad events that occur during ad or stream initialization and playback.
   */
  abstract fun addAdEventListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
  )

  /** Stops the ad and all tracking, then releases all assets that were loaded to play the ad. */
  abstract fun destroy(pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager)

  /** Initializes the ad experience using default rendering settings */
  abstract fun init(pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBaseManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val errorListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.addAdErrorListener(pigeon_instanceArg, errorListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdEventListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val adEventListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
            val wrapped: List<Any?> =
                try {
                  api.addAdEventListener(pigeon_instanceArg, adEventListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.destroy",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  api.destroy(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.BaseManager.init", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  api.init(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.BaseManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseManager
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener

/**
 * ProxyApi implementation for [BaseManager].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class BaseManagerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiBaseManager(pigeonRegistrar) {

  override fun addAdErrorListener(pigeon_instance: BaseManager,errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
    return pigeon_instance.addAdErrorListener(errorListener)
  }

  override fun addAdEventListener(pigeon_instance: BaseManager,adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener) {
    return pigeon_instance.addAdEventListener(adEventListener)
  }

  override fun destroy(pigeon_instance: BaseManager) {
    return pigeon_instance.destroy()
  }

  override fun init(pigeon_instance: BaseManager) {
    return pigeon_instance.init()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseManager
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class BaseManagerProxyApiTest {
  @Test
  fun addAdErrorListener() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val errorListener = mock<AdErrorListener>()
    api.addAdErrorListener(instance, errorListener)

    verify(instance).addAdErrorListener(errorListener)
  }

  @Test
  fun addAdEventListener() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val adEventListener = mock<AdEventListener>()
    api.addAdEventListener(instance, adEventListener)

    verify(instance).addAdEventListener(adEventListener)
  }

  @Test
  fun destroy() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    api.destroy(instance )

    verify(instance).destroy()
  }

  @Test
  fun init() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    api.init(instance )

    verify(instance).init()
  }

}
*/
/**
 * Event to notify publisher that an event occurred with an Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The type of event that occurred. */
  abstract fun type(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent): AdEventType

  /** A map containing any extra ad data for the event, if needed. */
  abstract fun adData(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent
  ): Map<String, String>?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val adDataArg = adData(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, adDataArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent

/**
 * ProxyApi implementation for [AdEvent].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdEventProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdEvent(pigeonRegistrar) {

  override fun type(pigeon_instance: AdEvent): AdEventType {
    return when (pigeon_instance.type) {
      AdEventType.AD_BREAK_ENDED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_ENDED
      AdEventType.AD_BREAK_FETCH_ERROR -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_FETCH_ERROR
      AdEventType.AD_BREAK_READY -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_READY
      AdEventType.AD_BREAK_STARTED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_STARTED
      AdEventType.AD_BUFFERING -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BUFFERING
      AdEventType.AD_PERIOD_ENDED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_PERIOD_ENDED
      AdEventType.AD_PERIOD_STARTED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_PERIOD_STARTED
      AdEventType.AD_PROGRESS -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_PROGRESS
      AdEventType.ALL_ADS_COMPLETED -> dev.flutter.packages.interactive_media_ads.AdEventType.ALL_ADS_COMPLETED
      AdEventType.CLICKED -> dev.flutter.packages.interactive_media_ads.AdEventType.CLICKED
      AdEventType.COMPLETED -> dev.flutter.packages.interactive_media_ads.AdEventType.COMPLETED
      AdEventType.CONTENT_PAUSE_REQUESTED -> dev.flutter.packages.interactive_media_ads.AdEventType.CONTENT_PAUSE_REQUESTED
      AdEventType.CONTENT_RESUME_REQUESTED -> dev.flutter.packages.interactive_media_ads.AdEventType.CONTENT_RESUME_REQUESTED
      AdEventType.CUEPOINTS_CHANGED -> dev.flutter.packages.interactive_media_ads.AdEventType.CUEPOINTS_CHANGED
      AdEventType.FIRST_QUARTILE -> dev.flutter.packages.interactive_media_ads.AdEventType.FIRST_QUARTILE
      AdEventType.ICON_FALLBACK_IMAGE_CLOSED -> dev.flutter.packages.interactive_media_ads.AdEventType.ICON_FALLBACK_IMAGE_CLOSED
      AdEventType.ICON_TAPPED -> dev.flutter.packages.interactive_media_ads.AdEventType.ICON_TAPPED
      AdEventType.LOADED -> dev.flutter.packages.interactive_media_ads.AdEventType.LOADED
      AdEventType.LOG -> dev.flutter.packages.interactive_media_ads.AdEventType.LOG
      AdEventType.MIDPOINT -> dev.flutter.packages.interactive_media_ads.AdEventType.MIDPOINT
      AdEventType.PAUSED -> dev.flutter.packages.interactive_media_ads.AdEventType.PAUSED
      AdEventType.RESUMED -> dev.flutter.packages.interactive_media_ads.AdEventType.RESUMED
      AdEventType.SKIPPABLE_STATE_CHANGED -> dev.flutter.packages.interactive_media_ads.AdEventType.SKIPPABLE_STATE_CHANGED
      AdEventType.SKIPPED -> dev.flutter.packages.interactive_media_ads.AdEventType.SKIPPED
      AdEventType.STARTED -> dev.flutter.packages.interactive_media_ads.AdEventType.STARTED
      AdEventType.TAPPED -> dev.flutter.packages.interactive_media_ads.AdEventType.TAPPED
      AdEventType.THIRD_QUARTILE -> dev.flutter.packages.interactive_media_ads.AdEventType.THIRD_QUARTILE
      else -> dev.flutter.packages.interactive_media_ads.AdEventType.UNKNOWN
    }
  }

  override fun adData(pigeon_instance: AdEvent): Map<String, String>? {
    return pigeon_instance.adData
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdEventProxyApiTest {
  @Test
  fun type() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEvent()

    val instance = mock<AdEvent>()
    val value = dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_ENDED
    whenever(instance.type).thenReturn(value)

    assertEquals(value, api.type(instance))
  }

  @Test
  fun adData() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEvent()

    val instance = mock<AdEvent>()
    val value = mapOf("myString" to "myString"})
    whenever(instance.adData).thenReturn(value)

    assertEquals(value, api.adData(instance))
  }

}
*/
/**
 * Factory class for creating SDK objects.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkFactory.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImaSdkFactory(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun instance(): com.google.ads.interactivemedia.v3.api.ImaSdkFactory

  abstract fun createAdDisplayContainer(
      container: android.view.ViewGroup,
      player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
  ): com.google.ads.interactivemedia.v3.api.AdDisplayContainer

  /** Creates an `ImaSdkSettings` object for configuring the IMA SDK. */
  abstract fun createImaSdkSettings(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.ImaSdkSettings

  /** Creates an `AdsLoader` for requesting ads using the specified settings object. */
  abstract fun createAdsLoader(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      container: com.google.ads.interactivemedia.v3.api.AdDisplayContainer
  ): com.google.ads.interactivemedia.v3.api.AdsLoader

  /** Creates an AdsRequest object to contain the data used to request ads. */
  abstract fun createAdsRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.AdsRequest

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImaSdkFactory?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.instance",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.instance(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdDisplayContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val containerArg = args[0] as android.view.ViewGroup
            val playerArg = args[1] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdDisplayContainer(containerArg, playerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createImaSdkSettings",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createImaSdkSettings(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsLoader",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val settingsArg = args[1] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val containerArg = args[2] as com.google.ads.interactivemedia.v3.api.AdDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsLoader(pigeon_instanceArg, settingsArg, containerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsRequest(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkFactory and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkFactory
import android.view.ViewGroup
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import com.google.ads.interactivemedia.v3.api.AdDisplayContainer

/**
 * ProxyApi implementation for [ImaSdkFactory].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ImaSdkFactoryProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiImaSdkFactory(pigeonRegistrar) {

  override fun instance(): com.google.ads.interactivemedia.v3.api.ImaSdkFactory {
    return ImaSdkFactory.instance
  }

  override fun createAdDisplayContainer(container: android.view.ViewGroup, player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer): com.google.ads.interactivemedia.v3.api.AdDisplayContainer {
    return ImaSdkFactory.createAdDisplayContainer(container, player)
  }

  override fun createImaSdkSettings(pigeon_instance: ImaSdkFactory): com.google.ads.interactivemedia.v3.api.ImaSdkSettings {
    return pigeon_instance.createImaSdkSettings()
  }

  override fun createAdsLoader(pigeon_instance: ImaSdkFactory,settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings, container: com.google.ads.interactivemedia.v3.api.AdDisplayContainer): com.google.ads.interactivemedia.v3.api.AdsLoader {
    return pigeon_instance.createAdsLoader(settings, container)
  }

  override fun createAdsRequest(pigeon_instance: ImaSdkFactory): com.google.ads.interactivemedia.v3.api.AdsRequest {
    return pigeon_instance.createAdsRequest()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkFactory
import android.view.ViewGroup
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import com.google.ads.interactivemedia.v3.api.AdDisplayContainer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class ImaSdkFactoryProxyApiTest {
  @Test
  fun createImaSdkSettings() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val value = mock<ImaSdkSettings>()
    whenever(instance.createImaSdkSettings()).thenReturn(value)

    assertEquals(value, api.createImaSdkSettings(instance ))
  }

  @Test
  fun createAdsLoader() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val settings = mock<ImaSdkSettings>()
    val container = mock<AdDisplayContainer>()
    val value = mock<AdsLoader>()
    whenever(instance.createAdsLoader(settings, container)).thenReturn(value)

    assertEquals(value, api.createAdsLoader(instance, settings, container))
  }

  @Test
  fun createAdsRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val value = mock<AdsRequest>()
    whenever(instance.createAdsRequest()).thenReturn(value)

    assertEquals(value, api.createAdsRequest(instance ))
  }

}
*/
/**
 * Defines general SDK settings that are used when creating an `AdsLoader`.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkSettings.html.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiImaSdkSettings(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkSettings and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkSettings

/**
 * ProxyApi implementation for [ImaSdkSettings].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ImaSdkSettingsProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiImaSdkSettings(pigeonRegistrar) {

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class ImaSdkSettingsProxyApiTest {
}
*/
/**
 * Defines an update to the video's progress.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoProgressUpdate.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoProgressUpdate(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(
      currentTimeMs: Long,
      durationMs: Long
  ): com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  /** Value to use for cases when progress is not yet defined, such as video initialization. */
  abstract fun videoTimeNotReady():
      com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoProgressUpdate?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val currentTimeMsArg =
                args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val durationMsArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(currentTimeMsArg, durationMsArg),
                      pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.videoTimeNotReady",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.videoTimeNotReady(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoProgressUpdate and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoProgressUpdate].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoProgressUpdateProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoProgressUpdate(pigeonRegistrar) {

  override fun pigeon_defaultConstructor(currentTimeMs: Long, durationMs: Long): VideoProgressUpdate {
    return VideoProgressUpdate(currentTimeMs, durationMs)
  }

  override fun videoTimeNotReady(): com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate {
    return VideoProgressUpdate.videoTimeNotReady
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class VideoProgressUpdateProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoProgressUpdate()

    assertTrue(api.pigeon_defaultConstructor(0, 0) is VideoProgressUpdateProxyApi.VideoProgressUpdate)
  }

}
*/
/**
 * The minimal information required to play an ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/AdMediaInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdMediaInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun url(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdMediaInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val urlArg = url(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo

/**
 * ProxyApi implementation for [AdMediaInfo].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdMediaInfoProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdMediaInfo(pigeonRegistrar) {

  override fun url(pigeon_instance: AdMediaInfo): String {
    return pigeon_instance.url
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdMediaInfoProxyApiTest {
  @Test
  fun url() {
    val api = TestProxyApiRegistrar().getPigeonApiAdMediaInfo()

    val instance = mock<AdMediaInfo>()
    val value = "myString"
    whenever(instance.url).thenReturn(value)

    assertEquals(value, api.url(instance))
  }

}
*/
/**
 * An ad may be part of a pod of ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdPodInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdPodInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * The position of the ad within the pod.
   *
   * The value returned is one-based, for example, 1 of 2, 2 of 2, etc. If the ad is not part of a
   * pod, this will return 1.
   */
  abstract fun adPosition(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The maximum duration of the pod in seconds.
   *
   * For unknown duration, -1 is returned.
   */
  abstract fun maxDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo
  ): Double

  /** Client side and DAI VOD: Returns the index of the ad pod. */
  abstract fun podIndex(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The content time offset at which the current ad pod was scheduled.
   *
   * For preroll pod, 0 is returned. For midrolls, the scheduled time is returned in seconds. For
   * postroll, -1 is returned. Defaults to 0 if this ad is not part of a pod, or the pod is not part
   * of an ad playlist.
   */
  abstract fun timeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Double

  /** The total number of ads contained within this pod, including bumpers. */
  abstract fun totalAds(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /** Returns true if the ad is a bumper ad. */
  abstract fun isBumper(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdPodInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adPositionArg = adPosition(pigeon_instanceArg)
    val maxDurationArg = maxDuration(pigeon_instanceArg)
    val podIndexArg = podIndex(pigeon_instanceArg)
    val timeOffsetArg = timeOffset(pigeon_instanceArg)
    val totalAdsArg = totalAds(pigeon_instanceArg)
    val isBumperArg = isBumper(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adPositionArg,
            maxDurationArg,
            podIndexArg,
            timeOffsetArg,
            totalAdsArg,
            isBumperArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdPodInfo

/**
 * ProxyApi implementation for [AdPodInfo].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdPodInfoProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdPodInfo(pigeonRegistrar) {

  override fun adPosition(pigeon_instance: AdPodInfo): Long {
    return pigeon_instance.adPosition
  }

  override fun maxDuration(pigeon_instance: AdPodInfo): Double {
    return pigeon_instance.maxDuration
  }

  override fun podIndex(pigeon_instance: AdPodInfo): Long {
    return pigeon_instance.podIndex
  }

  override fun timeOffset(pigeon_instance: AdPodInfo): Double {
    return pigeon_instance.timeOffset
  }

  override fun totalAds(pigeon_instance: AdPodInfo): Long {
    return pigeon_instance.totalAds
  }

  override fun isBumper(pigeon_instance: AdPodInfo): Boolean {
    return pigeon_instance.isBumper
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdPodInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdPodInfoProxyApiTest {
  @Test
  fun adPosition() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 0
    whenever(instance.adPosition).thenReturn(value)

    assertEquals(value, api.adPosition(instance))
  }

  @Test
  fun maxDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 1.0
    whenever(instance.maxDuration).thenReturn(value)

    assertEquals(value, api.maxDuration(instance))
  }

  @Test
  fun podIndex() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 0
    whenever(instance.podIndex).thenReturn(value)

    assertEquals(value, api.podIndex(instance))
  }

  @Test
  fun timeOffset() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 1.0
    whenever(instance.timeOffset).thenReturn(value)

    assertEquals(value, api.timeOffset(instance))
  }

  @Test
  fun totalAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 0
    whenever(instance.totalAds).thenReturn(value)

    assertEquals(value, api.totalAds(instance))
  }

  @Test
  fun isBumper() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = true
    whenever(instance.isBumper).thenReturn(value)

    assertEquals(value, api.isBumper(instance))
  }

}
*/
/**
 * FrameLayout is designed to block out an area on the screen to display a single item.
 *
 * See https://developer.android.com/reference/android/widget/FrameLayout.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFrameLayout(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(): android.widget.FrameLayout

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFrameLayout?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FrameLayout and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.FrameLayout,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiViewGroup] used to access callback methods */
  fun pigeon_getPigeonApiViewGroup(): PigeonApiViewGroup {
    return pigeonRegistrar.getPigeonApiViewGroup()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.FrameLayout

/**
 * ProxyApi implementation for [FrameLayout].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class FrameLayoutProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiFrameLayout(pigeonRegistrar) {

  override fun pigeon_defaultConstructor(): FrameLayout {
    return FrameLayout()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.FrameLayout
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class FrameLayoutProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiFrameLayout()

    assertTrue(api.pigeon_defaultConstructor() is FrameLayoutProxyApi.FrameLayoutImpl)
  }

}
*/
/**
 * A special view that can contain other views (called children.)
 *
 * See https://developer.android.com/reference/android/view/ViewGroup.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiViewGroup(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun addView(pigeon_instance: android.view.ViewGroup, view: android.view.View)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiViewGroup?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ViewGroup.addView",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.view.ViewGroup
            val viewArg = args[1] as android.view.View
            val wrapped: List<Any?> =
                try {
                  api.addView(pigeon_instanceArg, viewArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ViewGroup and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.view.ViewGroup,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.ViewGroup
import android.view.View

/**
 * ProxyApi implementation for [ViewGroup].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ViewGroupProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiViewGroup(pigeonRegistrar) {

  override fun addView(pigeon_instance: ViewGroup,view: android.view.View) {
    return pigeon_instance.addView(view)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.ViewGroup
import android.view.View
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class ViewGroupProxyApiTest {
  @Test
  fun addView() {
    val api = TestProxyApiRegistrar().getPigeonApiViewGroup()

    val instance = mock<ViewGroup>()
    val view = mock<View>()
    api.addView(instance, view)

    verify(instance).addView(view)
  }

}
*/
/**
 * Displays a video file.
 *
 * See https://developer.android.com/reference/android/widget/VideoView.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoView(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(): android.widget.VideoView

  /** Sets the URI of the video. */
  abstract fun setVideoUri(pigeon_instance: android.widget.VideoView, uri: String)

  /**
   * The current position of the playing video.
   *
   * In milliseconds.
   */
  abstract fun getCurrentPosition(pigeon_instance: android.widget.VideoView): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoView?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.setVideoUri",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.widget.VideoView
            val uriArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setVideoUri(pigeon_instanceArg, uriArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.getCurrentPosition",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.widget.VideoView
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCurrentPosition(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoView and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.VideoView,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoView, but the class has a nonnull callback method.")
  }

  /** Callback to be invoked when the media source is ready for playback. */
  fun onPrepared(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Callback to be invoked when playback of a media source has completed. */
  fun onCompletion(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Callback to be invoked when there has been an error during an asynchronous operation. */
  fun onError(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      whatArg: Long,
      extraArg: Long,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg, whatArg, extraArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.VideoView
import android.media.MediaPlayer

/**
 * ProxyApi implementation for [VideoView].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoViewProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoView(pigeonRegistrar) {
  internal class VideoViewImpl(val api: VideoViewProxyApi) : VideoView {
    override fun onPrepared(player: android.media.MediaPlayer) {
      api.pigeonRegistrar.runOnMainThread { api.onPrepared(this, player) {} }
    }
    override fun onCompletion(player: android.media.MediaPlayer) {
      api.pigeonRegistrar.runOnMainThread { api.onCompletion(this, player) {} }
    }
    override fun onError(player: android.media.MediaPlayer, what: Long, extra: Long) {
      api.pigeonRegistrar.runOnMainThread { api.onError(this, player, what, extra) {} }
    }
  }

  override fun pigeon_defaultConstructor(): VideoView {
    return VideoView()
  }

  override fun setVideoUri(pigeon_instance: VideoView,uri: String) {
    return pigeon_instance.setVideoUri(uri)
  }

  override fun getCurrentPosition(pigeon_instance: VideoView): Long {
    return pigeon_instance.getCurrentPosition()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.VideoView
import android.media.MediaPlayer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class VideoViewProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoView()

    assertTrue(api.pigeon_defaultConstructor() is VideoViewProxyApi.VideoView)
  }

  @Test
  fun setVideoUri() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoView()

    val instance = mock<VideoView>()
    val uri = "myString"
    api.setVideoUri(instance, uri)

    verify(instance).setVideoUri(uri)
  }

  @Test
  fun getCurrentPosition() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoView()

    val instance = mock<VideoView>()
    val value = 0
    whenever(instance.getCurrentPosition()).thenReturn(value)

    assertEquals(value, api.getCurrentPosition(instance ))
  }

  @Test
  fun onPrepared() {
    val mockApi = mock<VideoViewProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoViewImpl(mockApi)
    val player = mock<MediaPlayer>()
    instance.onPrepared(player)

    verify(mockApi).onPrepared(eq(instance), eq(player), any())
  }

  @Test
  fun onCompletion() {
    val mockApi = mock<VideoViewProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoViewImpl(mockApi)
    val player = mock<MediaPlayer>()
    instance.onCompletion(player)

    verify(mockApi).onCompletion(eq(instance), eq(player), any())
  }

  @Test
  fun onError() {
    val mockApi = mock<VideoViewProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoViewImpl(mockApi)
    val player = mock<MediaPlayer>()
    val what = 0
    val extra = 0
    instance.onError(player, what, extra)

    verify(mockApi).onError(eq(instance), eq(player), eq(what), eq(extra), any())
  }

}
*/
/**
 * This class represents the basic building block for user interface components.
 *
 * See https://developer.android.com/reference/android/view/View.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiView(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of View and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.view.View, callback: (Result<Unit>) -> Unit) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.View

/**
 * ProxyApi implementation for [View].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ViewProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiView(pigeonRegistrar) {

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.View
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class ViewProxyApiTest {
}
*/
/**
 * MediaPlayer class can be used to control playback of audio/video files and streams.
 *
 * See https://developer.android.com/reference/android/media/MediaPlayer.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMediaPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Gets the duration of the file. */
  abstract fun getDuration(pigeon_instance: android.media.MediaPlayer): Long

  /** Seeks to specified time position. */
  abstract fun seekTo(pigeon_instance: android.media.MediaPlayer, mSec: Long)

  /** Starts or resumes playback. */
  abstract fun start(pigeon_instance: android.media.MediaPlayer)

  /** Pauses playback. */
  abstract fun pause(pigeon_instance: android.media.MediaPlayer)

  /** Stops playback after playback has been started or paused. */
  abstract fun stop(pigeon_instance: android.media.MediaPlayer)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMediaPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.getDuration",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getDuration(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.seekTo",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val mSecArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.seekTo(pigeon_instanceArg, mSecArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.start",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.start(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.pause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.stop", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.stop(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MediaPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.media.MediaPlayer

/**
 * ProxyApi implementation for [MediaPlayer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class MediaPlayerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiMediaPlayer(pigeonRegistrar) {

  override fun getDuration(pigeon_instance: MediaPlayer): Long {
    return pigeon_instance.getDuration()
  }

  override fun seekTo(pigeon_instance: MediaPlayer,mSec: Long) {
    return pigeon_instance.seekTo(mSec)
  }

  override fun start(pigeon_instance: MediaPlayer) {
    return pigeon_instance.start()
  }

  override fun pause(pigeon_instance: MediaPlayer) {
    return pigeon_instance.pause()
  }

  override fun stop(pigeon_instance: MediaPlayer) {
    return pigeon_instance.stop()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.media.MediaPlayer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class MediaPlayerProxyApiTest {
  @Test
  fun getDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    val value = 0
    whenever(instance.getDuration()).thenReturn(value)

    assertEquals(value, api.getDuration(instance ))
  }

  @Test
  fun seekTo() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    val mSec = 0
    api.seekTo(instance, mSec)

    verify(instance).seekTo(mSec)
  }

  @Test
  fun start() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    api.start(instance )

    verify(instance).start()
  }

  @Test
  fun pause() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    api.pause(instance )

    verify(instance).pause()
  }

  @Test
  fun stop() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    api.stop(instance )

    verify(instance).stop()
  }

}
*/
/**
 * Callbacks that the player must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.VideoAdPlayerCallback.html
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayerCallback(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Fire this callback periodically as ad playback occurs. */
  abstract fun onAdProgress(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      videoProgressUpdate: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  /** Fire this callback when video playback stalls waiting for data. */
  abstract fun onBuffering(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when all content has finished playing. */
  abstract fun onContentComplete(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
  )

  /** Fire this callback when the video finishes playing. */
  abstract fun onEnded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video has encountered an error. */
  abstract fun onError(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is ready to begin playback. */
  abstract fun onLoaded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is paused. */
  abstract fun onPause(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the player begins playing a video. */
  abstract fun onPlay(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is unpaused. */
  abstract fun onResume(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the playback volume changes. */
  abstract fun onVolumeChanged(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      percentage: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiVideoAdPlayerCallback?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val videoProgressUpdateArg =
                args[2] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.onAdProgress(pigeon_instanceArg, adMediaInfoArg, videoProgressUpdateArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onBuffering",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onBuffering(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onContentComplete",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val wrapped: List<Any?> =
                try {
                  api.onContentComplete(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onEnded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onEnded(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onError",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onError(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onLoaded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onLoaded(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onPause(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPlay",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onPlay(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onResume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onResume(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onVolumeChanged",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val percentageArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.onVolumeChanged(pigeon_instanceArg, adMediaInfoArg, percentageArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayerCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoAdPlayerCallback].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoAdPlayerCallbackProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoAdPlayerCallback(pigeonRegistrar) {

  override fun onAdProgress(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo, videoProgressUpdate: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
    return pigeon_instance.onAdProgress(adMediaInfo, videoProgressUpdate)
  }

  override fun onBuffering(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onBuffering(adMediaInfo)
  }

  override fun onContentComplete(pigeon_instance: VideoAdPlayerCallback) {
    return pigeon_instance.onContentComplete()
  }

  override fun onEnded(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onEnded(adMediaInfo)
  }

  override fun onError(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onError(adMediaInfo)
  }

  override fun onLoaded(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onLoaded(adMediaInfo)
  }

  override fun onPause(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onPause(adMediaInfo)
  }

  override fun onPlay(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onPlay(adMediaInfo)
  }

  override fun onResume(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    return pigeon_instance.onResume(adMediaInfo)
  }

  override fun onVolumeChanged(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo, percentage: Long) {
    return pigeon_instance.onVolumeChanged(adMediaInfo, percentage)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class VideoAdPlayerCallbackProxyApiTest {
  @Test
  fun onAdProgress() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    val videoProgressUpdate = mock<VideoProgressUpdate>()
    api.onAdProgress(instance, adMediaInfo, videoProgressUpdate)

    verify(instance).onAdProgress(adMediaInfo, videoProgressUpdate)
  }

  @Test
  fun onBuffering() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onBuffering(instance, adMediaInfo)

    verify(instance).onBuffering(adMediaInfo)
  }

  @Test
  fun onContentComplete() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    api.onContentComplete(instance )

    verify(instance).onContentComplete()
  }

  @Test
  fun onEnded() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onEnded(instance, adMediaInfo)

    verify(instance).onEnded(adMediaInfo)
  }

  @Test
  fun onError() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onError(instance, adMediaInfo)

    verify(instance).onError(adMediaInfo)
  }

  @Test
  fun onLoaded() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onLoaded(instance, adMediaInfo)

    verify(instance).onLoaded(adMediaInfo)
  }

  @Test
  fun onPause() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onPause(instance, adMediaInfo)

    verify(instance).onPause(adMediaInfo)
  }

  @Test
  fun onPlay() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onPlay(instance, adMediaInfo)

    verify(instance).onPlay(adMediaInfo)
  }

  @Test
  fun onResume() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onResume(instance, adMediaInfo)

    verify(instance).onResume(adMediaInfo)
  }

  @Test
  fun onVolumeChanged() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    val percentage = 0
    api.onVolumeChanged(instance, adMediaInfo, percentage)

    verify(instance).onVolumeChanged(adMediaInfo, percentage)
  }

}
*/
/**
 * Defines the set of methods that a video player must implement to be used by the IMA SDK, as well
 * as a set of callbacks that it must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer

  /** The volume of the player as a percentage from 0 to 100. */
  abstract fun setVolume(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      value: Long
  )

  /** The `VideoProgressUpdate` describing playback progress of the current video. */
  abstract fun setAdProgress(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoAdPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setVolume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val valueArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setVolume(pigeon_instanceArg, valueArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val progressArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.setAdProgress(pigeon_instanceArg, progressArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoAdPlayer, but the class has a nonnull callback method.")
  }

  /** Adds a callback. */
  fun addCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Loads a video ad hosted at AdMediaInfo. */
  fun loadAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      adPodInfoArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg, adPodInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Pauses playing the current ad. */
  fun pauseAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /**
   * Starts or resumes playing the video ad referenced by the AdMediaInfo, provided loadAd has
   * already been called for it.
   */
  fun playAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Cleans up and releases all resources used by the `VideoAdPlayer`. */
  fun release(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Removes a callback. */
  fun removeCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Stops playing the current ad. */
  fun stopAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.AdPodInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoAdPlayer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoAdPlayerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoAdPlayer(pigeonRegistrar) {
  internal class VideoAdPlayerImpl(val api: VideoAdPlayerProxyApi) : VideoAdPlayer {
    override fun addCallback(callback: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      api.pigeonRegistrar.runOnMainThread { api.addCallback(this, callback) {} }
    }
    override fun loadAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo, adPodInfo: com.google.ads.interactivemedia.v3.api.AdPodInfo) {
      api.pigeonRegistrar.runOnMainThread { api.loadAd(this, adMediaInfo, adPodInfo) {} }
    }
    override fun pauseAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      api.pigeonRegistrar.runOnMainThread { api.pauseAd(this, adMediaInfo) {} }
    }
    override fun playAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      api.pigeonRegistrar.runOnMainThread { api.playAd(this, adMediaInfo) {} }
    }
    override fun release() {
      api.pigeonRegistrar.runOnMainThread { api.release(this ) {} }
    }
    override fun removeCallback(callback: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      api.pigeonRegistrar.runOnMainThread { api.removeCallback(this, callback) {} }
    }
    override fun stopAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      api.pigeonRegistrar.runOnMainThread { api.stopAd(this, adMediaInfo) {} }
    }
  }

  override fun pigeon_defaultConstructor(): VideoAdPlayer {
    return VideoAdPlayer()
  }

  override fun setVolume(pigeon_instance: VideoAdPlayer,value: Long) {
    return pigeon_instance.setVolume(value)
  }

  override fun setAdProgress(pigeon_instance: VideoAdPlayer,progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
    return pigeon_instance.setAdProgress(progress)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.AdPodInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class VideoAdPlayerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayer()

    assertTrue(api.pigeon_defaultConstructor() is VideoAdPlayerProxyApi.VideoAdPlayer)
  }

  @Test
  fun setVolume() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayer()

    val instance = mock<VideoAdPlayer>()
    val value = 0
    api.setVolume(instance, value)

    verify(instance).setVolume(value)
  }

  @Test
  fun setAdProgress() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayer()

    val instance = mock<VideoAdPlayer>()
    val progress = mock<VideoProgressUpdate>()
    api.setAdProgress(instance, progress)

    verify(instance).setAdProgress(progress)
  }

  @Test
  fun addCallback() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val callback = mock<VideoAdPlayerCallback>()
    instance.addCallback(callback)

    verify(mockApi).addCallback(eq(instance), eq(callback), any())
  }

  @Test
  fun loadAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    val adPodInfo = mock<AdPodInfo>()
    instance.loadAd(adMediaInfo, adPodInfo)

    verify(mockApi).loadAd(eq(instance), eq(adMediaInfo), eq(adPodInfo), any())
  }

  @Test
  fun pauseAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    instance.pauseAd(adMediaInfo)

    verify(mockApi).pauseAd(eq(instance), eq(adMediaInfo), any())
  }

  @Test
  fun playAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    instance.playAd(adMediaInfo)

    verify(mockApi).playAd(eq(instance), eq(adMediaInfo), any())
  }

  @Test
  fun release() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    instance.release()

    verify(mockApi).release(eq(instance) , any())
  }

  @Test
  fun removeCallback() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val callback = mock<VideoAdPlayerCallback>()
    instance.removeCallback(callback)

    verify(mockApi).removeCallback(eq(instance), eq(callback), any())
  }

  @Test
  fun stopAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    instance.stopAd(adMediaInfo)

    verify(mockApi).stopAd(eq(instance), eq(adMediaInfo), any())
  }

}
*/
/**
 * Listener interface for notification of ad load or stream load completion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.AdsLoadedListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoadedListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsLoadedListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoadedListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdsLoadedListener, but the class has a nonnull callback method.")
  }

  /** Called once the AdsManager or StreamManager has been loaded. */
  fun onAdsManagerLoaded(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent

/**
 * ProxyApi implementation for [AdsLoadedListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsLoadedListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsLoadedListener(pigeonRegistrar) {
  internal class AdsLoadedListenerImpl(val api: AdsLoadedListenerProxyApi) : AdsLoadedListener {
    override fun onAdsManagerLoaded(event: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent) {
      api.pigeonRegistrar.runOnMainThread { api.onAdsManagerLoaded(this, event) {} }
    }
  }

  override fun pigeon_defaultConstructor(): AdsLoadedListener {
    return AdsLoadedListener()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdsLoadedListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoadedListener()

    assertTrue(api.pigeon_defaultConstructor() is AdsLoadedListenerProxyApi.AdsLoadedListenerImpl)
  }

  @Test
  fun onAdsManagerLoaded() {
    val mockApi = mock<AdsLoadedListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = AdsLoadedListenerImpl(mockApi)
    val event = mock<AdsManagerLoadedEvent>()
    instance.onAdsManagerLoaded(event)

    verify(mockApi).onAdsManagerLoaded(eq(instance), eq(event), any())
  }

}
*/
/**
 * Interface for classes that will listen to AdErrorEvents.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.AdErrorListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdErrorListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdErrorListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdErrorListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdErrorListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdErrorListener, but the class has a nonnull callback method.")
  }

  /** Called when an error occurs. */
  fun onAdError(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdErrorEvent

/**
 * ProxyApi implementation for [AdErrorListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdErrorListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdErrorListener(pigeonRegistrar) {
  internal class AdErrorListenerImpl(val api: AdErrorListenerProxyApi) : AdErrorListener {
    override fun onAdError(event: com.google.ads.interactivemedia.v3.api.AdErrorEvent) {
      api.pigeonRegistrar.runOnMainThread { api.onAdError(this, event) {} }
    }
  }

  override fun pigeon_defaultConstructor(): AdErrorListener {
    return AdErrorListener()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdErrorEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdErrorListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiAdErrorListener()

    assertTrue(api.pigeon_defaultConstructor() is AdErrorListenerProxyApi.AdErrorListenerImpl)
  }

  @Test
  fun onAdError() {
    val mockApi = mock<AdErrorListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = AdErrorListenerImpl(mockApi)
    val event = mock<AdErrorEvent>()
    instance.onAdError(event)

    verify(mockApi).onAdError(eq(instance), eq(event), any())
  }

}
*/
/**
 * Listener interface for ad events.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdEventListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdEventListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdEventListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdEventListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdEventListener, but the class has a nonnull callback method.")
  }

  /** Respond to an occurrence of an AdEvent. */
  fun onAdEvent(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import com.google.ads.interactivemedia.v3.api.AdEvent

/**
 * ProxyApi implementation for [AdEventListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdEventListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdEventListener(pigeonRegistrar) {
  internal class AdEventListenerImpl(val api: AdEventListenerProxyApi) : AdEventListener {
    override fun onAdEvent(event: com.google.ads.interactivemedia.v3.api.AdEvent) {
      api.pigeonRegistrar.runOnMainThread { api.onAdEvent(this, event) {} }
    }
  }

  override fun pigeon_defaultConstructor(): AdEventListener {
    return AdEventListener()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import com.google.ads.interactivemedia.v3.api.AdEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.whenever

class AdEventListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEventListener()

    assertTrue(api.pigeon_defaultConstructor() is AdEventListenerProxyApi.AdEventListenerImpl)
  }

  @Test
  fun onAdEvent() {
    val mockApi = mock<AdEventListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = AdEventListenerImpl(mockApi)
    val event = mock<AdEvent>()
    instance.onAdEvent(event)

    verify(mockApi).onAdEvent(eq(instance), eq(event), any())
  }

}
*/
