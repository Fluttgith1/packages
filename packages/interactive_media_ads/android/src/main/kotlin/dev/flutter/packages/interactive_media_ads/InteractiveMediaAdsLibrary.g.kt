// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.flutter.packages.interactive_media_ads

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(exception.code, exception.message, exception.details)
  } else {
    listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception))
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError(
      "channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in an
 * InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong reference
 * is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the
 * strong reference is removed and then the identifier is retrieved with the intention to pass the
 * identifier to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the
 * instance is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class InteractiveMediaAdsLibraryPigeonInstanceManager(
    private val finalizationListener: PigeonFinalizationListener
) {
  /** Interface for listening when a weak reference of an instance is removed from the manager. */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(
        finalizationListener: PigeonFinalizationListener
    ): InteractiveMediaAdsLibraryPigeonInstanceManager {
      return InteractiveMediaAdsLibraryPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present, from
   * the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `InteractiveMediaAdsLibraryPigeonInstanceManager` to have, or recreate, a weak reference to the
   * Dart instance the identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This allows
   * two objects that are equivalent (e.g. the `equals` method returns true and their hashcodes are
   * equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) {
      "Instance of ${instance.javaClass} has already been added."
    }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } !=
        null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
          tag,
          "The manager was used after calls to the PigeonFinalizationListener has been stopped.")
    }
  }
}

/** Generated API for managing the Dart and native `PigeonInstanceManager`s. */
private class InteractiveMediaAdsLibraryPigeonInstanceManagerApi(
    val binaryMessenger: BinaryMessenger
) {
  companion object {
    /** The codec used by InteractiveMediaAdsLibraryPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy { StandardMessageCodec() }

    /**
     * Sets up an instance of `InteractiveMediaAdsLibraryPigeonInstanceManagerApi` to handle
     * messages from the `binaryMessenger`.
     */
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager?
    ) {
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  instanceManager.remove<Any?>(identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.clear",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> =
                try {
                  instanceManager.clear()
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit) {
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources needed
 * by any implementation.
 */
abstract class InteractiveMediaAdsLibraryPigeonProxyApiRegistrar(
    val binaryMessenger: BinaryMessenger
) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager
  private var _codec: StandardMessageCodec? = null
  val codec: StandardMessageCodec
    get() {
      if (_codec == null) {
        _codec = InteractiveMediaAdsLibraryPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = InteractiveMediaAdsLibraryPigeonInstanceManagerApi(binaryMessenger)
    instanceManager =
        InteractiveMediaAdsLibraryPigeonInstanceManager.create(
            object : InteractiveMediaAdsLibraryPigeonInstanceManager.PigeonFinalizationListener {
              override fun onFinalize(identifier: Long) {
                api.removeStrongReference(identifier) {
                  if (it.isFailure) {
                    Log.e(
                        "PigeonProxyApiRegistrar",
                        "Failed to remove Dart strong reference with identifier: $identifier")
                  }
                }
              }
            })
  }
  /**
   * An implementation of [PigeonApiAd] used to add a new Dart instance of `Ad` to the Dart
   * `InstanceManager`.
   */
  abstract fun getPigeonApiAd(): PigeonApiAd

  /**
   * An implementation of [PigeonApiCuePoint] used to add a new Dart instance of `CuePoint` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCuePoint(): PigeonApiCuePoint

  /**
   * An implementation of [PigeonApiCompanionAd] used to add a new Dart instance of `CompanionAd` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAd(): PigeonApiCompanionAd

  /**
   * An implementation of [PigeonApiUniversalAdId] used to add a new Dart instance of
   * `UniversalAdId` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiUniversalAdId(): PigeonApiUniversalAdId

  /**
   * An implementation of [PigeonApiBaseDisplayContainer] used to add a new Dart instance of
   * `BaseDisplayContainer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer

  /**
   * An implementation of [PigeonApiCompanionAdSlot] used to add a new Dart instance of
   * `CompanionAdSlot` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAdSlot(): PigeonApiCompanionAdSlot

  /**
   * An implementation of [PigeonApiCompanionAdSlotClickListener] used to add a new Dart instance of
   * `CompanionAdSlotClickListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAdSlotClickListener(): PigeonApiCompanionAdSlotClickListener

  /**
   * An implementation of [PigeonApiFriendlyObstruction] used to add a new Dart instance of
   * `FriendlyObstruction` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFriendlyObstruction(): PigeonApiFriendlyObstruction

  /**
   * An implementation of [PigeonApiAdDisplayContainer] used to add a new Dart instance of
   * `AdDisplayContainer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdDisplayContainer(): PigeonApiAdDisplayContainer

  /**
   * An implementation of [PigeonApiAdsLoader] used to add a new Dart instance of `AdsLoader` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoader(): PigeonApiAdsLoader

  /**
   * An implementation of [PigeonApiBaseRequest] used to add a new Dart instance of `BaseRequest` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseRequest(): PigeonApiBaseRequest

  /**
   * An implementation of [PigeonApiSecureSignals] used to add a new Dart instance of
   * `SecureSignals` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiSecureSignals(): PigeonApiSecureSignals

  /**
   * An implementation of [PigeonApiAdsManagerLoadedEvent] used to add a new Dart instance of
   * `AdsManagerLoadedEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManagerLoadedEvent(): PigeonApiAdsManagerLoadedEvent

  /**
   * An implementation of [PigeonApiAdErrorEvent] used to add a new Dart instance of `AdErrorEvent`
   * to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdErrorEvent(): PigeonApiAdErrorEvent

  /**
   * An implementation of [PigeonApiAdError] used to add a new Dart instance of `AdError` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdError(): PigeonApiAdError

  /**
   * An implementation of [PigeonApiAdsRequest] used to add a new Dart instance of `AdsRequest` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsRequest(): PigeonApiAdsRequest

  /**
   * An implementation of [PigeonApiStreamRequest] used to add a new Dart instance of
   * `StreamRequest` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiStreamRequest(): PigeonApiStreamRequest

  /**
   * An implementation of [PigeonApiContentProgressProvider] used to add a new Dart instance of
   * `ContentProgressProvider` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiContentProgressProvider(): PigeonApiContentProgressProvider {
    return PigeonApiContentProgressProvider(this)
  }

  /**
   * An implementation of [PigeonApiAdsManager] used to add a new Dart instance of `AdsManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManager(): PigeonApiAdsManager

  /**
   * An implementation of [PigeonApiBaseManager] used to add a new Dart instance of `BaseManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseManager(): PigeonApiBaseManager

  /**
   * An implementation of [PigeonApiAdsRenderingSettings] used to add a new Dart instance of
   * `AdsRenderingSettings` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsRenderingSettings(): PigeonApiAdsRenderingSettings

  /**
   * An implementation of [PigeonApiAdProgressInfo] used to add a new Dart instance of
   * `AdProgressInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdProgressInfo(): PigeonApiAdProgressInfo

  /**
   * An implementation of [PigeonApiAdEvent] used to add a new Dart instance of `AdEvent` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdEvent(): PigeonApiAdEvent

  /**
   * An implementation of [PigeonApiImaSdkFactory] used to add a new Dart instance of
   * `ImaSdkFactory` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImaSdkFactory(): PigeonApiImaSdkFactory

  /**
   * An implementation of [PigeonApiStreamDisplayContainer] used to add a new Dart instance of
   * `StreamDisplayContainer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiStreamDisplayContainer(): PigeonApiStreamDisplayContainer

  /**
   * An implementation of [PigeonApiVideoStreamPlayer] used to add a new Dart instance of
   * `VideoStreamPlayer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoStreamPlayer(): PigeonApiVideoStreamPlayer

  /**
   * An implementation of [PigeonApiVideoStreamPlayerCallback] used to add a new Dart instance of
   * `VideoStreamPlayerCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoStreamPlayerCallback(): PigeonApiVideoStreamPlayerCallback

  /**
   * An implementation of [PigeonApiImaSdkSettings] used to add a new Dart instance of
   * `ImaSdkSettings` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImaSdkSettings(): PigeonApiImaSdkSettings

  /**
   * An implementation of [PigeonApiVideoProgressUpdate] used to add a new Dart instance of
   * `VideoProgressUpdate` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoProgressUpdate(): PigeonApiVideoProgressUpdate

  /**
   * An implementation of [PigeonApiAdMediaInfo] used to add a new Dart instance of `AdMediaInfo` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdMediaInfo(): PigeonApiAdMediaInfo

  /**
   * An implementation of [PigeonApiAdPodInfo] used to add a new Dart instance of `AdPodInfo` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdPodInfo(): PigeonApiAdPodInfo

  /**
   * An implementation of [PigeonApiFrameLayout] used to add a new Dart instance of `FrameLayout` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFrameLayout(): PigeonApiFrameLayout

  /**
   * An implementation of [PigeonApiViewGroup] used to add a new Dart instance of `ViewGroup` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiViewGroup(): PigeonApiViewGroup

  /**
   * An implementation of [PigeonApiVideoView] used to add a new Dart instance of `VideoView` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoView(): PigeonApiVideoView

  /**
   * An implementation of [PigeonApiView] used to add a new Dart instance of `View` to the Dart
   * `InstanceManager`.
   */
  open fun getPigeonApiView(): PigeonApiView {
    return PigeonApiView(this)
  }

  /**
   * An implementation of [PigeonApiMediaPlayer] used to add a new Dart instance of `MediaPlayer` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMediaPlayer(): PigeonApiMediaPlayer

  /**
   * An implementation of [PigeonApiVideoAdPlayerCallback] used to add a new Dart instance of
   * `VideoAdPlayerCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayerCallback(): PigeonApiVideoAdPlayerCallback

  /**
   * An implementation of [PigeonApiVideoAdPlayer] used to add a new Dart instance of
   * `VideoAdPlayer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayer(): PigeonApiVideoAdPlayer

  /**
   * An implementation of [PigeonApiAdsLoadedListener] used to add a new Dart instance of
   * `AdsLoadedListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoadedListener(): PigeonApiAdsLoadedListener

  /**
   * An implementation of [PigeonApiAdErrorListener] used to add a new Dart instance of
   * `AdErrorListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdErrorListener(): PigeonApiAdErrorListener

  /**
   * An implementation of [PigeonApiAdEventListener] used to add a new Dart instance of
   * `AdEventListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdEventListener(): PigeonApiAdEventListener

  fun setUp() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(
        binaryMessenger, instanceManager)
    PigeonApiBaseDisplayContainer.setUpMessageHandlers(
        binaryMessenger, getPigeonApiBaseDisplayContainer())
    PigeonApiCompanionAdSlot.setUpMessageHandlers(binaryMessenger, getPigeonApiCompanionAdSlot())
    PigeonApiCompanionAdSlotClickListener.setUpMessageHandlers(
        binaryMessenger, getPigeonApiCompanionAdSlotClickListener())
    PigeonApiAdDisplayContainer.setUpMessageHandlers(
        binaryMessenger, getPigeonApiAdDisplayContainer())
    PigeonApiAdsLoader.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsLoader())
    PigeonApiBaseRequest.setUpMessageHandlers(binaryMessenger, getPigeonApiBaseRequest())
    PigeonApiSecureSignals.setUpMessageHandlers(binaryMessenger, getPigeonApiSecureSignals())
    PigeonApiAdsRequest.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsRequest())
    PigeonApiStreamRequest.setUpMessageHandlers(binaryMessenger, getPigeonApiStreamRequest())
    PigeonApiAdsManager.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsManager())
    PigeonApiBaseManager.setUpMessageHandlers(binaryMessenger, getPigeonApiBaseManager())
    PigeonApiAdsRenderingSettings.setUpMessageHandlers(
        binaryMessenger, getPigeonApiAdsRenderingSettings())
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, getPigeonApiImaSdkFactory())
    PigeonApiStreamDisplayContainer.setUpMessageHandlers(
        binaryMessenger, getPigeonApiStreamDisplayContainer())
    PigeonApiVideoStreamPlayer.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoStreamPlayer())
    PigeonApiVideoStreamPlayerCallback.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoStreamPlayerCallback())
    PigeonApiImaSdkSettings.setUpMessageHandlers(binaryMessenger, getPigeonApiImaSdkSettings())
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoProgressUpdate())
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, getPigeonApiFrameLayout())
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, getPigeonApiViewGroup())
    PigeonApiVideoView.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoView())
    PigeonApiMediaPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiMediaPlayer())
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoAdPlayerCallback())
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoAdPlayer())
    PigeonApiAdsLoadedListener.setUpMessageHandlers(
        binaryMessenger, getPigeonApiAdsLoadedListener())
    PigeonApiAdErrorListener.setUpMessageHandlers(binaryMessenger, getPigeonApiAdErrorListener())
    PigeonApiAdEventListener.setUpMessageHandlers(binaryMessenger, getPigeonApiAdEventListener())
  }

  fun tearDown() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBaseDisplayContainer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCompanionAdSlot.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiCompanionAdSlotClickListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdDisplayContainer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsLoader.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBaseRequest.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiSecureSignals.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsRequest.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiStreamRequest.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBaseManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsRenderingSettings.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiStreamDisplayContainer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoStreamPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoStreamPlayerCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImaSdkSettings.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoView.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMediaPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsLoadedListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdErrorListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdEventListener.setUpMessageHandlers(binaryMessenger, null)
  }
}

private class InteractiveMediaAdsLibraryPigeonProxyApiBaseCodec(
    val registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) : InteractiveMediaAdsLibraryPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return registrar.instanceManager.getInstance(
            readValue(buffer).let { if (it is Int) it.toLong() else it as Long })
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean ||
        value is ByteArray ||
        value is Double ||
        value is DoubleArray ||
        value is FloatArray ||
        value is Int ||
        value is IntArray ||
        value is List<*> ||
        value is Long ||
        value is LongArray ||
        value is Map<*, *> ||
        value is String ||
        value is AdErrorCode ||
        value is AdErrorType ||
        value is AdEventType ||
        value is UiElement ||
        value is FriendlyObstructionPurpose ||
        value is StreamFormat ||
        value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is com.google.ads.interactivemedia.v3.api.Ad) {
      registrar.getPigeonApiAd().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CuePoint) {
      registrar.getPigeonApiCuePoint().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAd) {
      registrar.getPigeonApiCompanionAd().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.UniversalAdId) {
      registrar.getPigeonApiUniversalAdId().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAdSlot) {
      registrar.getPigeonApiCompanionAdSlot().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener) {
      registrar.getPigeonApiCompanionAdSlotClickListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.FriendlyObstruction) {
      registrar.getPigeonApiFriendlyObstruction().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdDisplayContainer) {
      registrar.getPigeonApiAdDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader) {
      registrar.getPigeonApiAdsLoader().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.signals.SecureSignals) {
      registrar.getPigeonApiSecureSignals().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent) {
      registrar.getPigeonApiAdsManagerLoadedEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdErrorEvent) {
      registrar.getPigeonApiAdErrorEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdError) {
      registrar.getPigeonApiAdError().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsRequest) {
      registrar.getPigeonApiAdsRequest().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.StreamRequest) {
      registrar.getPigeonApiStreamRequest().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseRequest) {
      registrar.getPigeonApiBaseRequest().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider) {
      registrar.getPigeonApiContentProgressProvider().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManager) {
      registrar.getPigeonApiAdsManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseManager) {
      registrar.getPigeonApiBaseManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsRenderingSettings) {
      registrar.getPigeonApiAdsRenderingSettings().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdProgressInfo) {
      registrar.getPigeonApiAdProgressInfo().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdEvent) {
      registrar.getPigeonApiAdEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkFactory) {
      registrar.getPigeonApiImaSdkFactory().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.StreamDisplayContainer) {
      registrar.getPigeonApiStreamDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseDisplayContainer) {
      registrar.getPigeonApiBaseDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer) {
      registrar.getPigeonApiVideoStreamPlayer().pigeon_newInstance(value) {}
    } else if (value
        is
        com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback) {
      registrar.getPigeonApiVideoStreamPlayerCallback().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkSettings) {
      registrar.getPigeonApiImaSdkSettings().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
      registrar.getPigeonApiVideoProgressUpdate().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      registrar.getPigeonApiAdMediaInfo().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdPodInfo) {
      registrar.getPigeonApiAdPodInfo().pigeon_newInstance(value) {}
    } else if (value is android.widget.FrameLayout) {
      registrar.getPigeonApiFrameLayout().pigeon_newInstance(value) {}
    } else if (value is android.view.ViewGroup) {
      registrar.getPigeonApiViewGroup().pigeon_newInstance(value) {}
    } else if (value is android.widget.VideoView) {
      registrar.getPigeonApiVideoView().pigeon_newInstance(value) {}
    } else if (value is android.view.View) {
      registrar.getPigeonApiView().pigeon_newInstance(value) {}
    } else if (value is android.media.MediaPlayer) {
      registrar.getPigeonApiMediaPlayer().pigeon_newInstance(value) {}
    } else if (value
        is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      registrar.getPigeonApiVideoAdPlayerCallback().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer) {
      registrar.getPigeonApiVideoAdPlayer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener) {
      registrar.getPigeonApiAdsLoadedListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
      registrar.getPigeonApiAdErrorListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener) {
      registrar.getPigeonApiAdEventListener().pigeon_newInstance(value) {}
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else ->
          throw IllegalArgumentException(
              "Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

/**
 * The types of error that can be encountered.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorCode.html.
 */
enum class AdErrorCode(val raw: Int) {
  /** Ads player was not provided. */
  ADS_PLAYER_WAS_NOT_PROVIDED(0),
  /** There was a problem requesting ads from the server. */
  ADS_REQUEST_NETWORK_ERROR(1),
  /** A companion ad failed to load or render. */
  COMPANION_AD_LOADING_FAILED(2),
  /** There was a problem requesting ads from the server. */
  FAILED_TO_REQUEST_ADS(3),
  /** An error internal to the SDK occurred. */
  INTERNAL_ERROR(4),
  /** Invalid arguments were provided to SDK methods. */
  INVALID_ARGUMENTS(5),
  /** An overlay ad failed to load. */
  OVERLAY_AD_LOADING_FAILED(6),
  /** An overlay ad failed to render. */
  OVERLAY_AD_PLAYING_FAILED(7),
  /** Ads list was returned but ContentProgressProvider was not configured. */
  PLAYLIST_NO_CONTENT_TRACKING(8),
  /** Ads loader sent ads loaded event when it was not expected. */
  UNEXPECTED_ADS_LOADED_EVENT(9),
  /** The ad response was not understood and cannot be parsed. */
  UNKNOWN_AD_RESPONSE(10),
  /** An unexpected error occurred and the cause is not known. */
  UNKNOWN_ERROR(11),
  /** No assets were found in the VAST ad response. */
  VAST_ASSET_NOT_FOUND(12),
  /** A VAST response containing a single `<VAST>` tag with no child tags. */
  VAST_EMPTY_RESPONSE(13),
  /**
   * Assets were found in the VAST ad response for a linear ad, but none of them matched the video
   * player's capabilities.
   */
  VAST_LINEAR_ASSET_MISMATCH(14),
  /**
   * At least one VAST wrapper ad loaded successfully and a subsequent wrapper or inline ad load has
   * timed out.
   */
  VAST_LOAD_TIMEOUT(15),
  /** The ad response was not recognized as a valid VAST ad. */
  VAST_MALFORMED_RESPONSE(16),
  /** Failed to load media assets from a VAST response. */
  VAST_MEDIA_LOAD_TIMEOUT(17),
  /**
   * Assets were found in the VAST ad response for a nonlinear ad, but none of them matched the
   * video player's capabilities.
   */
  VAST_NONLINEAR_ASSET_MISMATCH(18),
  /** No Ads VAST response after one or more wrappers. */
  VAST_NO_ADS_AFTER_WRAPPER(19),
  /** The maximum number of VAST wrapper redirects has been reached. */
  VAST_TOO_MANY_REDIRECTS(20),
  /**
   * Trafficking error.
   *
   * Video player received an ad type that it was not expecting and/or cannot display.
   */
  VAST_TRAFFICKING_ERROR(21),
  /** There was an error playing the video ad. */
  VIDEO_PLAY_ERROR(22),
  /** The error code is not recognized by this wrapper. */
  UNKNOWN(23);

  companion object {
    fun ofRaw(raw: Int): AdErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Specifies when the error was encountered, during either ad loading or playback.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorType.html.
 */
enum class AdErrorType(val raw: Int) {
  /** Indicates that the error was encountered when the ad was being loaded. */
  LOAD(0),
  /** Indicates that the error was encountered after the ad loaded, during ad play. */
  PLAY(1),
  /** The error is not recognized by this wrapper. */
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): AdErrorType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Types of events that can occur during ad playback.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventType.html.
 */
enum class AdEventType(val raw: Int) {
  /** Fired when an ad break in a stream ends. */
  AD_BREAK_ENDED(0),
  /** Fired when an ad break will not play back any ads. */
  AD_BREAK_FETCH_ERROR(1),
  /** Fired when an ad break is ready from VMAP or ad rule ads. */
  AD_BREAK_READY(2),
  /** Fired when an ad break in a stream starts. */
  AD_BREAK_STARTED(3),
  /** Fired when playback stalls while the ad buffers. */
  AD_BUFFERING(4),
  /** Fired when an ad period in a stream ends. */
  AD_PERIOD_ENDED(5),
  /** Fired when an ad period in a stream starts. */
  AD_PERIOD_STARTED(6),
  /** Fired to inform of ad progress and can be used by publisher to display a countdown timer. */
  AD_PROGRESS(7),
  /**
   * Fired when the ads manager is done playing all the valid ads in the ads response, or when the
   * response doesn't return any valid ads.
   */
  ALL_ADS_COMPLETED(8),
  /** Fired when an ad is clicked. */
  CLICKED(9),
  /** Fired when an ad completes playing. */
  COMPLETED(10),
  /** Fired when content should be paused. */
  CONTENT_PAUSE_REQUESTED(11),
  /** Fired when content should be resumed. */
  CONTENT_RESUME_REQUESTED(12),
  /** Fired when VOD stream cuepoints have changed. */
  CUEPOINTS_CHANGED(13),
  /** Fired when the ad playhead crosses first quartile. */
  FIRST_QUARTILE(14),
  /** The user has closed the icon fallback image dialog. */
  ICON_FALLBACK_IMAGE_CLOSED(15),
  /** The user has tapped an ad icon. */
  ICON_TAPPED(16),
  /** Fired when the VAST response has been received. */
  LOADED(17),
  /** Fired to enable the SDK to communicate a message to be logged, which is stored in adData. */
  LOG(18),
  /** Fired when the ad playhead crosses midpoint. */
  MIDPOINT(19),
  /** Fired when an ad is paused. */
  PAUSED(20),
  /** Fired when an ad is resumed. */
  RESUMED(21),
  /** Fired when an ad changes its skippable state. */
  SKIPPABLE_STATE_CHANGED(22),
  /** Fired when an ad was skipped. */
  SKIPPED(23),
  /** Fired when an ad starts playing. */
  STARTED(24),
  /** Fired when a non-clickthrough portion of a video ad is clicked. */
  TAPPED(25),
  /** Fired when the ad playhead crosses third quartile. */
  THIRD_QUARTILE(26),
  /** The event type is not recognized by this wrapper. */
  UNKNOWN(27);

  companion object {
    fun ofRaw(raw: Int): AdEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Describes an element of the ad UI, to be requested or rendered by the SDK.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/UiElement.html.
 */
enum class UiElement(val raw: Int) {
  /** The ad attribution UI element, for example, "Ad". */
  AD_ATTRIBUTION(0),
  /** Ad attribution is required for a countdown timer to be displayed. */
  COUNTDOWN(1),
  /** The element is not recognized by this wrapper. */
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): UiElement? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * A list of purposes for which an obstruction would be registered as friendly.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/FriendlyObstructionPurpose.html.
 */
enum class FriendlyObstructionPurpose(val raw: Int) {
  CLOSE_AD(0),
  NOT_VISIBLE(1),
  OTHER(2),
  VIDEO_CONTROLS(3),
  UNKNOWN(4);

  companion object {
    fun ofRaw(raw: Int): FriendlyObstructionPurpose? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Enum of possible stream formats.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/StreamRequest.StreamFormat.html.
 */
enum class StreamFormat(val raw: Int) {
  DASH(0),
  HLS(1),
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): StreamFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

private open class InteractiveMediaAdsLibraryPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Int?)?.let { AdErrorCode.ofRaw(it) }
      }
      130.toByte() -> {
        return (readValue(buffer) as Int?)?.let { AdErrorType.ofRaw(it) }
      }
      131.toByte() -> {
        return (readValue(buffer) as Int?)?.let { AdEventType.ofRaw(it) }
      }
      132.toByte() -> {
        return (readValue(buffer) as Int?)?.let { UiElement.ofRaw(it) }
      }
      133.toByte() -> {
        return (readValue(buffer) as Int?)?.let { FriendlyObstructionPurpose.ofRaw(it) }
      }
      134.toByte() -> {
        return (readValue(buffer) as Int?)?.let { StreamFormat.ofRaw(it) }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is AdErrorCode -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is AdErrorType -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is AdEventType -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is UiElement -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is FriendlyObstructionPurpose -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is StreamFormat -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * An object that holds data corresponding to the main Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/Ad.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAd(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The ad ID as specified in the VAST response. */
  abstract fun adId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The pod metadata object. */
  abstract fun adPodInfo(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): com.google.ads.interactivemedia.v3.api.AdPodInfo

  /** The ad system as specified in the VAST response. */
  abstract fun adSystem(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The IDs of the ads' creatives, starting with the first wrapper ad. */
  abstract fun adWrapperCreativeIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** The wrapper ad IDs as specified in the VAST response. */
  abstract fun adWrapperIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** The wrapper ad systems as specified in the VAST response. */
  abstract fun adWrapperSystems(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** The advertiser name as defined by the serving party. */
  abstract fun advertiserName(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /**
   * The companions for the current ad while using DAI.
   *
   * Returns an empty list in any other scenario.
   */
  abstract fun companionAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<com.google.ads.interactivemedia.v3.api.CompanionAd>

  /**
   * The content type of the currently selected creative, or null if no creative is selected or the
   * content type is unavailable.
   */
  abstract fun contentType(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The ISCI (Industry Standard Commercial Identifier) code for an ad. */
  abstract fun creativeAdId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The ID of the selected creative for the ad, */
  abstract fun creativeId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The first deal ID present in the wrapper chain for the current ad, starting from the top. */
  abstract fun dealId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The description of this ad from the VAST response. */
  abstract fun description(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The duration of the ad in seconds, -1 if not available. */
  abstract fun duration(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Double

  /** The height of the selected creative if non-linear, else returns 0. */
  abstract fun height(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The number of seconds of playback before the ad becomes skippable. */
  abstract fun skipTimeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Double

  /** The URL associated with the survey for the given ad. */
  abstract fun surveyUrl(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The title of this ad from the VAST response. */
  abstract fun title(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The custom parameters associated with the ad at the time of ad trafficking. */
  abstract fun traffickingParameters(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): String

  /** Te set of ad UI elements rendered by the IMA SDK for this ad. */
  abstract fun uiElements(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<UiElement>

  /** The list of all universal ad IDs for this ad. */
  abstract fun universalAdIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<com.google.ads.interactivemedia.v3.api.UniversalAdId>

  /** The VAST bitrate in Kbps of the selected creative. */
  abstract fun vastMediaBitrate(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The VAST media height in pixels of the selected creative. */
  abstract fun vastMediaHeight(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The VAST media width in pixels of the selected creative. */
  abstract fun vastMediaWidth(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The width of the selected creative if non-linear, else returns 0. */
  abstract fun width(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Indicates whether the ad’s current mode of operation is linear or non-linear. */
  abstract fun isLinear(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Boolean

  /** Indicates whether the ad can be skipped by the user. */
  abstract fun isSkippable(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Ad and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.Ad,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adIdArg = adId(pigeon_instanceArg)
    val adPodInfoArg = adPodInfo(pigeon_instanceArg)
    val adSystemArg = adSystem(pigeon_instanceArg)
    val adWrapperCreativeIdsArg = adWrapperCreativeIds(pigeon_instanceArg)
    val adWrapperIdsArg = adWrapperIds(pigeon_instanceArg)
    val adWrapperSystemsArg = adWrapperSystems(pigeon_instanceArg)
    val advertiserNameArg = advertiserName(pigeon_instanceArg)
    val companionAdsArg = companionAds(pigeon_instanceArg)
    val contentTypeArg = contentType(pigeon_instanceArg)
    val creativeAdIdArg = creativeAdId(pigeon_instanceArg)
    val creativeIdArg = creativeId(pigeon_instanceArg)
    val dealIdArg = dealId(pigeon_instanceArg)
    val descriptionArg = description(pigeon_instanceArg)
    val durationArg = duration(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val skipTimeOffsetArg = skipTimeOffset(pigeon_instanceArg)
    val surveyUrlArg = surveyUrl(pigeon_instanceArg)
    val titleArg = title(pigeon_instanceArg)
    val traffickingParametersArg = traffickingParameters(pigeon_instanceArg)
    val uiElementsArg = uiElements(pigeon_instanceArg)
    val universalAdIdsArg = universalAdIds(pigeon_instanceArg)
    val vastMediaBitrateArg = vastMediaBitrate(pigeon_instanceArg)
    val vastMediaHeightArg = vastMediaHeight(pigeon_instanceArg)
    val vastMediaWidthArg = vastMediaWidth(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val isLinearArg = isLinear(pigeon_instanceArg)
    val isSkippableArg = isSkippable(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.Ad.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adIdArg,
            adPodInfoArg,
            adSystemArg,
            adWrapperCreativeIdsArg,
            adWrapperIdsArg,
            adWrapperSystemsArg,
            advertiserNameArg,
            companionAdsArg,
            contentTypeArg,
            creativeAdIdArg,
            creativeIdArg,
            dealIdArg,
            descriptionArg,
            durationArg,
            heightArg,
            skipTimeOffsetArg,
            surveyUrlArg,
            titleArg,
            traffickingParametersArg,
            uiElementsArg,
            universalAdIdsArg,
            vastMediaBitrateArg,
            vastMediaHeightArg,
            vastMediaWidthArg,
            widthArg,
            isLinearArg,
            isSkippableArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.Ad
import com.google.ads.interactivemedia.v3.api.CompanionAd
import com.google.ads.interactivemedia.v3.api.UniversalAdId
import com.google.ads.interactivemedia.v3.api.AdPodInfo

/**
 * ProxyApi implementation for [Ad].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAd(pigeonRegistrar) {

  override fun adId(pigeon_instance: Ad): String {
    return pigeon_instance.adId
  }

  override fun adPodInfo(pigeon_instance: Ad): com.google.ads.interactivemedia.v3.api.AdPodInfo {
    return pigeon_instance.adPodInfo
  }

  override fun adSystem(pigeon_instance: Ad): String {
    return pigeon_instance.adSystem
  }

  override fun adWrapperCreativeIds(pigeon_instance: Ad): List<String> {
    return pigeon_instance.adWrapperCreativeIds
  }

  override fun adWrapperIds(pigeon_instance: Ad): List<String> {
    return pigeon_instance.adWrapperIds
  }

  override fun adWrapperSystems(pigeon_instance: Ad): List<String> {
    return pigeon_instance.adWrapperSystems
  }

  override fun advertiserName(pigeon_instance: Ad): String {
    return pigeon_instance.advertiserName
  }

  override fun companionAds(pigeon_instance: Ad): List<com.google.ads.interactivemedia.v3.api.CompanionAd> {
    return pigeon_instance.companionAds
  }

  override fun contentType(pigeon_instance: Ad): String? {
    return pigeon_instance.contentType
  }

  override fun creativeAdId(pigeon_instance: Ad): String {
    return pigeon_instance.creativeAdId
  }

  override fun creativeId(pigeon_instance: Ad): String {
    return pigeon_instance.creativeId
  }

  override fun dealId(pigeon_instance: Ad): String {
    return pigeon_instance.dealId
  }

  override fun description(pigeon_instance: Ad): String? {
    return pigeon_instance.description
  }

  override fun duration(pigeon_instance: Ad): Double {
    return pigeon_instance.duration
  }

  override fun height(pigeon_instance: Ad): Long {
    return pigeon_instance.height
  }

  override fun skipTimeOffset(pigeon_instance: Ad): Double {
    return pigeon_instance.skipTimeOffset
  }

  override fun surveyUrl(pigeon_instance: Ad): String {
    return pigeon_instance.surveyUrl
  }

  override fun title(pigeon_instance: Ad): String? {
    return pigeon_instance.title
  }

  override fun traffickingParameters(pigeon_instance: Ad): String {
    return pigeon_instance.traffickingParameters
  }

  override fun uiElements(pigeon_instance: Ad): List<UiElement> {
    return pigeon_instance.uiElements
  }

  override fun universalAdIds(pigeon_instance: Ad): List<com.google.ads.interactivemedia.v3.api.UniversalAdId> {
    return pigeon_instance.universalAdIds
  }

  override fun vastMediaBitrate(pigeon_instance: Ad): Long {
    return pigeon_instance.vastMediaBitrate
  }

  override fun vastMediaHeight(pigeon_instance: Ad): Long {
    return pigeon_instance.vastMediaHeight
  }

  override fun vastMediaWidth(pigeon_instance: Ad): Long {
    return pigeon_instance.vastMediaWidth
  }

  override fun width(pigeon_instance: Ad): Long {
    return pigeon_instance.width
  }

  override fun isLinear(pigeon_instance: Ad): Boolean {
    return pigeon_instance.isLinear
  }

  override fun isSkippable(pigeon_instance: Ad): Boolean {
    return pigeon_instance.isSkippable
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.Ad
import com.google.ads.interactivemedia.v3.api.CompanionAd
import com.google.ads.interactivemedia.v3.api.UniversalAdId
import com.google.ads.interactivemedia.v3.api.AdPodInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdProxyApiTest {
  @Test
  fun adId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.adId).thenReturn(value)

    assertEquals(value, api.adId(instance))
  }

  @Test
  fun adPodInfo() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = mock<AdPodInfo>()
    whenever(instance.adPodInfo).thenReturn(value)

    assertEquals(value, api.adPodInfo(instance))
  }

  @Test
  fun adSystem() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.adSystem).thenReturn(value)

    assertEquals(value, api.adSystem(instance))
  }

  @Test
  fun adWrapperCreativeIds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf("myString")
    whenever(instance.adWrapperCreativeIds).thenReturn(value)

    assertEquals(value, api.adWrapperCreativeIds(instance))
  }

  @Test
  fun adWrapperIds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf("myString")
    whenever(instance.adWrapperIds).thenReturn(value)

    assertEquals(value, api.adWrapperIds(instance))
  }

  @Test
  fun adWrapperSystems() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf("myString")
    whenever(instance.adWrapperSystems).thenReturn(value)

    assertEquals(value, api.adWrapperSystems(instance))
  }

  @Test
  fun advertiserName() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.advertiserName).thenReturn(value)

    assertEquals(value, api.advertiserName(instance))
  }

  @Test
  fun companionAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf(mock<CompanionAd>())
    whenever(instance.companionAds).thenReturn(value)

    assertEquals(value, api.companionAds(instance))
  }

  @Test
  fun contentType() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.contentType).thenReturn(value)

    assertEquals(value, api.contentType(instance))
  }

  @Test
  fun creativeAdId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.creativeAdId).thenReturn(value)

    assertEquals(value, api.creativeAdId(instance))
  }

  @Test
  fun creativeId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.creativeId).thenReturn(value)

    assertEquals(value, api.creativeId(instance))
  }

  @Test
  fun dealId() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.dealId).thenReturn(value)

    assertEquals(value, api.dealId(instance))
  }

  @Test
  fun description() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.description).thenReturn(value)

    assertEquals(value, api.description(instance))
  }

  @Test
  fun duration() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 1.0
    whenever(instance.duration).thenReturn(value)

    assertEquals(value, api.duration(instance))
  }

  @Test
  fun height() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.height).thenReturn(value)

    assertEquals(value, api.height(instance))
  }

  @Test
  fun skipTimeOffset() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 1.0
    whenever(instance.skipTimeOffset).thenReturn(value)

    assertEquals(value, api.skipTimeOffset(instance))
  }

  @Test
  fun surveyUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.surveyUrl).thenReturn(value)

    assertEquals(value, api.surveyUrl(instance))
  }

  @Test
  fun title() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.title).thenReturn(value)

    assertEquals(value, api.title(instance))
  }

  @Test
  fun traffickingParameters() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = "myString"
    whenever(instance.traffickingParameters).thenReturn(value)

    assertEquals(value, api.traffickingParameters(instance))
  }

  @Test
  fun uiElements() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf(dev.flutter.packages.interactive_media_ads.UiElement.AD_ATTRIBUTION)
    whenever(instance.uiElements).thenReturn(value)

    assertEquals(value, api.uiElements(instance))
  }

  @Test
  fun universalAdIds() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = listOf(mock<UniversalAdId>())
    whenever(instance.universalAdIds).thenReturn(value)

    assertEquals(value, api.universalAdIds(instance))
  }

  @Test
  fun vastMediaBitrate() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.vastMediaBitrate).thenReturn(value)

    assertEquals(value, api.vastMediaBitrate(instance))
  }

  @Test
  fun vastMediaHeight() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.vastMediaHeight).thenReturn(value)

    assertEquals(value, api.vastMediaHeight(instance))
  }

  @Test
  fun vastMediaWidth() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.vastMediaWidth).thenReturn(value)

    assertEquals(value, api.vastMediaWidth(instance))
  }

  @Test
  fun width() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = 0
    whenever(instance.width).thenReturn(value)

    assertEquals(value, api.width(instance))
  }

  @Test
  fun isLinear() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = true
    whenever(instance.isLinear).thenReturn(value)

    assertEquals(value, api.isLinear(instance))
  }

  @Test
  fun isSkippable() {
    val api = TestProxyApiRegistrar().getPigeonApiAd()

    val instance = mock<Ad>()
    val value = true
    whenever(instance.isSkippable).thenReturn(value)

    assertEquals(value, api.isSkippable(instance))
  }

}
*/
/**
 * Represents a cuepoint within a VOD stream.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CuePoint.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCuePoint(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The end time of the cuepoint in milliseconds. */
  abstract fun endTimeMs(pigeon_instance: com.google.ads.interactivemedia.v3.api.CuePoint): Long

  /** The start time of the cuepoint in milliseconds. */
  abstract fun startTimeMs(pigeon_instance: com.google.ads.interactivemedia.v3.api.CuePoint): Long

  /** Whether the corresponding ad break was played. */
  abstract fun isPlayed(pigeon_instance: com.google.ads.interactivemedia.v3.api.CuePoint): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CuePoint and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CuePoint,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val endTimeMsArg = endTimeMs(pigeon_instanceArg)
    val startTimeMsArg = startTimeMs(pigeon_instanceArg)
    val isPlayedArg = isPlayed(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CuePoint.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, endTimeMsArg, startTimeMsArg, isPlayedArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CuePoint

/**
 * ProxyApi implementation for [CuePoint].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CuePointProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCuePoint(pigeonRegistrar) {

  override fun endTimeMs(pigeon_instance: CuePoint): Long {
    return pigeon_instance.endTimeMs
  }

  override fun startTimeMs(pigeon_instance: CuePoint): Long {
    return pigeon_instance.startTimeMs
  }

  override fun isPlayed(pigeon_instance: CuePoint): Boolean {
    return pigeon_instance.isPlayed
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CuePoint
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class CuePointProxyApiTest {
  @Test
  fun endTimeMs() {
    val api = TestProxyApiRegistrar().getPigeonApiCuePoint()

    val instance = mock<CuePoint>()
    val value = 0
    whenever(instance.endTimeMs).thenReturn(value)

    assertEquals(value, api.endTimeMs(instance))
  }

  @Test
  fun startTimeMs() {
    val api = TestProxyApiRegistrar().getPigeonApiCuePoint()

    val instance = mock<CuePoint>()
    val value = 0
    whenever(instance.startTimeMs).thenReturn(value)

    assertEquals(value, api.startTimeMs(instance))
  }

  @Test
  fun isPlayed() {
    val api = TestProxyApiRegistrar().getPigeonApiCuePoint()

    val instance = mock<CuePoint>()
    val value = true
    whenever(instance.isPlayed).thenReturn(value)

    assertEquals(value, api.isPlayed(instance))
  }

}
*/
/**
 * An object that holds data corresponding to the companion Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAd.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAd(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The API needed to execute this ad, or null if unavailable. */
  abstract fun apiFramework(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd
  ): String?

  /**
   * The height of the companion in pixels.
   *
   * 0 if unavailable.
   */
  abstract fun height(pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd): Long

  /** The URL for the static resource of this companion. */
  abstract fun resourceValue(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd
  ): String

  /**
   * The width of the companion in pixels.
   *
   * 0 if unavailable.
   */
  abstract fun width(pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CompanionAd and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAd,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val apiFrameworkArg = apiFramework(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val resourceValueArg = resourceValue(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CompanionAd.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(pigeon_identifierArg, apiFrameworkArg, heightArg, resourceValueArg, widthArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAd

/**
 * ProxyApi implementation for [CompanionAd].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CompanionAdProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCompanionAd(pigeonRegistrar) {

  override fun apiFramework(pigeon_instance: CompanionAd): String? {
    return pigeon_instance.apiFramework
  }

  override fun height(pigeon_instance: CompanionAd): Long {
    return pigeon_instance.height
  }

  override fun resourceValue(pigeon_instance: CompanionAd): String {
    return pigeon_instance.resourceValue
  }

  override fun width(pigeon_instance: CompanionAd): Long {
    return pigeon_instance.width
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAd
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class CompanionAdProxyApiTest {
  @Test
  fun apiFramework() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = "myString"
    whenever(instance.apiFramework).thenReturn(value)

    assertEquals(value, api.apiFramework(instance))
  }

  @Test
  fun height() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = 0
    whenever(instance.height).thenReturn(value)

    assertEquals(value, api.height(instance))
  }

  @Test
  fun resourceValue() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = "myString"
    whenever(instance.resourceValue).thenReturn(value)

    assertEquals(value, api.resourceValue(instance))
  }

  @Test
  fun width() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAd()

    val instance = mock<CompanionAd>()
    val value = 0
    whenever(instance.width).thenReturn(value)

    assertEquals(value, api.width(instance))
  }

}
*/
/**
 * This object exposes information about the universal ad ID.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/UniversalAdId.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiUniversalAdId(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Returns the ad ID registry associated with the ad ID value.
   *
   * Returns "unknown" if the registry is not known.
   */
  abstract fun adIdRegistry(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.UniversalAdId
  ): String

  /**
   * Returns the universal ad ID value.
   *
   * Returns "unknown" if the value is not known.
   */
  abstract fun adIdValue(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.UniversalAdId
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UniversalAdId and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.UniversalAdId,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adIdRegistryArg = adIdRegistry(pigeon_instanceArg)
    val adIdValueArg = adIdValue(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.UniversalAdId.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, adIdRegistryArg, adIdValueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.UniversalAdId

/**
 * ProxyApi implementation for [UniversalAdId].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class UniversalAdIdProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiUniversalAdId(pigeonRegistrar) {

  override fun adIdRegistry(pigeon_instance: UniversalAdId): String {
    return pigeon_instance.adIdRegistry
  }

  override fun adIdValue(pigeon_instance: UniversalAdId): String {
    return pigeon_instance.adIdValue
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.UniversalAdId
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class UniversalAdIdProxyApiTest {
  @Test
  fun adIdRegistry() {
    val api = TestProxyApiRegistrar().getPigeonApiUniversalAdId()

    val instance = mock<UniversalAdId>()
    val value = "myString"
    whenever(instance.adIdRegistry).thenReturn(value)

    assertEquals(value, api.adIdRegistry(instance))
  }

  @Test
  fun adIdValue() {
    val api = TestProxyApiRegistrar().getPigeonApiUniversalAdId()

    val instance = mock<UniversalAdId>()
    val value = "myString"
    whenever(instance.adIdValue).thenReturn(value)

    assertEquals(value, api.adIdValue(instance))
  }

}
*/
/**
 * A base class for more specialized container interfaces.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseDisplayContainer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Returns the previously set container, or null if none has been set. */
  abstract fun getAdContainer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
  ): android.view.ViewGroup?

  /**
   * Gets the companion slots that have been set.
   *
   * Returns an empty list if none have been set.
   */
  abstract fun getCompanionSlots(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
  ): List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>

  /**
   * Registers a view that overlays or obstructs this container as "friendly" for viewability
   * measurement purposes.
   */
  abstract fun registerFriendlyObstruction(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      friendlyObstruction: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  )

  /**
   * Sets slots for displaying companions.
   *
   * Passing null will reset the container to having no companion slots.
   */
  abstract fun setCompanionSlots(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      companionSlots: List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>?
  )

  /** Unregisters all previously registered friendly obstructions. */
  abstract fun unregisterAllFriendlyObstructions(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiBaseDisplayContainer?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.getAdContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdContainer(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.getCompanionSlots",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCompanionSlots(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.registerFriendlyObstruction",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val friendlyObstructionArg =
                args[1] as com.google.ads.interactivemedia.v3.api.FriendlyObstruction
            val wrapped: List<Any?> =
                try {
                  api.registerFriendlyObstruction(pigeon_instanceArg, friendlyObstructionArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.setCompanionSlots",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val companionSlotsArg =
                args[1] as List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>?
            val wrapped: List<Any?> =
                try {
                  api.setCompanionSlots(pigeon_instanceArg, companionSlotsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.unregisterAllFriendlyObstructions",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
            val wrapped: List<Any?> =
                try {
                  api.unregisterAllFriendlyObstructions(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import android.view.ViewGroup

/**
 * ProxyApi implementation for [BaseDisplayContainer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class BaseDisplayContainerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiBaseDisplayContainer(pigeonRegistrar) {

  override fun getAdContainer(pigeon_instance: BaseDisplayContainer): android.view.ViewGroup? {
    return pigeon_instance.getAdContainer()
  }

  override fun getCompanionSlots(pigeon_instance: BaseDisplayContainer): List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot> {
    return pigeon_instance.getCompanionSlots()
  }

  override fun registerFriendlyObstruction(pigeon_instance: BaseDisplayContainer,friendlyObstruction: com.google.ads.interactivemedia.v3.api.FriendlyObstruction) {
    pigeon_instance.registerFriendlyObstruction(friendlyObstruction)
  }

  override fun setCompanionSlots(pigeon_instance: BaseDisplayContainer,companionSlots: List<com.google.ads.interactivemedia.v3.api.CompanionAdSlot>?) {
    pigeon_instance.setCompanionSlots(companionSlots)
  }

  override fun unregisterAllFriendlyObstructions(pigeon_instance: BaseDisplayContainer) {
    pigeon_instance.unregisterAllFriendlyObstructions()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseDisplayContainer
import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import android.view.ViewGroup
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class BaseDisplayContainerProxyApiTest {
  @Test
  fun getAdContainer() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val value = mock<ViewGroup>()
    whenever(instance.getAdContainer()).thenReturn(value)

    assertEquals(value, api.getAdContainer(instance ))
  }

  @Test
  fun getCompanionSlots() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val value = listOf(mock<CompanionAdSlot>())
    whenever(instance.getCompanionSlots()).thenReturn(value)

    assertEquals(value, api.getCompanionSlots(instance ))
  }

  @Test
  fun registerFriendlyObstruction() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val friendlyObstruction = mock<FriendlyObstruction>()
    api.registerFriendlyObstruction(instance, friendlyObstruction)

    verify(instance).registerFriendlyObstruction(friendlyObstruction)
  }

  @Test
  fun setCompanionSlots() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    val companionSlots = listOf(mock<CompanionAdSlot>())
    api.setCompanionSlots(instance, companionSlots)

    verify(instance).setCompanionSlots(companionSlots)
  }

  @Test
  fun unregisterAllFriendlyObstructions() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseDisplayContainer()

    val instance = mock<BaseDisplayContainer>()
    api.unregisterAllFriendlyObstructions(instance )

    verify(instance).unregisterAllFriendlyObstructions()
  }

}
*/
/**
 * A companion ad slot for which the SDK should retrieve ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAdSlot.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAdSlot(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Registers a listener for companion clicks. */
  abstract fun addClickListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
  )

  /** Returns the ViewGroup into which the companion will be rendered. */
  abstract fun getContainer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): android.view.ViewGroup

  /** Returns the height of the companion slot. */
  abstract fun getHeight(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): Long

  /** Returns the width of the companion slot. */
  abstract fun getWidth(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): Long

  /** Returns true if the companion slot is filled, false otherwise. */
  abstract fun isFilled(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot
  ): Boolean

  /** Removes a listener for companion clicks. */
  abstract fun removeClickListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
  )

  /**
   * Sets the ViewGroup into which the companion will be rendered.
   *
   * Required.
   */
  abstract fun setContainer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      container: android.view.ViewGroup
  )

  /**
   * Sets the size of the slot.
   *
   * Only companions matching the slot size will be displayed in the slot.
   */
  abstract fun setSize(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      width: Long,
      height: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiCompanionAdSlot?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.addClickListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val clickListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
            val wrapped: List<Any?> =
                try {
                  api.addClickListener(pigeon_instanceArg, clickListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.getContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.getContainer(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.getHeight",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.getHeight(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.getWidth",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.getWidth(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.isFilled",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val wrapped: List<Any?> =
                try {
                  listOf(api.isFilled(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.removeClickListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val clickListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
            val wrapped: List<Any?> =
                try {
                  api.removeClickListener(pigeon_instanceArg, clickListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.setContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val containerArg = args[1] as android.view.ViewGroup
            val wrapped: List<Any?> =
                try {
                  api.setContainer(pigeon_instanceArg, containerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.setSize",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.CompanionAdSlot
            val widthArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val heightArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setSize(pigeon_instanceArg, widthArg, heightArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CompanionAdSlot and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAdSlot,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlot.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
import android.view.ViewGroup

/**
 * ProxyApi implementation for [CompanionAdSlot].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CompanionAdSlotProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCompanionAdSlot(pigeonRegistrar) {

  override fun addClickListener(pigeon_instance: CompanionAdSlot,clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener) {
    pigeon_instance.addClickListener(clickListener)
  }

  override fun getContainer(pigeon_instance: CompanionAdSlot): android.view.ViewGroup {
    return pigeon_instance.getContainer()
  }

  override fun getHeight(pigeon_instance: CompanionAdSlot): Long {
    return pigeon_instance.getHeight()
  }

  override fun getWidth(pigeon_instance: CompanionAdSlot): Long {
    return pigeon_instance.getWidth()
  }

  override fun isFilled(pigeon_instance: CompanionAdSlot): Boolean {
    return pigeon_instance.isFilled()
  }

  override fun removeClickListener(pigeon_instance: CompanionAdSlot,clickListener: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener) {
    pigeon_instance.removeClickListener(clickListener)
  }

  override fun setContainer(pigeon_instance: CompanionAdSlot,container: android.view.ViewGroup) {
    pigeon_instance.setContainer(container)
  }

  override fun setSize(pigeon_instance: CompanionAdSlot,width: Long, height: Long) {
    pigeon_instance.setSize(width, height)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
import android.view.ViewGroup
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class CompanionAdSlotProxyApiTest {
  @Test
  fun addClickListener() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val clickListener = mock<CompanionAdSlotClickListener>()
    api.addClickListener(instance, clickListener)

    verify(instance).addClickListener(clickListener)
  }

  @Test
  fun getContainer() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = mock<ViewGroup>()
    whenever(instance.getContainer()).thenReturn(value)

    assertEquals(value, api.getContainer(instance ))
  }

  @Test
  fun getHeight() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = 0
    whenever(instance.getHeight()).thenReturn(value)

    assertEquals(value, api.getHeight(instance ))
  }

  @Test
  fun getWidth() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = 0
    whenever(instance.getWidth()).thenReturn(value)

    assertEquals(value, api.getWidth(instance ))
  }

  @Test
  fun isFilled() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val value = true
    whenever(instance.isFilled()).thenReturn(value)

    assertEquals(value, api.isFilled(instance ))
  }

  @Test
  fun removeClickListener() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val clickListener = mock<CompanionAdSlotClickListener>()
    api.removeClickListener(instance, clickListener)

    verify(instance).removeClickListener(clickListener)
  }

  @Test
  fun setContainer() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val container = mock<ViewGroup>()
    api.setContainer(instance, container)

    verify(instance).setContainer(container)
  }

  @Test
  fun setSize() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlot()

    val instance = mock<CompanionAdSlot>()
    val width = 0
    val height = 0
    api.setSize(instance, width, height)

    verify(instance).setSize(width, height)
  }

}
*/
/**
 * Listener interface for click events.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAdSlot.ClickListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAdSlotClickListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiCompanionAdSlotClickListener?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlotClickListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /**
   * Creates a Dart instance of CompanionAdSlotClickListener and attaches it to
   * [pigeon_instanceArg].
   */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of CompanionAdSlotClickListener, but the class has a nonnull callback method.")
  }

  /** Respond to a click on this companion ad slot. */
  fun onCompanionAdClick(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.CompanionAdSlotClickListener.onCompanionAdClick"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener

/**
 * ProxyApi implementation for [CompanionAdSlotClickListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class CompanionAdSlotClickListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiCompanionAdSlotClickListener(pigeonRegistrar) {
  internal class CompanionAdSlotClickListenerImpl(val api: CompanionAdSlotClickListenerProxyApi) : CompanionAdSlotClickListener {
    override fun onCompanionAdClick() {
      api.pigeonRegistrar.runOnMainThread { api.onCompanionAdClick(this ) {} }
    }
  }

  override fun pigeon_defaultConstructor(): CompanionAdSlotClickListener {
    return CompanionAdSlotClickListenerImpl()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.CompanionAdSlot.ClickListener
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class CompanionAdSlotClickListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiCompanionAdSlotClickListener()

    assertTrue(api.pigeon_defaultConstructor() is CompanionAdSlotClickListenerProxyApi.CompanionAdSlotClickListenerImpl)
  }

  @Test
  fun onCompanionAdClick() {
    val mockApi = mock<CompanionAdSlotClickListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = CompanionAdSlotClickListenerImpl(mockApi)
    instance.onCompanionAdClick()

    verify(mockApi).onCompanionAdClick(eq(instance) , any())
  }

}
*/
/**
 * An obstruction that is marked as "friendly" for viewability measurement purposes.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/FriendlyObstruction.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFriendlyObstruction(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The optional, detailed reasoning for registering this obstruction as friendly. */
  abstract fun detailedReason(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  ): String?

  /** The purpose for registering the obstruction as friendly. */
  abstract fun purpose(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  ): FriendlyObstructionPurpose

  /** The view causing the obstruction. */
  abstract fun view(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.FriendlyObstruction
  ): android.view.View

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FriendlyObstruction and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.FriendlyObstruction,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val detailedReasonArg = detailedReason(pigeon_instanceArg)
    val purposeArg = purpose(pigeon_instanceArg)
    val viewArg = view(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.FriendlyObstruction.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, detailedReasonArg, purposeArg, viewArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import android.view.View

/**
 * ProxyApi implementation for [FriendlyObstruction].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class FriendlyObstructionProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiFriendlyObstruction(pigeonRegistrar) {

  override fun detailedReason(pigeon_instance: FriendlyObstruction): String? {
    return pigeon_instance.detailedReason
  }

  override fun purpose(pigeon_instance: FriendlyObstruction): FriendlyObstructionPurpose {
    return when (pigeon_instance.purpose) {
      FriendlyObstructionPurpose.CLOSE_AD -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.CLOSE_AD
      FriendlyObstructionPurpose.NOT_VISIBLE -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.NOT_VISIBLE
      FriendlyObstructionPurpose.OTHER -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.OTHER
      FriendlyObstructionPurpose.VIDEO_CONTROLS -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.VIDEO_CONTROLS
      else -> dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.UNKNOWN
    }
  }

  override fun view(pigeon_instance: FriendlyObstruction): android.view.View {
    return pigeon_instance.view
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import android.view.View
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class FriendlyObstructionProxyApiTest {
  @Test
  fun detailedReason() {
    val api = TestProxyApiRegistrar().getPigeonApiFriendlyObstruction()

    val instance = mock<FriendlyObstruction>()
    val value = "myString"
    whenever(instance.detailedReason).thenReturn(value)

    assertEquals(value, api.detailedReason(instance))
  }

  @Test
  fun purpose() {
    val api = TestProxyApiRegistrar().getPigeonApiFriendlyObstruction()

    val instance = mock<FriendlyObstruction>()
    val value = dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.CLOSE_AD
    whenever(instance.purpose).thenReturn(value)

    assertEquals(value, api.purpose(instance))
  }

  @Test
  fun view() {
    val api = TestProxyApiRegistrar().getPigeonApiFriendlyObstruction()

    val instance = mock<FriendlyObstruction>()
    val value = mock<View>()
    whenever(instance.view).thenReturn(value)

    assertEquals(value, api.view(instance))
  }

}
*/
/**
 * A container in which to display the ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdDisplayContainer.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The previously set player, or null if none has been set. */
  abstract fun getPlayer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdDisplayContainer
  ): com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdDisplayContainer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.getPlayer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getPlayer(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseDisplayContainer] used to access callback methods */
  fun pigeon_getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer {
    return pigeonRegistrar.getPigeonApiBaseDisplayContainer()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdDisplayContainer
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer

/**
 * ProxyApi implementation for [AdDisplayContainer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdDisplayContainerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdDisplayContainer(pigeonRegistrar) {

  override fun getPlayer(pigeon_instance: AdDisplayContainer): com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer {
    return pigeon_instance.getPlayer()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdDisplayContainer
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdDisplayContainerProxyApiTest {
  @Test
  fun getPlayer() {
    val api = TestProxyApiRegistrar().getPigeonApiAdDisplayContainer()

    val instance = mock<AdDisplayContainer>()
    val value = mock<VideoAdPlayer>()
    whenever(instance.getPlayer()).thenReturn(value)

    assertEquals(value, api.getPlayer(instance ))
  }

}
*/
/**
 * An object which allows publishers to request ads from ad servers or a dynamic ad insertion
 * stream.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoader(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Registers a listener for errors that occur during the ads request. */
  abstract fun addAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      listener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /** Registers a listener for the ads manager loaded event. */
  abstract fun addAdsLoadedListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      listener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
  )

  /** Requests ads from a server. */
  abstract fun requestAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      request: com.google.ads.interactivemedia.v3.api.AdsRequest
  )

  /**
   * Returns the IMA SDK settings instance.
   *
   * To change the settings, just call the methods on the instance. The changes will apply for all
   * ad requests made with this ads loader.
   */
  abstract fun getSettings(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader
  ): com.google.ads.interactivemedia.v3.api.ImaSdkSettings

  /**
   * Frees resources from the BaseDisplayContainer as well as the underlying WebView.
   *
   * This should occur after disposing of the `BaseManager` using `BaseManager.destroy()` and after
   * the manager has finished its own cleanup, as indicated by `AdEventType.ALL_ADS_COMPLETED`
   */
  abstract fun release(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader)

  /** Removes a listener for error events. */
  abstract fun removeAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /** Removes a listener for the ads manager loaded event. */
  abstract fun removeAdsLoadedListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      loadedListener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
  )

  /** Initiates a stream session with server-side ad insertion. */
  abstract fun requestStream(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      streamRequest: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsLoader?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val listenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.addAdErrorListener(pigeon_instanceArg, listenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdsLoadedListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val listenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
            val wrapped: List<Any?> =
                try {
                  api.addAdsLoadedListener(pigeon_instanceArg, listenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.requestAds",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val requestArg = args[1] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val wrapped: List<Any?> =
                try {
                  api.requestAds(pigeon_instanceArg, requestArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.getSettings",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val wrapped: List<Any?> =
                try {
                  listOf(api.getSettings(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.release",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val wrapped: List<Any?> =
                try {
                  api.release(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.removeAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val errorListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.removeAdErrorListener(pigeon_instanceArg, errorListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.removeAdsLoadedListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val loadedListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
            val wrapped: List<Any?> =
                try {
                  api.removeAdsLoadedListener(pigeon_instanceArg, loadedListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.requestStream",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val streamRequestArg = args[1] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.requestStream(pigeon_instanceArg, streamRequestArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoader and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.StreamRequest
import com.google.ads.interactivemedia.v3.api.ImaSdkSettings

/**
 * ProxyApi implementation for [AdsLoader].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsLoaderProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsLoader(pigeonRegistrar) {

  override fun addAdErrorListener(pigeon_instance: AdsLoader,listener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
    pigeon_instance.addAdErrorListener(listener)
  }

  override fun addAdsLoadedListener(pigeon_instance: AdsLoader,listener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener) {
    pigeon_instance.addAdsLoadedListener(listener)
  }

  override fun requestAds(pigeon_instance: AdsLoader,request: com.google.ads.interactivemedia.v3.api.AdsRequest) {
    pigeon_instance.requestAds(request)
  }

  override fun getSettings(pigeon_instance: AdsLoader): com.google.ads.interactivemedia.v3.api.ImaSdkSettings {
    return pigeon_instance.getSettings()
  }

  override fun release(pigeon_instance: AdsLoader) {
    pigeon_instance.release()
  }

  override fun removeAdErrorListener(pigeon_instance: AdsLoader,errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
    pigeon_instance.removeAdErrorListener(errorListener)
  }

  override fun removeAdsLoadedListener(pigeon_instance: AdsLoader,loadedListener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener) {
    pigeon_instance.removeAdsLoadedListener(loadedListener)
  }

  override fun requestStream(pigeon_instance: AdsLoader,streamRequest: com.google.ads.interactivemedia.v3.api.StreamRequest): String {
    return pigeon_instance.requestStream(streamRequest)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.StreamRequest
import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdsLoaderProxyApiTest {
  @Test
  fun addAdErrorListener() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val listener = mock<AdErrorListener>()
    api.addAdErrorListener(instance, listener)

    verify(instance).addAdErrorListener(listener)
  }

  @Test
  fun addAdsLoadedListener() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val listener = mock<AdsLoadedListener>()
    api.addAdsLoadedListener(instance, listener)

    verify(instance).addAdsLoadedListener(listener)
  }

  @Test
  fun requestAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val request = mock<AdsRequest>()
    api.requestAds(instance, request)

    verify(instance).requestAds(request)
  }

  @Test
  fun getSettings() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val value = mock<ImaSdkSettings>()
    whenever(instance.getSettings()).thenReturn(value)

    assertEquals(value, api.getSettings(instance ))
  }

  @Test
  fun release() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    api.release(instance )

    verify(instance).release()
  }

  @Test
  fun removeAdErrorListener() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val errorListener = mock<AdErrorListener>()
    api.removeAdErrorListener(instance, errorListener)

    verify(instance).removeAdErrorListener(errorListener)
  }

  @Test
  fun removeAdsLoadedListener() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val loadedListener = mock<AdsLoadedListener>()
    api.removeAdsLoadedListener(instance, loadedListener)

    verify(instance).removeAdsLoadedListener(loadedListener)
  }

  @Test
  fun requestStream() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoader()

    val instance = mock<AdsLoader>()
    val streamRequest = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.requestStream(streamRequest)).thenReturn(value)

    assertEquals(value, api.requestStream(instance, streamRequest))
  }

}
*/
/**
 * Base interface for requesting ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseRequest.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseRequest(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Returns the deep link to the content's screen provided in `setContentUrl()`. */
  abstract fun getContentUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseRequest
  ): String

  /** Returns the Secure Signals with custom data. */
  abstract fun getSecureSignals(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseRequest
  ): com.google.ads.interactivemedia.v3.api.signals.SecureSignals?

  /** Returns the user-provided object that is associated with the request. */
  abstract fun getUserRequestContext(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseRequest
  ): Any

  /** Specifies the deep link to the content's screen. */
  abstract fun setContentUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseRequest,
      url: String
  )

  /** Specifies the Secure Signals with custom data for this request. */
  abstract fun setSecureSignals(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseRequest,
      signal: com.google.ads.interactivemedia.v3.api.signals.SecureSignals?
  )

  /** Sets the user-provided object that is associated with the request. */
  abstract fun setUserRequestContext(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseRequest,
      userRequestContext: Any
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBaseRequest?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseRequest.getContentUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getContentUrl(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseRequest.getSecureSignals",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getSecureSignals(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseRequest.getUserRequestContext",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getUserRequestContext(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseRequest.setContentUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseRequest
            val urlArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setContentUrl(pigeon_instanceArg, urlArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseRequest.setSecureSignals",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseRequest
            val signalArg = args[1] as com.google.ads.interactivemedia.v3.api.signals.SecureSignals?
            val wrapped: List<Any?> =
                try {
                  api.setSecureSignals(pigeon_instanceArg, signalArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseRequest.setUserRequestContext",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseRequest
            val userRequestContextArg = args[1] as Any
            val wrapped: List<Any?> =
                try {
                  api.setUserRequestContext(pigeon_instanceArg, userRequestContextArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseRequest and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseRequest,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.BaseRequest.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseRequest
import com.google.ads.interactivemedia.v3.api.signals.SecureSignals

/**
 * ProxyApi implementation for [BaseRequest].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class BaseRequestProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiBaseRequest(pigeonRegistrar) {

  override fun getContentUrl(pigeon_instance: BaseRequest): String {
    return pigeon_instance.getContentUrl()
  }

  override fun getSecureSignals(pigeon_instance: BaseRequest): com.google.ads.interactivemedia.v3.api.signals.SecureSignals? {
    return pigeon_instance.getSecureSignals()
  }

  override fun getUserRequestContext(pigeon_instance: BaseRequest): Any {
    return pigeon_instance.getUserRequestContext()
  }

  override fun setContentUrl(pigeon_instance: BaseRequest,url: String) {
    pigeon_instance.setContentUrl(url)
  }

  override fun setSecureSignals(pigeon_instance: BaseRequest,signal: com.google.ads.interactivemedia.v3.api.signals.SecureSignals?) {
    pigeon_instance.setSecureSignals(signal)
  }

  override fun setUserRequestContext(pigeon_instance: BaseRequest,userRequestContext: Any) {
    pigeon_instance.setUserRequestContext(userRequestContext)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseRequest
import com.google.ads.interactivemedia.v3.api.signals.SecureSignals
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class BaseRequestProxyApiTest {
  @Test
  fun getContentUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseRequest()

    val instance = mock<BaseRequest>()
    val value = "myString"
    whenever(instance.getContentUrl()).thenReturn(value)

    assertEquals(value, api.getContentUrl(instance ))
  }

  @Test
  fun getSecureSignals() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseRequest()

    val instance = mock<BaseRequest>()
    val value = mock<SecureSignals>()
    whenever(instance.getSecureSignals()).thenReturn(value)

    assertEquals(value, api.getSecureSignals(instance ))
  }

  @Test
  fun getUserRequestContext() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseRequest()

    val instance = mock<BaseRequest>()
    val value = -1
    whenever(instance.getUserRequestContext()).thenReturn(value)

    assertEquals(value, api.getUserRequestContext(instance ))
  }

  @Test
  fun setContentUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseRequest()

    val instance = mock<BaseRequest>()
    val url = "myString"
    api.setContentUrl(instance, url)

    verify(instance).setContentUrl(url)
  }

  @Test
  fun setSecureSignals() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseRequest()

    val instance = mock<BaseRequest>()
    val signal = mock<SecureSignals>()
    api.setSecureSignals(instance, signal)

    verify(instance).setSecureSignals(signal)
  }

  @Test
  fun setUserRequestContext() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseRequest()

    val instance = mock<BaseRequest>()
    val userRequestContext = -1
    api.setUserRequestContext(instance, userRequestContext)

    verify(instance).setUserRequestContext(userRequestContext)
  }

}
*/
/**
 * Base interface for requesting ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseRequest.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiSecureSignals(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Secure Signal. */
  abstract fun secureSignal(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.signals.SecureSignals
  ): String

  /**
   * Creates a new SecureSignals object that will contain all the necessary information for a secure
   * signal.
   */
  abstract fun create(
      customData: String
  ): com.google.ads.interactivemedia.v3.api.signals.SecureSignals

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiSecureSignals?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.SecureSignals.create",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val customDataArg = args[0] as String
            val wrapped: List<Any?> =
                try {
                  listOf(api.create(customDataArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SecureSignals and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.signals.SecureSignals,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val secureSignalArg = secureSignal(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.SecureSignals.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, secureSignalArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.signals.SecureSignals

/**
 * ProxyApi implementation for [SecureSignals].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class SecureSignalsProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiSecureSignals(pigeonRegistrar) {

  override fun secureSignal(pigeon_instance: SecureSignals): String {
    return pigeon_instance.secureSignal
  }

  override fun create(customData: String): com.google.ads.interactivemedia.v3.api.signals.SecureSignals {
    return SecureSignals.create(customData)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.signals.SecureSignals
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class SecureSignalsProxyApiTest {
  @Test
  fun secureSignal() {
    val api = TestProxyApiRegistrar().getPigeonApiSecureSignals()

    val instance = mock<SecureSignals>()
    val value = "myString"
    whenever(instance.secureSignal).thenReturn(value)

    assertEquals(value, api.secureSignal(instance))
  }

}
*/
/**
 * An event raised when ads are successfully loaded from the ad server through an AdsLoader.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManagerLoadedEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManagerLoadedEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * The ads manager that will control playback of the loaded ads, or null when using dynamic ad
   * insertion.
   */
  abstract fun manager(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
  ): com.google.ads.interactivemedia.v3.api.AdsManager

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManagerLoadedEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val managerArg = manager(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, managerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
import com.google.ads.interactivemedia.v3.api.AdsManager

/**
 * ProxyApi implementation for [AdsManagerLoadedEvent].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsManagerLoadedEventProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsManagerLoadedEvent(pigeonRegistrar) {

  override fun manager(pigeon_instance: AdsManagerLoadedEvent): com.google.ads.interactivemedia.v3.api.AdsManager {
    return pigeon_instance.manager
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
import com.google.ads.interactivemedia.v3.api.AdsManager
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdsManagerLoadedEventProxyApiTest {
  @Test
  fun manager() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManagerLoadedEvent()

    val instance = mock<AdsManagerLoadedEvent>()
    val value = mock<AdsManager>()
    whenever(instance.manager).thenReturn(value)

    assertEquals(value, api.manager(instance))
  }

}
*/
/**
 * An event raised when there is an error loading or playing ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdErrorEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The AdError that caused this event. */
  abstract fun error(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdErrorEvent
  ): com.google.ads.interactivemedia.v3.api.AdError

  /** The user-provided object that is associated with the ads request. */
  abstract fun userRequestContext(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdErrorEvent
  ): Any

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdErrorEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val errorArg = error(pigeon_instanceArg)
    val userRequestContextArg = userRequestContext(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, errorArg, userRequestContextArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent
import com.google.ads.interactivemedia.v3.api.AdError

/**
 * ProxyApi implementation for [AdErrorEvent].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdErrorEventProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdErrorEvent(pigeonRegistrar) {

  override fun error(pigeon_instance: AdErrorEvent): com.google.ads.interactivemedia.v3.api.AdError {
    return pigeon_instance.error
  }

  override fun userRequestContext(pigeon_instance: AdErrorEvent): Any {
    return pigeon_instance.userRequestContext
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent
import com.google.ads.interactivemedia.v3.api.AdError
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdErrorEventProxyApiTest {
  @Test
  fun error() {
    val api = TestProxyApiRegistrar().getPigeonApiAdErrorEvent()

    val instance = mock<AdErrorEvent>()
    val value = mock<AdError>()
    whenever(instance.error).thenReturn(value)

    assertEquals(value, api.error(instance))
  }

  @Test
  fun userRequestContext() {
    val api = TestProxyApiRegistrar().getPigeonApiAdErrorEvent()

    val instance = mock<AdErrorEvent>()
    val value = -1
    whenever(instance.userRequestContext).thenReturn(value)

    assertEquals(value, api.userRequestContext(instance))
  }

}
*/
/**
 * An error that occurred in the SDK.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdError(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The error's code. */
  abstract fun errorCode(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): AdErrorCode

  /** The error code's number. */
  abstract fun errorCodeNumber(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): Long

  /** The error's type. */
  abstract fun errorType(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): AdErrorType

  /** A human-readable summary of the error. */
  abstract fun message(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdError and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdError,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val errorCodeArg = errorCode(pigeon_instanceArg)
    val errorCodeNumberArg = errorCodeNumber(pigeon_instanceArg)
    val errorTypeArg = errorType(pigeon_instanceArg)
    val messageArg = message(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(pigeon_identifierArg, errorCodeArg, errorCodeNumberArg, errorTypeArg, messageArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdError

/**
 * ProxyApi implementation for [AdError].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdErrorProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdError(pigeonRegistrar) {

  override fun errorCode(pigeon_instance: AdError): AdErrorCode {
    return when (pigeon_instance.errorCode) {
      AdErrorCode.ADS_PLAYER_WAS_NOT_PROVIDED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.ADS_PLAYER_WAS_NOT_PROVIDED
      AdErrorCode.ADS_REQUEST_NETWORK_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.ADS_REQUEST_NETWORK_ERROR
      AdErrorCode.COMPANION_AD_LOADING_FAILED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.COMPANION_AD_LOADING_FAILED
      AdErrorCode.FAILED_TO_REQUEST_ADS -> dev.flutter.packages.interactive_media_ads.AdErrorCode.FAILED_TO_REQUEST_ADS
      AdErrorCode.INTERNAL_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.INTERNAL_ERROR
      AdErrorCode.INVALID_ARGUMENTS -> dev.flutter.packages.interactive_media_ads.AdErrorCode.INVALID_ARGUMENTS
      AdErrorCode.OVERLAY_AD_LOADING_FAILED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.OVERLAY_AD_LOADING_FAILED
      AdErrorCode.OVERLAY_AD_PLAYING_FAILED -> dev.flutter.packages.interactive_media_ads.AdErrorCode.OVERLAY_AD_PLAYING_FAILED
      AdErrorCode.PLAYLIST_NO_CONTENT_TRACKING -> dev.flutter.packages.interactive_media_ads.AdErrorCode.PLAYLIST_NO_CONTENT_TRACKING
      AdErrorCode.UNEXPECTED_ADS_LOADED_EVENT -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNEXPECTED_ADS_LOADED_EVENT
      AdErrorCode.UNKNOWN_AD_RESPONSE -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNKNOWN_AD_RESPONSE
      AdErrorCode.UNKNOWN_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNKNOWN_ERROR
      AdErrorCode.VAST_ASSET_NOT_FOUND -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_ASSET_NOT_FOUND
      AdErrorCode.VAST_EMPTY_RESPONSE -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_EMPTY_RESPONSE
      AdErrorCode.VAST_LINEAR_ASSET_MISMATCH -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_LINEAR_ASSET_MISMATCH
      AdErrorCode.VAST_LOAD_TIMEOUT -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_LOAD_TIMEOUT
      AdErrorCode.VAST_MALFORMED_RESPONSE -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_MALFORMED_RESPONSE
      AdErrorCode.VAST_MEDIA_LOAD_TIMEOUT -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_MEDIA_LOAD_TIMEOUT
      AdErrorCode.VAST_NONLINEAR_ASSET_MISMATCH -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_NONLINEAR_ASSET_MISMATCH
      AdErrorCode.VAST_NO_ADS_AFTER_WRAPPER -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_NO_ADS_AFTER_WRAPPER
      AdErrorCode.VAST_TOO_MANY_REDIRECTS -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_TOO_MANY_REDIRECTS
      AdErrorCode.VAST_TRAFFICKING_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VAST_TRAFFICKING_ERROR
      AdErrorCode.VIDEO_PLAY_ERROR -> dev.flutter.packages.interactive_media_ads.AdErrorCode.VIDEO_PLAY_ERROR
      else -> dev.flutter.packages.interactive_media_ads.AdErrorCode.UNKNOWN
    }
  }

  override fun errorCodeNumber(pigeon_instance: AdError): Long {
    return pigeon_instance.errorCodeNumber
  }

  override fun errorType(pigeon_instance: AdError): AdErrorType {
    return when (pigeon_instance.errorType) {
      AdErrorType.LOAD -> dev.flutter.packages.interactive_media_ads.AdErrorType.LOAD
      AdErrorType.PLAY -> dev.flutter.packages.interactive_media_ads.AdErrorType.PLAY
      else -> dev.flutter.packages.interactive_media_ads.AdErrorType.UNKNOWN
    }
  }

  override fun message(pigeon_instance: AdError): String {
    return pigeon_instance.message
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdError
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdErrorProxyApiTest {
  @Test
  fun errorCode() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = dev.flutter.packages.interactive_media_ads.AdErrorCode.ADS_PLAYER_WAS_NOT_PROVIDED
    whenever(instance.errorCode).thenReturn(value)

    assertEquals(value, api.errorCode(instance))
  }

  @Test
  fun errorCodeNumber() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = 0
    whenever(instance.errorCodeNumber).thenReturn(value)

    assertEquals(value, api.errorCodeNumber(instance))
  }

  @Test
  fun errorType() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = dev.flutter.packages.interactive_media_ads.AdErrorType.LOAD
    whenever(instance.errorType).thenReturn(value)

    assertEquals(value, api.errorType(instance))
  }

  @Test
  fun message() {
    val api = TestProxyApiRegistrar().getPigeonApiAdError()

    val instance = mock<AdError>()
    val value = "myString"
    whenever(instance.message).thenReturn(value)

    assertEquals(value, api.message(instance))
  }

}
*/
/**
 * An object containing the data used to request ads from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRequest.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsRequest(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Sets the URL from which ads will be requested. */
  abstract fun setAdTagUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      adTagUrl: String
  )

  /**
   * Attaches a ContentProgressProvider instance to allow scheduling ad breaks based on content
   * progress (cue points).
   */
  abstract fun setContentProgressProvider(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      provider: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
  )

  /** Returns the URL from which ads will be requested. */
  abstract fun getAdTagUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest
  ): String

  /** Returns the progress provider that will be used to schedule ad breaks. */
  abstract fun getContentProgressProvider(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest
  ): com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider

  /**
   * Notifies the SDK whether the player intends to start the content and ad in response to a user
   * action or whether it will be automatically played.
   *
   * Not calling this function leaves the setting as unknown.
   */
  abstract fun setAdWillAutoPlay(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      willAutoPlay: Boolean
  )

  /** Notifies the SDK whether the player intends to start the content and ad while muted. */
  abstract fun setAdWillPlayMuted(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      willPlayMuted: Boolean
  )

  /**
   * Specifies a VAST, VMAP, or ad rules response to be used instead of making a request through an
   * ad tag URL.
   */
  abstract fun setAdsResponse(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      cannedAdResponse: String
  )

  /** Specifies the duration of the content in seconds to be shown */
  abstract fun setContentDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      duration: Double
  )

  /** Specifies the keywords used to describe the content to be shown. */
  abstract fun setContentKeywords(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      keywords: List<String>
  )

  /** Specifies the title of the content to be shown. */
  abstract fun setContentTitle(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      title: String
  )

  /**
   * Notifies the SDK whether the player intends to continuously play the content videos one after
   * another similar to TV broadcast.
   *
   * Not calling this function leaves the setting as unknown.
   */
  abstract fun setContinuousPlayback(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      continuousPlayback: Boolean
  )

  /**
   * Specifies the maximum amount of time to wait in seconds, after calling requestAds, before
   * requesting the ad tag URL.
   */
  abstract fun setLiveStreamPrefetchSeconds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      prefetchTime: Double
  )

  /**
   * Specifies the VAST load timeout in milliseconds for a single wrapper.
   *
   * This parameter is optional and will override the default timeout, currently set to 5000ms.
   */
  abstract fun setVastLoadTimeout(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      timeout: Double
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsRequest?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdTagUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val adTagUrlArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setAdTagUrl(pigeon_instanceArg, adTagUrlArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentProgressProvider",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val providerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
            val wrapped: List<Any?> =
                try {
                  api.setContentProgressProvider(pigeon_instanceArg, providerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.getAdTagUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdTagUrl(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.getContentProgressProvider",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getContentProgressProvider(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdWillAutoPlay",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val willAutoPlayArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setAdWillAutoPlay(pigeon_instanceArg, willAutoPlayArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdWillPlayMuted",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val willPlayMutedArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setAdWillPlayMuted(pigeon_instanceArg, willPlayMutedArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdsResponse",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val cannedAdResponseArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setAdsResponse(pigeon_instanceArg, cannedAdResponseArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentDuration",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val durationArg = args[1] as Double
            val wrapped: List<Any?> =
                try {
                  api.setContentDuration(pigeon_instanceArg, durationArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentKeywords",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val keywordsArg = args[1] as List<String>
            val wrapped: List<Any?> =
                try {
                  api.setContentKeywords(pigeon_instanceArg, keywordsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentTitle",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val titleArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setContentTitle(pigeon_instanceArg, titleArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContinuousPlayback",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val continuousPlaybackArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setContinuousPlayback(pigeon_instanceArg, continuousPlaybackArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setLiveStreamPrefetchSeconds",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val prefetchTimeArg = args[1] as Double
            val wrapped: List<Any?> =
                try {
                  api.setLiveStreamPrefetchSeconds(pigeon_instanceArg, prefetchTimeArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setVastLoadTimeout",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val timeoutArg = args[1] as Double
            val wrapped: List<Any?> =
                try {
                  api.setVastLoadTimeout(pigeon_instanceArg, timeoutArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsRequest and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsRequest,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseRequest] used to access callback methods */
  fun pigeon_getPigeonApiBaseRequest(): PigeonApiBaseRequest {
    return pigeonRegistrar.getPigeonApiBaseRequest()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider

/**
 * ProxyApi implementation for [AdsRequest].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsRequestProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsRequest(pigeonRegistrar) {

  override fun setAdTagUrl(pigeon_instance: AdsRequest,adTagUrl: String) {
    pigeon_instance.setAdTagUrl(adTagUrl)
  }

  override fun setContentProgressProvider(pigeon_instance: AdsRequest,provider: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider) {
    pigeon_instance.setContentProgressProvider(provider)
  }

  override fun getAdTagUrl(pigeon_instance: AdsRequest): String {
    return pigeon_instance.getAdTagUrl()
  }

  override fun getContentProgressProvider(pigeon_instance: AdsRequest): com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider {
    return pigeon_instance.getContentProgressProvider()
  }

  override fun setAdWillAutoPlay(pigeon_instance: AdsRequest,willAutoPlay: Boolean) {
    pigeon_instance.setAdWillAutoPlay(willAutoPlay)
  }

  override fun setAdWillPlayMuted(pigeon_instance: AdsRequest,willPlayMuted: Boolean) {
    pigeon_instance.setAdWillPlayMuted(willPlayMuted)
  }

  override fun setAdsResponse(pigeon_instance: AdsRequest,cannedAdResponse: String) {
    pigeon_instance.setAdsResponse(cannedAdResponse)
  }

  override fun setContentDuration(pigeon_instance: AdsRequest,duration: Double) {
    pigeon_instance.setContentDuration(duration)
  }

  override fun setContentKeywords(pigeon_instance: AdsRequest,keywords: List<String>) {
    pigeon_instance.setContentKeywords(keywords)
  }

  override fun setContentTitle(pigeon_instance: AdsRequest,title: String) {
    pigeon_instance.setContentTitle(title)
  }

  override fun setContinuousPlayback(pigeon_instance: AdsRequest,continuousPlayback: Boolean) {
    pigeon_instance.setContinuousPlayback(continuousPlayback)
  }

  override fun setLiveStreamPrefetchSeconds(pigeon_instance: AdsRequest,prefetchTime: Double) {
    pigeon_instance.setLiveStreamPrefetchSeconds(prefetchTime)
  }

  override fun setVastLoadTimeout(pigeon_instance: AdsRequest,timeout: Double) {
    pigeon_instance.setVastLoadTimeout(timeout)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdsRequestProxyApiTest {
  @Test
  fun setAdTagUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val adTagUrl = "myString"
    api.setAdTagUrl(instance, adTagUrl)

    verify(instance).setAdTagUrl(adTagUrl)
  }

  @Test
  fun setContentProgressProvider() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val provider = mock<ContentProgressProvider>()
    api.setContentProgressProvider(instance, provider)

    verify(instance).setContentProgressProvider(provider)
  }

  @Test
  fun getAdTagUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val value = "myString"
    whenever(instance.getAdTagUrl()).thenReturn(value)

    assertEquals(value, api.getAdTagUrl(instance ))
  }

  @Test
  fun getContentProgressProvider() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val value = mock<ContentProgressProvider>()
    whenever(instance.getContentProgressProvider()).thenReturn(value)

    assertEquals(value, api.getContentProgressProvider(instance ))
  }

  @Test
  fun setAdWillAutoPlay() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val willAutoPlay = true
    api.setAdWillAutoPlay(instance, willAutoPlay)

    verify(instance).setAdWillAutoPlay(willAutoPlay)
  }

  @Test
  fun setAdWillPlayMuted() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val willPlayMuted = true
    api.setAdWillPlayMuted(instance, willPlayMuted)

    verify(instance).setAdWillPlayMuted(willPlayMuted)
  }

  @Test
  fun setAdsResponse() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val cannedAdResponse = "myString"
    api.setAdsResponse(instance, cannedAdResponse)

    verify(instance).setAdsResponse(cannedAdResponse)
  }

  @Test
  fun setContentDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val duration = 1.0
    api.setContentDuration(instance, duration)

    verify(instance).setContentDuration(duration)
  }

  @Test
  fun setContentKeywords() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val keywords = listOf("myString")
    api.setContentKeywords(instance, keywords)

    verify(instance).setContentKeywords(keywords)
  }

  @Test
  fun setContentTitle() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val title = "myString"
    api.setContentTitle(instance, title)

    verify(instance).setContentTitle(title)
  }

  @Test
  fun setContinuousPlayback() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val continuousPlayback = true
    api.setContinuousPlayback(instance, continuousPlayback)

    verify(instance).setContinuousPlayback(continuousPlayback)
  }

  @Test
  fun setLiveStreamPrefetchSeconds() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val prefetchTime = 1.0
    api.setLiveStreamPrefetchSeconds(instance, prefetchTime)

    verify(instance).setLiveStreamPrefetchSeconds(prefetchTime)
  }

  @Test
  fun setVastLoadTimeout() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRequest()

    val instance = mock<AdsRequest>()
    val timeout = 1.0
    api.setVastLoadTimeout(instance, timeout)

    verify(instance).setVastLoadTimeout(timeout)
  }

}
*/
/**
 * An object containing the data used to request a stream with server-side ad insertion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/StreamRequest.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiStreamRequest(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Returns any parameters that the SDK will attempt to add to ad tags based on a call to
   * setAdTagParameters().
   */
  abstract fun getAdTagParameters(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): Map<String, String>?

  /**
   * Returns the ad tag associated with this stream request.
   *
   * Returns null for all stream requests other than cloud based video on demand request.
   */
  abstract fun getAdTagUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /** Returns the API key for the ad server. */
  abstract fun getApiKey(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String

  /**
   * Returns the asset key for server-side ad insertion streams.
   *
   * Returns null for video on demand streams and pod streams.
   */
  abstract fun getAssetKey(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /** Returns the stream request authorization token. */
  abstract fun getAuthToken(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String

  /**
   * Returns the content source ID for video on demand server-side ad insertion streams.
   *
   * Returns null for live streams and pod streams.
   */
  abstract fun getContentSourceId(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /**
   * Returns the source of the content for this stream request.
   *
   * Returns null for all stream requests other than cloud based video on demand request
   */
  abstract fun getContentSourceUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /**
   * Returns the custom asset key for a pod serving request.
   *
   * Returns null for live and video on demand streams.
   */
  abstract fun getCustomAssetKey(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /** Returns the format of the stream request. */
  abstract fun getFormat(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): StreamFormat

  /** Returns the suffix that the SDK will append to the query of the stream manifest URL. */
  abstract fun getManifestSuffix(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String

  /**
   * Returns the network code for a pod serving request.
   *
   * Returns null for live and video on demand streams.
   */
  abstract fun getNetworkCode(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /**
   * Returns the video ID for video on demand server-side ad insertion streams.
   *
   * Returns null for live and pod streams.
   */
  abstract fun getVideoId(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /**
   * Returns the associated Video Stitcher-specific session options for a Video Stitcher stream
   * request.
   *
   * This method will return null unless `setVideoStitcherSessionOptions` was called with some
   * value(s).
   */
  abstract fun getVideoStitcherSessionOptions(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): Map<String, Any>?

  /** The vodConfig ID for the VOD stream, as set up on the Video Stitcher. */
  abstract fun getVodConfigId(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest
  ): String?

  /**
   * Sets the overridable ad tag parameters on the stream request.
   *
   * See https://support.google.com/admanager/answer/7320899.
   */
  abstract fun setAdTagParameters(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest,
      adTagParameters: Map<String, String>
  )

  /** Sets the stream request authorization token. */
  abstract fun setAuthToken(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest,
      authToken: String
  )

  /** Sets the format of the stream request. */
  abstract fun setFormat(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest,
      format: StreamFormat
  )

  /**
   * Sets the stream manifest's suffix, which will be appended to the stream manifest's URL.
   *
   * This setting is optional.
   */
  abstract fun setManifestSuffix(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest,
      manifestSuffix: String
  )

  /** Sets the ID to be used to debug the stream with the stream activity monitor. */
  abstract fun setStreamActivityMonitorId(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest,
      streamActivityMonitorId: String
  )

  /** Sets Video Stitcher-specific session options for a Video Stitcher stream request. */
  abstract fun setVideoStitcherSessionOptions(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamRequest,
      videoStitcherSessionOptions: Map<String, Any>
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiStreamRequest?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getAdTagParameters",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdTagParameters(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getAdTagUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdTagUrl(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getApiKey",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getApiKey(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getAssetKey",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAssetKey(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getAuthToken",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAuthToken(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getContentSourceId",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getContentSourceId(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getContentSourceUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getContentSourceUrl(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getCustomAssetKey",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCustomAssetKey(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getFormat",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getFormat(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getManifestSuffix",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getManifestSuffix(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getNetworkCode",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getNetworkCode(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getVideoId",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getVideoId(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getVideoStitcherSessionOptions",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getVideoStitcherSessionOptions(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.getVodConfigId",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val wrapped: List<Any?> =
                try {
                  listOf(api.getVodConfigId(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.setAdTagParameters",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val adTagParametersArg = args[1] as Map<String, String>
            val wrapped: List<Any?> =
                try {
                  api.setAdTagParameters(pigeon_instanceArg, adTagParametersArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.setAuthToken",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val authTokenArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setAuthToken(pigeon_instanceArg, authTokenArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.setFormat",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val formatArg = args[1] as StreamFormat
            val wrapped: List<Any?> =
                try {
                  api.setFormat(pigeon_instanceArg, formatArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.setManifestSuffix",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val manifestSuffixArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setManifestSuffix(pigeon_instanceArg, manifestSuffixArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.setStreamActivityMonitorId",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val streamActivityMonitorIdArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setStreamActivityMonitorId(pigeon_instanceArg, streamActivityMonitorIdArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamRequest.setVideoStitcherSessionOptions",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.StreamRequest
            val videoStitcherSessionOptionsArg = args[1] as Map<String, Any>
            val wrapped: List<Any?> =
                try {
                  api.setVideoStitcherSessionOptions(
                      pigeon_instanceArg, videoStitcherSessionOptionsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of StreamRequest and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.StreamRequest,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.StreamRequest.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseRequest] used to access callback methods */
  fun pigeon_getPigeonApiBaseRequest(): PigeonApiBaseRequest {
    return pigeonRegistrar.getPigeonApiBaseRequest()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.StreamRequest

/**
 * ProxyApi implementation for [StreamRequest].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class StreamRequestProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiStreamRequest(pigeonRegistrar) {

  override fun getAdTagParameters(pigeon_instance: StreamRequest): Map<String, String>? {
    return pigeon_instance.getAdTagParameters()
  }

  override fun getAdTagUrl(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getAdTagUrl()
  }

  override fun getApiKey(pigeon_instance: StreamRequest): String {
    return pigeon_instance.getApiKey()
  }

  override fun getAssetKey(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getAssetKey()
  }

  override fun getAuthToken(pigeon_instance: StreamRequest): String {
    return pigeon_instance.getAuthToken()
  }

  override fun getContentSourceId(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getContentSourceId()
  }

  override fun getContentSourceUrl(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getContentSourceUrl()
  }

  override fun getCustomAssetKey(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getCustomAssetKey()
  }

  override fun getFormat(pigeon_instance: StreamRequest): StreamFormat {
    return pigeon_instance.getFormat()
  }

  override fun getManifestSuffix(pigeon_instance: StreamRequest): String {
    return pigeon_instance.getManifestSuffix()
  }

  override fun getNetworkCode(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getNetworkCode()
  }

  override fun getVideoId(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getVideoId()
  }

  override fun getVideoStitcherSessionOptions(pigeon_instance: StreamRequest): Map<String, Any>? {
    return pigeon_instance.getVideoStitcherSessionOptions()
  }

  override fun getVodConfigId(pigeon_instance: StreamRequest): String? {
    return pigeon_instance.getVodConfigId()
  }

  override fun setAdTagParameters(pigeon_instance: StreamRequest,adTagParameters: Map<String, String>) {
    pigeon_instance.setAdTagParameters(adTagParameters)
  }

  override fun setAuthToken(pigeon_instance: StreamRequest,authToken: String) {
    pigeon_instance.setAuthToken(authToken)
  }

  override fun setFormat(pigeon_instance: StreamRequest,format: StreamFormat) {
    pigeon_instance.setFormat(format)
  }

  override fun setManifestSuffix(pigeon_instance: StreamRequest,manifestSuffix: String) {
    pigeon_instance.setManifestSuffix(manifestSuffix)
  }

  override fun setStreamActivityMonitorId(pigeon_instance: StreamRequest,streamActivityMonitorId: String) {
    pigeon_instance.setStreamActivityMonitorId(streamActivityMonitorId)
  }

  override fun setVideoStitcherSessionOptions(pigeon_instance: StreamRequest,videoStitcherSessionOptions: Map<String, Any>) {
    pigeon_instance.setVideoStitcherSessionOptions(videoStitcherSessionOptions)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.StreamRequest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class StreamRequestProxyApiTest {
  @Test
  fun getAdTagParameters() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = mapOf("myString" to "myString")
    whenever(instance.getAdTagParameters()).thenReturn(value)

    assertEquals(value, api.getAdTagParameters(instance ))
  }

  @Test
  fun getAdTagUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getAdTagUrl()).thenReturn(value)

    assertEquals(value, api.getAdTagUrl(instance ))
  }

  @Test
  fun getApiKey() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getApiKey()).thenReturn(value)

    assertEquals(value, api.getApiKey(instance ))
  }

  @Test
  fun getAssetKey() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getAssetKey()).thenReturn(value)

    assertEquals(value, api.getAssetKey(instance ))
  }

  @Test
  fun getAuthToken() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getAuthToken()).thenReturn(value)

    assertEquals(value, api.getAuthToken(instance ))
  }

  @Test
  fun getContentSourceId() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getContentSourceId()).thenReturn(value)

    assertEquals(value, api.getContentSourceId(instance ))
  }

  @Test
  fun getContentSourceUrl() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getContentSourceUrl()).thenReturn(value)

    assertEquals(value, api.getContentSourceUrl(instance ))
  }

  @Test
  fun getCustomAssetKey() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getCustomAssetKey()).thenReturn(value)

    assertEquals(value, api.getCustomAssetKey(instance ))
  }

  @Test
  fun getFormat() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = dev.flutter.packages.interactive_media_ads.StreamFormat.DASH
    whenever(instance.getFormat()).thenReturn(value)

    assertEquals(value, api.getFormat(instance ))
  }

  @Test
  fun getManifestSuffix() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getManifestSuffix()).thenReturn(value)

    assertEquals(value, api.getManifestSuffix(instance ))
  }

  @Test
  fun getNetworkCode() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getNetworkCode()).thenReturn(value)

    assertEquals(value, api.getNetworkCode(instance ))
  }

  @Test
  fun getVideoId() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getVideoId()).thenReturn(value)

    assertEquals(value, api.getVideoId(instance ))
  }

  @Test
  fun getVideoStitcherSessionOptions() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = mapOf("myString" to -1)
    whenever(instance.getVideoStitcherSessionOptions()).thenReturn(value)

    assertEquals(value, api.getVideoStitcherSessionOptions(instance ))
  }

  @Test
  fun getVodConfigId() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val value = "myString"
    whenever(instance.getVodConfigId()).thenReturn(value)

    assertEquals(value, api.getVodConfigId(instance ))
  }

  @Test
  fun setAdTagParameters() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val adTagParameters = mapOf("myString" to "myString")
    api.setAdTagParameters(instance, adTagParameters)

    verify(instance).setAdTagParameters(adTagParameters)
  }

  @Test
  fun setAuthToken() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val authToken = "myString"
    api.setAuthToken(instance, authToken)

    verify(instance).setAuthToken(authToken)
  }

  @Test
  fun setFormat() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val format = dev.flutter.packages.interactive_media_ads.StreamFormat.DASH
    api.setFormat(instance, format)

    verify(instance).setFormat(format)
  }

  @Test
  fun setManifestSuffix() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val manifestSuffix = "myString"
    api.setManifestSuffix(instance, manifestSuffix)

    verify(instance).setManifestSuffix(manifestSuffix)
  }

  @Test
  fun setStreamActivityMonitorId() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val streamActivityMonitorId = "myString"
    api.setStreamActivityMonitorId(instance, streamActivityMonitorId)

    verify(instance).setStreamActivityMonitorId(streamActivityMonitorId)
  }

  @Test
  fun setVideoStitcherSessionOptions() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamRequest()

    val instance = mock<StreamRequest>()
    val videoStitcherSessionOptions = mapOf("myString" to -1)
    api.setVideoStitcherSessionOptions(instance, videoStitcherSessionOptions)

    verify(instance).setVideoStitcherSessionOptions(videoStitcherSessionOptions)
  }

}
*/
/**
 * Defines an interface to allow SDK to track progress of the content video.
 *
 * See
 * https://developers.google.com/ad-manager/dynamic-ad-insertion/sdk/android/api/reference/com/google/ads/interactivemedia/v3/api/player/ContentProgressProvider.html.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiContentProgressProvider(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ContentProgressProvider and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider

/**
 * ProxyApi implementation for [ContentProgressProvider].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ContentProgressProviderProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiContentProgressProvider(pigeonRegistrar) {

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class ContentProgressProviderProxyApiTest {
}
*/
/**
 * An object which handles playing ads after they've been received from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManager.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManager(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Discards current ad break and resumes content. */
  abstract fun discardAdBreak(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /** Pauses the current ad. */
  abstract fun pause(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /** Starts playing the ads. */
  abstract fun start(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /**
   * List of content time offsets in seconds at which ad breaks are scheduled.
   *
   * The list will be empty if no ad breaks are scheduled.
   */
  abstract fun getAdCuePoints(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager
  ): List<Double>

  /** Resumes the current ad. */
  abstract fun resume(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /**
   * Skips the current ad.
   *
   * `AdsManager.skip()` only skips ads if IMA does not render the 'Skip ad' button.
   */
  abstract fun skip(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.discardAdBreak",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.discardAdBreak(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.pause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.start", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.start(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.getAdCuePoints",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdCuePoints(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.resume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.resume(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.skip", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.skip(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseManager] used to access callback methods */
  fun pigeon_getPigeonApiBaseManager(): PigeonApiBaseManager {
    return pigeonRegistrar.getPigeonApiBaseManager()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManager

/**
 * ProxyApi implementation for [AdsManager].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsManagerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsManager(pigeonRegistrar) {

  override fun discardAdBreak(pigeon_instance: AdsManager) {
    pigeon_instance.discardAdBreak()
  }

  override fun pause(pigeon_instance: AdsManager) {
    pigeon_instance.pause()
  }

  override fun start(pigeon_instance: AdsManager) {
    pigeon_instance.start()
  }

  override fun getAdCuePoints(pigeon_instance: AdsManager): List<Double> {
    return pigeon_instance.getAdCuePoints()
  }

  override fun resume(pigeon_instance: AdsManager) {
    pigeon_instance.resume()
  }

  override fun skip(pigeon_instance: AdsManager) {
    pigeon_instance.skip()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsManager
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdsManagerProxyApiTest {
  @Test
  fun discardAdBreak() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.discardAdBreak(instance )

    verify(instance).discardAdBreak()
  }

  @Test
  fun pause() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.pause(instance )

    verify(instance).pause()
  }

  @Test
  fun start() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.start(instance )

    verify(instance).start()
  }

  @Test
  fun getAdCuePoints() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    val value = listOf(1.0)
    whenever(instance.getAdCuePoints()).thenReturn(value)

    assertEquals(value, api.getAdCuePoints(instance ))
  }

  @Test
  fun resume() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.resume(instance )

    verify(instance).resume()
  }

  @Test
  fun skip() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsManager()

    val instance = mock<AdsManager>()
    api.skip(instance )

    verify(instance).skip()
  }

}
*/
/**
 * Base interface for managing ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseManager.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseManager(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Registers a listener for errors that occur during the ad or stream initialization and playback.
   */
  abstract fun addAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /**
   * Registers a listener for ad events that occur during ad or stream initialization and playback.
   */
  abstract fun addAdEventListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
  )

  /** Stops the ad and all tracking, then releases all assets that were loaded to play the ad. */
  abstract fun destroy(pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager)

  /** Initializes the ad experience on the manager. */
  abstract fun init(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      settings: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings?
  )

  /** Generic focus endpoint that puts focus on the skip button if present. */
  abstract fun focus(pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager)

  /** Returns the latest AdProgressInfo for the current playing ad. */
  abstract fun getAdProgressInfo(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager
  ): com.google.ads.interactivemedia.v3.api.AdProgressInfo?

  /** Get currently playing ad. */
  abstract fun getCurrentAd(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager
  ): com.google.ads.interactivemedia.v3.api.Ad?

  /** Removes a listener for error events. */
  abstract fun removeAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /** Removes a listener for ad events. */
  abstract fun removeAdEventListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBaseManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val errorListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.addAdErrorListener(pigeon_instanceArg, errorListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdEventListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val adEventListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
            val wrapped: List<Any?> =
                try {
                  api.addAdEventListener(pigeon_instanceArg, adEventListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.destroy",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  api.destroy(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.BaseManager.init", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val settingsArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings?
            val wrapped: List<Any?> =
                try {
                  api.init(pigeon_instanceArg, settingsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.focus",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  api.focus(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.getAdProgressInfo",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdProgressInfo(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.getCurrentAd",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCurrentAd(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.removeAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val errorListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.removeAdErrorListener(pigeon_instanceArg, errorListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.removeAdEventListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val adEventListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
            val wrapped: List<Any?> =
                try {
                  api.removeAdEventListener(pigeon_instanceArg, adEventListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.BaseManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseManager
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
import com.google.ads.interactivemedia.v3.api.AdProgressInfo
import com.google.ads.interactivemedia.v3.api.Ad

/**
 * ProxyApi implementation for [BaseManager].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class BaseManagerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiBaseManager(pigeonRegistrar) {

  override fun addAdErrorListener(pigeon_instance: BaseManager,errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
    pigeon_instance.addAdErrorListener(errorListener)
  }

  override fun addAdEventListener(pigeon_instance: BaseManager,adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener) {
    pigeon_instance.addAdEventListener(adEventListener)
  }

  override fun destroy(pigeon_instance: BaseManager) {
    pigeon_instance.destroy()
  }

  override fun init(pigeon_instance: BaseManager,settings: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings?) {
    pigeon_instance.init(settings)
  }

  override fun focus(pigeon_instance: BaseManager) {
    pigeon_instance.focus()
  }

  override fun getAdProgressInfo(pigeon_instance: BaseManager): com.google.ads.interactivemedia.v3.api.AdProgressInfo? {
    return pigeon_instance.getAdProgressInfo()
  }

  override fun getCurrentAd(pigeon_instance: BaseManager): com.google.ads.interactivemedia.v3.api.Ad? {
    return pigeon_instance.getCurrentAd()
  }

  override fun removeAdErrorListener(pigeon_instance: BaseManager,errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
    pigeon_instance.removeAdErrorListener(errorListener)
  }

  override fun removeAdEventListener(pigeon_instance: BaseManager,adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener) {
    pigeon_instance.removeAdEventListener(adEventListener)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.BaseManager
import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
import com.google.ads.interactivemedia.v3.api.AdProgressInfo
import com.google.ads.interactivemedia.v3.api.Ad
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class BaseManagerProxyApiTest {
  @Test
  fun addAdErrorListener() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val errorListener = mock<AdErrorListener>()
    api.addAdErrorListener(instance, errorListener)

    verify(instance).addAdErrorListener(errorListener)
  }

  @Test
  fun addAdEventListener() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val adEventListener = mock<AdEventListener>()
    api.addAdEventListener(instance, adEventListener)

    verify(instance).addAdEventListener(adEventListener)
  }

  @Test
  fun destroy() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    api.destroy(instance )

    verify(instance).destroy()
  }

  @Test
  fun init() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val settings = mock<AdsRenderingSettings>()
    api.init(instance, settings)

    verify(instance).init(settings)
  }

  @Test
  fun focus() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    api.focus(instance )

    verify(instance).focus()
  }

  @Test
  fun getAdProgressInfo() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val value = mock<AdProgressInfo>()
    whenever(instance.getAdProgressInfo()).thenReturn(value)

    assertEquals(value, api.getAdProgressInfo(instance ))
  }

  @Test
  fun getCurrentAd() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val value = mock<Ad>()
    whenever(instance.getCurrentAd()).thenReturn(value)

    assertEquals(value, api.getCurrentAd(instance ))
  }

  @Test
  fun removeAdErrorListener() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val errorListener = mock<AdErrorListener>()
    api.removeAdErrorListener(instance, errorListener)

    verify(instance).removeAdErrorListener(errorListener)
  }

  @Test
  fun removeAdEventListener() {
    val api = TestProxyApiRegistrar().getPigeonApiBaseManager()

    val instance = mock<BaseManager>()
    val adEventListener = mock<AdEventListener>()
    api.removeAdEventListener(instance, adEventListener)

    verify(instance).removeAdEventListener(adEventListener)
  }

}
*/
/**
 * Defines parameters that control the rendering of ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRenderingSettings.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsRenderingSettings(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Maximum recommended bitrate. */
  abstract fun getBitrateKbps(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Long

  /** Returns whether the click-through URL will be opened using Custom Tabs feature. */
  abstract fun getEnableCustomTabs(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Boolean

  /**
   * Whether the SDK will instruct the player to load the creative in response to
   * `BaseManager.init()`.
   */
  abstract fun getEnablePreloading(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Boolean

  /**
   * Whether to focus on the skip button when the skippable ad can be skipped on Android TV.
   *
   * This is a no-op on non-Android TV devices.
   */
  abstract fun getFocusSkipButtonWhenAvailable(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Boolean

  /** The SDK will prioritize the media with MIME type on the list. */
  abstract fun getMimeTypes(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): List<String>

  /**
   * Maximum recommended bitrate.
   *
   * The value is in kbit/s. Default value, -1, means the bitrate will be selected by the SDK.
   */
  abstract fun setBitrateKbps(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      bitrate: Long
  )

  /**
   * Notifies the SDK whether to launch the click-through URL using Custom Tabs feature.
   *
   * Default is false.
   */
  abstract fun setEnableCustomTabs(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      enableCustomTabs: Boolean
  )

  /**
   * If set, the SDK will instruct the player to load the creative in response to
   * `BaseManager.init()`.
   *
   * This allows the player to preload the ad at any point before calling `AdsManager.start()`.
   */
  abstract fun setEnablePreloading(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      enablePreloading: Boolean
  )

  /**
   * Set whether to focus on the skip button when the skippable ad can be skipped on Android TV.
   *
   * This is a no-op on non-Android TV devices.
   *
   * Default is true.
   */
  abstract fun setFocusSkipButtonWhenAvailable(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      enableFocusSkipButton: Boolean
  )

  /**
   * Specifies a non-default amount of time to wait for media to load before timing out, in
   * milliseconds.
   *
   * This only applies to the IMA client-side SDK.
   *
   * Default time is 8000 ms.
   */
  abstract fun setLoadVideoTimeout(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      loadVideoTimeout: Long
  )

  /** If specified, the SDK will prioritize the media with MIME type on the list. */
  abstract fun setMimeTypes(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      mimeTypes: List<String>
  )

  /**
   * For VMAP and ad rules playlists, only play ad breaks scheduled after this time (in seconds).
   */
  abstract fun setPlayAdsAfterTime(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      time: Double
  )

  /** Sets the ad UI elements to be rendered by the IMA SDK. */
  abstract fun setUiElements(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      uiElements: List<UiElement>
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiAdsRenderingSettings?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getBitrateKbps",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getBitrateKbps(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getEnableCustomTabs",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getEnableCustomTabs(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getEnablePreloading",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getEnablePreloading(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getFocusSkipButtonWhenAvailable",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getFocusSkipButtonWhenAvailable(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getMimeTypes",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getMimeTypes(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setBitrateKbps",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val bitrateArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setBitrateKbps(pigeon_instanceArg, bitrateArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setEnableCustomTabs",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val enableCustomTabsArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setEnableCustomTabs(pigeon_instanceArg, enableCustomTabsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setEnablePreloading",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val enablePreloadingArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setEnablePreloading(pigeon_instanceArg, enablePreloadingArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setFocusSkipButtonWhenAvailable",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val enableFocusSkipButtonArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setFocusSkipButtonWhenAvailable(pigeon_instanceArg, enableFocusSkipButtonArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setLoadVideoTimeout",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val loadVideoTimeoutArg =
                args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setLoadVideoTimeout(pigeon_instanceArg, loadVideoTimeoutArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setMimeTypes",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val mimeTypesArg = args[1] as List<String>
            val wrapped: List<Any?> =
                try {
                  api.setMimeTypes(pigeon_instanceArg, mimeTypesArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setPlayAdsAfterTime",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val timeArg = args[1] as Double
            val wrapped: List<Any?> =
                try {
                  api.setPlayAdsAfterTime(pigeon_instanceArg, timeArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setUiElements",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val uiElementsArg = args[1] as List<UiElement>
            val wrapped: List<Any?> =
                try {
                  api.setUiElements(pigeon_instanceArg, uiElementsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsRenderingSettings and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsRenderingSettings

/**
 * ProxyApi implementation for [AdsRenderingSettings].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsRenderingSettingsProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsRenderingSettings(pigeonRegistrar) {

  override fun getBitrateKbps(pigeon_instance: AdsRenderingSettings): Long {
    return pigeon_instance.getBitrateKbps()
  }

  override fun getEnableCustomTabs(pigeon_instance: AdsRenderingSettings): Boolean {
    return pigeon_instance.getEnableCustomTabs()
  }

  override fun getEnablePreloading(pigeon_instance: AdsRenderingSettings): Boolean {
    return pigeon_instance.getEnablePreloading()
  }

  override fun getFocusSkipButtonWhenAvailable(pigeon_instance: AdsRenderingSettings): Boolean {
    return pigeon_instance.getFocusSkipButtonWhenAvailable()
  }

  override fun getMimeTypes(pigeon_instance: AdsRenderingSettings): List<String> {
    return pigeon_instance.getMimeTypes()
  }

  override fun setBitrateKbps(pigeon_instance: AdsRenderingSettings,bitrate: Long) {
    pigeon_instance.setBitrateKbps(bitrate)
  }

  override fun setEnableCustomTabs(pigeon_instance: AdsRenderingSettings,enableCustomTabs: Boolean) {
    pigeon_instance.setEnableCustomTabs(enableCustomTabs)
  }

  override fun setEnablePreloading(pigeon_instance: AdsRenderingSettings,enablePreloading: Boolean) {
    pigeon_instance.setEnablePreloading(enablePreloading)
  }

  override fun setFocusSkipButtonWhenAvailable(pigeon_instance: AdsRenderingSettings,enableFocusSkipButton: Boolean) {
    pigeon_instance.setFocusSkipButtonWhenAvailable(enableFocusSkipButton)
  }

  override fun setLoadVideoTimeout(pigeon_instance: AdsRenderingSettings,loadVideoTimeout: Long) {
    pigeon_instance.setLoadVideoTimeout(loadVideoTimeout)
  }

  override fun setMimeTypes(pigeon_instance: AdsRenderingSettings,mimeTypes: List<String>) {
    pigeon_instance.setMimeTypes(mimeTypes)
  }

  override fun setPlayAdsAfterTime(pigeon_instance: AdsRenderingSettings,time: Double) {
    pigeon_instance.setPlayAdsAfterTime(time)
  }

  override fun setUiElements(pigeon_instance: AdsRenderingSettings,uiElements: List<UiElement>) {
    pigeon_instance.setUiElements(uiElements)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdsRenderingSettingsProxyApiTest {
  @Test
  fun getBitrateKbps() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val value = 0
    whenever(instance.getBitrateKbps()).thenReturn(value)

    assertEquals(value, api.getBitrateKbps(instance ))
  }

  @Test
  fun getEnableCustomTabs() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val value = true
    whenever(instance.getEnableCustomTabs()).thenReturn(value)

    assertEquals(value, api.getEnableCustomTabs(instance ))
  }

  @Test
  fun getEnablePreloading() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val value = true
    whenever(instance.getEnablePreloading()).thenReturn(value)

    assertEquals(value, api.getEnablePreloading(instance ))
  }

  @Test
  fun getFocusSkipButtonWhenAvailable() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val value = true
    whenever(instance.getFocusSkipButtonWhenAvailable()).thenReturn(value)

    assertEquals(value, api.getFocusSkipButtonWhenAvailable(instance ))
  }

  @Test
  fun getMimeTypes() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val value = listOf("myString")
    whenever(instance.getMimeTypes()).thenReturn(value)

    assertEquals(value, api.getMimeTypes(instance ))
  }

  @Test
  fun setBitrateKbps() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val bitrate = 0
    api.setBitrateKbps(instance, bitrate)

    verify(instance).setBitrateKbps(bitrate)
  }

  @Test
  fun setEnableCustomTabs() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val enableCustomTabs = true
    api.setEnableCustomTabs(instance, enableCustomTabs)

    verify(instance).setEnableCustomTabs(enableCustomTabs)
  }

  @Test
  fun setEnablePreloading() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val enablePreloading = true
    api.setEnablePreloading(instance, enablePreloading)

    verify(instance).setEnablePreloading(enablePreloading)
  }

  @Test
  fun setFocusSkipButtonWhenAvailable() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val enableFocusSkipButton = true
    api.setFocusSkipButtonWhenAvailable(instance, enableFocusSkipButton)

    verify(instance).setFocusSkipButtonWhenAvailable(enableFocusSkipButton)
  }

  @Test
  fun setLoadVideoTimeout() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val loadVideoTimeout = 0
    api.setLoadVideoTimeout(instance, loadVideoTimeout)

    verify(instance).setLoadVideoTimeout(loadVideoTimeout)
  }

  @Test
  fun setMimeTypes() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val mimeTypes = listOf("myString")
    api.setMimeTypes(instance, mimeTypes)

    verify(instance).setMimeTypes(mimeTypes)
  }

  @Test
  fun setPlayAdsAfterTime() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val time = 1.0
    api.setPlayAdsAfterTime(instance, time)

    verify(instance).setPlayAdsAfterTime(time)
  }

  @Test
  fun setUiElements() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsRenderingSettings()

    val instance = mock<AdsRenderingSettings>()
    val uiElements = listOf(dev.flutter.packages.interactive_media_ads.UiElement.AD_ATTRIBUTION)
    api.setUiElements(instance, uiElements)

    verify(instance).setUiElements(uiElements)
  }

}
*/
/**
 * Represents the progress within this ad break.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdProgressInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdProgressInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Total ad break duration (in seconds). */
  abstract fun adBreakDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** Total ad period duration (in seconds). */
  abstract fun adPeriodDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** The position of current ad within the ad break, starting with 1. */
  abstract fun adPosition(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Long

  /** Current time within the ad (in seconds). */
  abstract fun currentTime(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** Duration of current ad (in seconds). */
  abstract fun duration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** The total number of ads in this ad break. */
  abstract fun totalAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdProgressInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdProgressInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adBreakDurationArg = adBreakDuration(pigeon_instanceArg)
    val adPeriodDurationArg = adPeriodDuration(pigeon_instanceArg)
    val adPositionArg = adPosition(pigeon_instanceArg)
    val currentTimeArg = currentTime(pigeon_instanceArg)
    val durationArg = duration(pigeon_instanceArg)
    val totalAdsArg = totalAds(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdProgressInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adBreakDurationArg,
            adPeriodDurationArg,
            adPositionArg,
            currentTimeArg,
            durationArg,
            totalAdsArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdProgressInfo

/**
 * ProxyApi implementation for [AdProgressInfo].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdProgressInfoProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdProgressInfo(pigeonRegistrar) {

  override fun adBreakDuration(pigeon_instance: AdProgressInfo): Double {
    return pigeon_instance.adBreakDuration
  }

  override fun adPeriodDuration(pigeon_instance: AdProgressInfo): Double {
    return pigeon_instance.adPeriodDuration
  }

  override fun adPosition(pigeon_instance: AdProgressInfo): Long {
    return pigeon_instance.adPosition
  }

  override fun currentTime(pigeon_instance: AdProgressInfo): Double {
    return pigeon_instance.currentTime
  }

  override fun duration(pigeon_instance: AdProgressInfo): Double {
    return pigeon_instance.duration
  }

  override fun totalAds(pigeon_instance: AdProgressInfo): Long {
    return pigeon_instance.totalAds
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdProgressInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdProgressInfoProxyApiTest {
  @Test
  fun adBreakDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiAdProgressInfo()

    val instance = mock<AdProgressInfo>()
    val value = 1.0
    whenever(instance.adBreakDuration).thenReturn(value)

    assertEquals(value, api.adBreakDuration(instance))
  }

  @Test
  fun adPeriodDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiAdProgressInfo()

    val instance = mock<AdProgressInfo>()
    val value = 1.0
    whenever(instance.adPeriodDuration).thenReturn(value)

    assertEquals(value, api.adPeriodDuration(instance))
  }

  @Test
  fun adPosition() {
    val api = TestProxyApiRegistrar().getPigeonApiAdProgressInfo()

    val instance = mock<AdProgressInfo>()
    val value = 0
    whenever(instance.adPosition).thenReturn(value)

    assertEquals(value, api.adPosition(instance))
  }

  @Test
  fun currentTime() {
    val api = TestProxyApiRegistrar().getPigeonApiAdProgressInfo()

    val instance = mock<AdProgressInfo>()
    val value = 1.0
    whenever(instance.currentTime).thenReturn(value)

    assertEquals(value, api.currentTime(instance))
  }

  @Test
  fun duration() {
    val api = TestProxyApiRegistrar().getPigeonApiAdProgressInfo()

    val instance = mock<AdProgressInfo>()
    val value = 1.0
    whenever(instance.duration).thenReturn(value)

    assertEquals(value, api.duration(instance))
  }

  @Test
  fun totalAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAdProgressInfo()

    val instance = mock<AdProgressInfo>()
    val value = 0
    whenever(instance.totalAds).thenReturn(value)

    assertEquals(value, api.totalAds(instance))
  }

}
*/
/**
 * Event to notify publisher that an event occurred with an Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The type of event that occurred. */
  abstract fun type(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent): AdEventType

  /** A map containing any extra ad data for the event, if needed. */
  abstract fun adData(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent
  ): Map<String, String>?

  /** The ad with which this event is associated. */
  abstract fun ad(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent
  ): com.google.ads.interactivemedia.v3.api.Ad

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val adDataArg = adData(pigeon_instanceArg)
    val adArg = ad(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, adDataArg, adArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent
import com.google.ads.interactivemedia.v3.api.Ad

/**
 * ProxyApi implementation for [AdEvent].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdEventProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdEvent(pigeonRegistrar) {

  override fun type(pigeon_instance: AdEvent): AdEventType {
    return when (pigeon_instance.type) {
      AdEventType.AD_BREAK_ENDED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_ENDED
      AdEventType.AD_BREAK_FETCH_ERROR -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_FETCH_ERROR
      AdEventType.AD_BREAK_READY -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_READY
      AdEventType.AD_BREAK_STARTED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_STARTED
      AdEventType.AD_BUFFERING -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_BUFFERING
      AdEventType.AD_PERIOD_ENDED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_PERIOD_ENDED
      AdEventType.AD_PERIOD_STARTED -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_PERIOD_STARTED
      AdEventType.AD_PROGRESS -> dev.flutter.packages.interactive_media_ads.AdEventType.AD_PROGRESS
      AdEventType.ALL_ADS_COMPLETED -> dev.flutter.packages.interactive_media_ads.AdEventType.ALL_ADS_COMPLETED
      AdEventType.CLICKED -> dev.flutter.packages.interactive_media_ads.AdEventType.CLICKED
      AdEventType.COMPLETED -> dev.flutter.packages.interactive_media_ads.AdEventType.COMPLETED
      AdEventType.CONTENT_PAUSE_REQUESTED -> dev.flutter.packages.interactive_media_ads.AdEventType.CONTENT_PAUSE_REQUESTED
      AdEventType.CONTENT_RESUME_REQUESTED -> dev.flutter.packages.interactive_media_ads.AdEventType.CONTENT_RESUME_REQUESTED
      AdEventType.CUEPOINTS_CHANGED -> dev.flutter.packages.interactive_media_ads.AdEventType.CUEPOINTS_CHANGED
      AdEventType.FIRST_QUARTILE -> dev.flutter.packages.interactive_media_ads.AdEventType.FIRST_QUARTILE
      AdEventType.ICON_FALLBACK_IMAGE_CLOSED -> dev.flutter.packages.interactive_media_ads.AdEventType.ICON_FALLBACK_IMAGE_CLOSED
      AdEventType.ICON_TAPPED -> dev.flutter.packages.interactive_media_ads.AdEventType.ICON_TAPPED
      AdEventType.LOADED -> dev.flutter.packages.interactive_media_ads.AdEventType.LOADED
      AdEventType.LOG -> dev.flutter.packages.interactive_media_ads.AdEventType.LOG
      AdEventType.MIDPOINT -> dev.flutter.packages.interactive_media_ads.AdEventType.MIDPOINT
      AdEventType.PAUSED -> dev.flutter.packages.interactive_media_ads.AdEventType.PAUSED
      AdEventType.RESUMED -> dev.flutter.packages.interactive_media_ads.AdEventType.RESUMED
      AdEventType.SKIPPABLE_STATE_CHANGED -> dev.flutter.packages.interactive_media_ads.AdEventType.SKIPPABLE_STATE_CHANGED
      AdEventType.SKIPPED -> dev.flutter.packages.interactive_media_ads.AdEventType.SKIPPED
      AdEventType.STARTED -> dev.flutter.packages.interactive_media_ads.AdEventType.STARTED
      AdEventType.TAPPED -> dev.flutter.packages.interactive_media_ads.AdEventType.TAPPED
      AdEventType.THIRD_QUARTILE -> dev.flutter.packages.interactive_media_ads.AdEventType.THIRD_QUARTILE
      else -> dev.flutter.packages.interactive_media_ads.AdEventType.UNKNOWN
    }
  }

  override fun adData(pigeon_instance: AdEvent): Map<String, String>? {
    return pigeon_instance.adData
  }

  override fun ad(pigeon_instance: AdEvent): com.google.ads.interactivemedia.v3.api.Ad {
    return pigeon_instance.ad
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent
import com.google.ads.interactivemedia.v3.api.Ad
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdEventProxyApiTest {
  @Test
  fun type() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEvent()

    val instance = mock<AdEvent>()
    val value = dev.flutter.packages.interactive_media_ads.AdEventType.AD_BREAK_ENDED
    whenever(instance.type).thenReturn(value)

    assertEquals(value, api.type(instance))
  }

  @Test
  fun adData() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEvent()

    val instance = mock<AdEvent>()
    val value = mapOf("myString" to "myString")
    whenever(instance.adData).thenReturn(value)

    assertEquals(value, api.adData(instance))
  }

  @Test
  fun ad() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEvent()

    val instance = mock<AdEvent>()
    val value = mock<Ad>()
    whenever(instance.ad).thenReturn(value)

    assertEquals(value, api.ad(instance))
  }

}
*/
/**
 * Factory class for creating SDK objects.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkFactory.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImaSdkFactory(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The global ImaSdkFactory object. */
  abstract fun instance(): com.google.ads.interactivemedia.v3.api.ImaSdkFactory

  /**
   * Creates an `AdDisplayContainer` to hold the player for video ads, a container for non-linear
   * ads, and slots for companion ads.
   */
  abstract fun createAdDisplayContainer(
      container: android.view.ViewGroup,
      player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
  ): com.google.ads.interactivemedia.v3.api.AdDisplayContainer

  /** Creates an `ImaSdkSettings` object for configuring the IMA SDK. */
  abstract fun createImaSdkSettings(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.ImaSdkSettings

  /** Creates an `AdsLoader` for requesting ads using the specified settings object. */
  abstract fun createAdsLoader(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      container: com.google.ads.interactivemedia.v3.api.AdDisplayContainer
  ): com.google.ads.interactivemedia.v3.api.AdsLoader

  /** Creates an AdsRequest object to contain the data used to request ads. */
  abstract fun createAdsRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.AdsRequest

  /**
   * Creates an AdsLoader for requesting server-side ad insertion ads using the specified settings
   * object.
   */
  abstract fun createStreamAdsLoader(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      container: com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
  ): com.google.ads.interactivemedia.v3.api.AdsLoader

  /**
   * Creates an `AdsRenderingSettings` object to give the `AdsManager` parameters that control the
   * rendering of ads.
   */
  abstract fun createAdsRenderingSettings(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.AdsRenderingSettings

  /** Creates an `AdDisplayContainer` for audio ads. */
  abstract fun createAudioAdDisplayContainer(
      player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
  ): com.google.ads.interactivemedia.v3.api.AdDisplayContainer

  /** Creates a `CompanionAdSlot` for the SDK to fill with companion ads. */
  abstract fun createCompanionAdSlot(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.CompanionAdSlot

  /**
   * Creates a `FriendlyObstruction` object to describe an obstruction considered "friendly" for
   * viewability measurement purposes.
   *
   * If the detailedReason is not null, it must follow the IAB standard by being 50 characters or
   * less and only containing characters A-z , 0-9, or spaces.
   */
  abstract fun createFriendlyObstruction(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      view: android.view.View,
      purpose: FriendlyObstructionPurpose,
      detailedReason: String?
  ): com.google.ads.interactivemedia.v3.api.FriendlyObstruction

  /**
   * Creates a `StreamRequest` object to contain the data used to request a server-side ad insertion
   * live stream.
   */
  abstract fun createLiveStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      assetKey: String,
      apiKey: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  /**
   * Creates a StreamRequest object to contain the data used to request a server-side ad insertion
   * pod serving live stream.
   */
  abstract fun createPodStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      networkCode: String,
      customAssetKey: String,
      apiKey: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  /**
   * Creates a StreamRequest object to contain the data used to request a 3rd party stitched
   * server-side ad insertion pod serving vod stream.
   */
  abstract fun createPodVodStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      networkCode: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  /**
   * Creates a `StreamDisplayContainer` to hold the player for server-side ad insertion streams and
   * slots for companion ads.
   */
  abstract fun createStreamDisplayContainer(
      container: android.view.ViewGroup,
      player: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
  ): com.google.ads.interactivemedia.v3.api.StreamDisplayContainer

  /**
   * Creates a `StreamRequest` object to contain the data used to request a cloud video stitcher
   * server-side ad insertion pod live serving stream.
   */
  abstract fun createVideoStitcherLiveStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      networkCode: String,
      customAssetKey: String,
      liveStreamEventId: String,
      region: String,
      projectNumber: String,
      oAuthToken: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  /**
   * Creates a `StreamRequest` object to contain the data used to request a cloud video stitcher
   * server-side ad insertion pod serving vod stream.
   */
  abstract fun createContentSourceVideoStitcherVodStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      contentSourceUrl: String,
      networkCode: String,
      region: String,
      projectNumber: String,
      oAuthToken: String,
      adTagUrl: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  /**
   * Creates a `StreamRequest` object to contain the data used to request a cloud video stitcher
   * server-side ad insertion pod serving vod stream, with a vod config flow.
   */
  abstract fun createVideoStitcherVodStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      networkCode: String,
      region: String,
      projectNumber: String,
      oAuthToken: String,
      vodConfigId: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  /**
   * Creates a StreamRequest object to contain the data used to request a server-side ad insertion
   * video on demand stream.
   */
  abstract fun createVodStreamRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      contentSourceId: String,
      videoId: String,
      apiKey: String
  ): com.google.ads.interactivemedia.v3.api.StreamRequest

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImaSdkFactory?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.instance",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.instance(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdDisplayContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val containerArg = args[0] as android.view.ViewGroup
            val playerArg = args[1] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdDisplayContainer(containerArg, playerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createImaSdkSettings",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createImaSdkSettings(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsLoader",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val settingsArg = args[1] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val containerArg = args[2] as com.google.ads.interactivemedia.v3.api.AdDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsLoader(pigeon_instanceArg, settingsArg, containerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsRequest(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createStreamAdsLoader",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val settingsArg = args[1] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val containerArg =
                args[2] as com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createStreamAdsLoader(pigeon_instanceArg, settingsArg, containerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsRenderingSettings",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsRenderingSettings(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAudioAdDisplayContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerArg = args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAudioAdDisplayContainer(playerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createCompanionAdSlot",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createCompanionAdSlot(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createFriendlyObstruction",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val viewArg = args[1] as android.view.View
            val purposeArg = args[2] as FriendlyObstructionPurpose
            val detailedReasonArg = args[3] as String?
            val wrapped: List<Any?> =
                try {
                  listOf(
                      api.createFriendlyObstruction(
                          pigeon_instanceArg, viewArg, purposeArg, detailedReasonArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createLiveStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val assetKeyArg = args[1] as String
            val apiKeyArg = args[2] as String
            val wrapped: List<Any?> =
                try {
                  listOf(api.createLiveStreamRequest(pigeon_instanceArg, assetKeyArg, apiKeyArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createPodStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val networkCodeArg = args[1] as String
            val customAssetKeyArg = args[2] as String
            val apiKeyArg = args[3] as String
            val wrapped: List<Any?> =
                try {
                  listOf(
                      api.createPodStreamRequest(
                          pigeon_instanceArg, networkCodeArg, customAssetKeyArg, apiKeyArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createPodVodStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val networkCodeArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  listOf(api.createPodVodStreamRequest(pigeon_instanceArg, networkCodeArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createStreamDisplayContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val containerArg = args[0] as android.view.ViewGroup
            val playerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createStreamDisplayContainer(containerArg, playerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createVideoStitcherLiveStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val networkCodeArg = args[1] as String
            val customAssetKeyArg = args[2] as String
            val liveStreamEventIdArg = args[3] as String
            val regionArg = args[4] as String
            val projectNumberArg = args[5] as String
            val oAuthTokenArg = args[6] as String
            val wrapped: List<Any?> =
                try {
                  listOf(
                      api.createVideoStitcherLiveStreamRequest(
                          pigeon_instanceArg,
                          networkCodeArg,
                          customAssetKeyArg,
                          liveStreamEventIdArg,
                          regionArg,
                          projectNumberArg,
                          oAuthTokenArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createContentSourceVideoStitcherVodStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val contentSourceUrlArg = args[1] as String
            val networkCodeArg = args[2] as String
            val regionArg = args[3] as String
            val projectNumberArg = args[4] as String
            val oAuthTokenArg = args[5] as String
            val adTagUrlArg = args[6] as String
            val wrapped: List<Any?> =
                try {
                  listOf(
                      api.createContentSourceVideoStitcherVodStreamRequest(
                          pigeon_instanceArg,
                          contentSourceUrlArg,
                          networkCodeArg,
                          regionArg,
                          projectNumberArg,
                          oAuthTokenArg,
                          adTagUrlArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createVideoStitcherVodStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val networkCodeArg = args[1] as String
            val regionArg = args[2] as String
            val projectNumberArg = args[3] as String
            val oAuthTokenArg = args[4] as String
            val vodConfigIdArg = args[5] as String
            val wrapped: List<Any?> =
                try {
                  listOf(
                      api.createVideoStitcherVodStreamRequest(
                          pigeon_instanceArg,
                          networkCodeArg,
                          regionArg,
                          projectNumberArg,
                          oAuthTokenArg,
                          vodConfigIdArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createVodStreamRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val contentSourceIdArg = args[1] as String
            val videoIdArg = args[2] as String
            val apiKeyArg = args[3] as String
            val wrapped: List<Any?> =
                try {
                  listOf(
                      api.createVodStreamRequest(
                          pigeon_instanceArg, contentSourceIdArg, videoIdArg, apiKeyArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkFactory and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkFactory
import android.view.ViewGroup
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import com.google.ads.interactivemedia.v3.api.AdDisplayContainer
import com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
import android.view.View
import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
import com.google.ads.interactivemedia.v3.api.AdsLoader
import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import com.google.ads.interactivemedia.v3.api.StreamRequest

/**
 * ProxyApi implementation for [ImaSdkFactory].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ImaSdkFactoryProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiImaSdkFactory(pigeonRegistrar) {

  override fun instance(): com.google.ads.interactivemedia.v3.api.ImaSdkFactory {
    return ImaSdkFactory.instance
  }

  override fun createAdDisplayContainer(container: android.view.ViewGroup, player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer): com.google.ads.interactivemedia.v3.api.AdDisplayContainer {
    return ImaSdkFactory.createAdDisplayContainer(container, player)
  }

  override fun createImaSdkSettings(pigeon_instance: ImaSdkFactory): com.google.ads.interactivemedia.v3.api.ImaSdkSettings {
    return pigeon_instance.createImaSdkSettings()
  }

  override fun createAdsLoader(pigeon_instance: ImaSdkFactory,settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings, container: com.google.ads.interactivemedia.v3.api.AdDisplayContainer): com.google.ads.interactivemedia.v3.api.AdsLoader {
    return pigeon_instance.createAdsLoader(settings, container)
  }

  override fun createAdsRequest(pigeon_instance: ImaSdkFactory): com.google.ads.interactivemedia.v3.api.AdsRequest {
    return pigeon_instance.createAdsRequest()
  }

  override fun createStreamAdsLoader(pigeon_instance: ImaSdkFactory,settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings, container: com.google.ads.interactivemedia.v3.api.StreamDisplayContainer): com.google.ads.interactivemedia.v3.api.AdsLoader {
    return pigeon_instance.createStreamAdsLoader(settings, container)
  }

  override fun createAdsRenderingSettings(pigeon_instance: ImaSdkFactory): com.google.ads.interactivemedia.v3.api.AdsRenderingSettings {
    return pigeon_instance.createAdsRenderingSettings()
  }

  override fun createAudioAdDisplayContainer(player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer): com.google.ads.interactivemedia.v3.api.AdDisplayContainer {
    return ImaSdkFactory.createAudioAdDisplayContainer(player)
  }

  override fun createCompanionAdSlot(pigeon_instance: ImaSdkFactory): com.google.ads.interactivemedia.v3.api.CompanionAdSlot {
    return pigeon_instance.createCompanionAdSlot()
  }

  override fun createFriendlyObstruction(pigeon_instance: ImaSdkFactory,view: android.view.View, purpose: FriendlyObstructionPurpose, detailedReason: String?): com.google.ads.interactivemedia.v3.api.FriendlyObstruction {
    return pigeon_instance.createFriendlyObstruction(view, purpose, detailedReason)
  }

  override fun createLiveStreamRequest(pigeon_instance: ImaSdkFactory,assetKey: String, apiKey: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createLiveStreamRequest(assetKey, apiKey)
  }

  override fun createPodStreamRequest(pigeon_instance: ImaSdkFactory,networkCode: String, customAssetKey: String, apiKey: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createPodStreamRequest(networkCode, customAssetKey, apiKey)
  }

  override fun createPodVodStreamRequest(pigeon_instance: ImaSdkFactory,networkCode: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createPodVodStreamRequest(networkCode)
  }

  override fun createStreamDisplayContainer(container: android.view.ViewGroup, player: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer): com.google.ads.interactivemedia.v3.api.StreamDisplayContainer {
    return ImaSdkFactory.createStreamDisplayContainer(container, player)
  }

  override fun createVideoStitcherLiveStreamRequest(pigeon_instance: ImaSdkFactory,networkCode: String, customAssetKey: String, liveStreamEventId: String, region: String, projectNumber: String, oAuthToken: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createVideoStitcherLiveStreamRequest(networkCode, customAssetKey, liveStreamEventId, region, projectNumber, oAuthToken)
  }

  override fun createContentSourceVideoStitcherVodStreamRequest(pigeon_instance: ImaSdkFactory,contentSourceUrl: String, networkCode: String, region: String, projectNumber: String, oAuthToken: String, adTagUrl: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createContentSourceVideoStitcherVodStreamRequest(contentSourceUrl, networkCode, region, projectNumber, oAuthToken, adTagUrl)
  }

  override fun createVideoStitcherVodStreamRequest(pigeon_instance: ImaSdkFactory,networkCode: String, region: String, projectNumber: String, oAuthToken: String, vodConfigId: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createVideoStitcherVodStreamRequest(networkCode, region, projectNumber, oAuthToken, vodConfigId)
  }

  override fun createVodStreamRequest(pigeon_instance: ImaSdkFactory,contentSourceId: String, videoId: String, apiKey: String): com.google.ads.interactivemedia.v3.api.StreamRequest {
    return pigeon_instance.createVodStreamRequest(contentSourceId, videoId, apiKey)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkFactory
import android.view.ViewGroup
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import com.google.ads.interactivemedia.v3.api.AdDisplayContainer
import com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
import android.view.View
import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
import com.google.ads.interactivemedia.v3.api.AdsLoader
import com.google.ads.interactivemedia.v3.api.AdsRequest
import com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
import com.google.ads.interactivemedia.v3.api.CompanionAdSlot
import com.google.ads.interactivemedia.v3.api.FriendlyObstruction
import com.google.ads.interactivemedia.v3.api.StreamRequest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class ImaSdkFactoryProxyApiTest {
  @Test
  fun createImaSdkSettings() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val value = mock<ImaSdkSettings>()
    whenever(instance.createImaSdkSettings()).thenReturn(value)

    assertEquals(value, api.createImaSdkSettings(instance ))
  }

  @Test
  fun createAdsLoader() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val settings = mock<ImaSdkSettings>()
    val container = mock<AdDisplayContainer>()
    val value = mock<AdsLoader>()
    whenever(instance.createAdsLoader(settings, container)).thenReturn(value)

    assertEquals(value, api.createAdsLoader(instance, settings, container))
  }

  @Test
  fun createAdsRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val value = mock<AdsRequest>()
    whenever(instance.createAdsRequest()).thenReturn(value)

    assertEquals(value, api.createAdsRequest(instance ))
  }

  @Test
  fun createStreamAdsLoader() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val settings = mock<ImaSdkSettings>()
    val container = mock<StreamDisplayContainer>()
    val value = mock<AdsLoader>()
    whenever(instance.createStreamAdsLoader(settings, container)).thenReturn(value)

    assertEquals(value, api.createStreamAdsLoader(instance, settings, container))
  }

  @Test
  fun createAdsRenderingSettings() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val value = mock<AdsRenderingSettings>()
    whenever(instance.createAdsRenderingSettings()).thenReturn(value)

    assertEquals(value, api.createAdsRenderingSettings(instance ))
  }

  @Test
  fun createCompanionAdSlot() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val value = mock<CompanionAdSlot>()
    whenever(instance.createCompanionAdSlot()).thenReturn(value)

    assertEquals(value, api.createCompanionAdSlot(instance ))
  }

  @Test
  fun createFriendlyObstruction() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val view = mock<View>()
    val purpose = dev.flutter.packages.interactive_media_ads.FriendlyObstructionPurpose.CLOSE_AD
    val detailedReason = "myString"
    val value = mock<FriendlyObstruction>()
    whenever(instance.createFriendlyObstruction(view, purpose, detailedReason)).thenReturn(value)

    assertEquals(value, api.createFriendlyObstruction(instance, view, purpose, detailedReason))
  }

  @Test
  fun createLiveStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val assetKey = "myString"
    val apiKey = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createLiveStreamRequest(assetKey, apiKey)).thenReturn(value)

    assertEquals(value, api.createLiveStreamRequest(instance, assetKey, apiKey))
  }

  @Test
  fun createPodStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val networkCode = "myString"
    val customAssetKey = "myString"
    val apiKey = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createPodStreamRequest(networkCode, customAssetKey, apiKey)).thenReturn(value)

    assertEquals(value, api.createPodStreamRequest(instance, networkCode, customAssetKey, apiKey))
  }

  @Test
  fun createPodVodStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val networkCode = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createPodVodStreamRequest(networkCode)).thenReturn(value)

    assertEquals(value, api.createPodVodStreamRequest(instance, networkCode))
  }

  @Test
  fun createVideoStitcherLiveStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val networkCode = "myString"
    val customAssetKey = "myString"
    val liveStreamEventId = "myString"
    val region = "myString"
    val projectNumber = "myString"
    val oAuthToken = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createVideoStitcherLiveStreamRequest(networkCode, customAssetKey, liveStreamEventId, region, projectNumber, oAuthToken)).thenReturn(value)

    assertEquals(value, api.createVideoStitcherLiveStreamRequest(instance, networkCode, customAssetKey, liveStreamEventId, region, projectNumber, oAuthToken))
  }

  @Test
  fun createContentSourceVideoStitcherVodStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val contentSourceUrl = "myString"
    val networkCode = "myString"
    val region = "myString"
    val projectNumber = "myString"
    val oAuthToken = "myString"
    val adTagUrl = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createContentSourceVideoStitcherVodStreamRequest(contentSourceUrl, networkCode, region, projectNumber, oAuthToken, adTagUrl)).thenReturn(value)

    assertEquals(value, api.createContentSourceVideoStitcherVodStreamRequest(instance, contentSourceUrl, networkCode, region, projectNumber, oAuthToken, adTagUrl))
  }

  @Test
  fun createVideoStitcherVodStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val networkCode = "myString"
    val region = "myString"
    val projectNumber = "myString"
    val oAuthToken = "myString"
    val vodConfigId = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createVideoStitcherVodStreamRequest(networkCode, region, projectNumber, oAuthToken, vodConfigId)).thenReturn(value)

    assertEquals(value, api.createVideoStitcherVodStreamRequest(instance, networkCode, region, projectNumber, oAuthToken, vodConfigId))
  }

  @Test
  fun createVodStreamRequest() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkFactory()

    val instance = mock<ImaSdkFactory>()
    val contentSourceId = "myString"
    val videoId = "myString"
    val apiKey = "myString"
    val value = mock<StreamRequest>()
    whenever(instance.createVodStreamRequest(contentSourceId, videoId, apiKey)).thenReturn(value)

    assertEquals(value, api.createVodStreamRequest(instance, contentSourceId, videoId, apiKey))
  }

}
*/
/**
 * A display container specific to server-side ad insertion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/StreamDisplayContainer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiStreamDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Returns the previously set player used for server-side ad insertion, or null if none has been
   * set.
   */
  abstract fun getVideoStreamPlayer(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
  ): com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer?

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiStreamDisplayContainer?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.StreamDisplayContainer.getVideoStreamPlayer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getVideoStreamPlayer(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of StreamDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.StreamDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.StreamDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseDisplayContainer] used to access callback methods */
  fun pigeon_getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer {
    return pigeonRegistrar.getPigeonApiBaseDisplayContainer()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer

/**
 * ProxyApi implementation for [StreamDisplayContainer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class StreamDisplayContainerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiStreamDisplayContainer(pigeonRegistrar) {

  override fun getVideoStreamPlayer(pigeon_instance: StreamDisplayContainer): com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer? {
    return pigeon_instance.getVideoStreamPlayer()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.StreamDisplayContainer
import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class StreamDisplayContainerProxyApiTest {
  @Test
  fun getVideoStreamPlayer() {
    val api = TestProxyApiRegistrar().getPigeonApiStreamDisplayContainer()

    val instance = mock<StreamDisplayContainer>()
    val value = mock<VideoStreamPlayer>()
    whenever(instance.getVideoStreamPlayer()).thenReturn(value)

    assertEquals(value, api.getVideoStreamPlayer(instance ))
  }

}
*/
/**
 * Defines a set of methods that a video player must implement to be used by the IMA SDK for dynamic
 * ad insertion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoStreamPlayer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoStreamPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer

  /** The volume of the player as a percentage from 0 to 100. */
  abstract fun setVolume(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      value: Long
  )

  /** The `VideoProgressUpdate` describing playback progress of the current video. */
  abstract fun setContentProgress(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoStreamPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.setVolume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
            val valueArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setVolume(pigeon_instanceArg, valueArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.setContentProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
            val progressArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.setContentProgress(pigeon_instanceArg, progressArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoStreamPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoStreamPlayer, but the class has a nonnull callback method.")
  }

  /** Adds a callback so that listeners can react to events from the `VideoStreamPlayer`. */
  fun addCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.addCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Loads a stream with dynamic ad insertion given the stream url and subtitles array. */
  fun loadUrl(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      urlArg: String,
      subtitlesArg: List<Map<String, String>>,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.loadUrl"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, urlArg, subtitlesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** The SDK will call this method the first time each ad break ends. */
  fun onAdBreakEnded(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.onAdBreakEnded"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** The SDK will call this method the first time each ad break begins playback. */
  fun onAdBreakStarted(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.onAdBreakStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /**
   * The SDK will call this method every time the stream switches from advertising or slate to
   * content.
   */
  fun onAdPeriodEnded(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.onAdPeriodEnded"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /**
   * The SDK will call this method every time the stream switches from content to advertising or
   * slate.
   */
  fun onAdPeriodStarted(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.onAdPeriodStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Pauses the current stream. */
  fun pause(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.pause"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Removes a callback. */
  fun removeCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.removeCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Resumes playing the stream. */
  fun resume(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.resume"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Seeks the stream to the given time in milliseconds. */
  fun seek(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer,
      timeArg: Long,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayer.seek"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, timeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoStreamPlayer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoStreamPlayerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoStreamPlayer(pigeonRegistrar) {
  internal class VideoStreamPlayerImpl(val api: VideoStreamPlayerProxyApi) : VideoStreamPlayer {
    override fun addCallback(callback: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback) {
      api.pigeonRegistrar.runOnMainThread { api.addCallback(this, callback) {} }
    }
    override fun loadUrl(url: String, subtitles: List<Map<String, String>>) {
      api.pigeonRegistrar.runOnMainThread { api.loadUrl(this, url, subtitles) {} }
    }
    override fun onAdBreakEnded() {
      api.pigeonRegistrar.runOnMainThread { api.onAdBreakEnded(this ) {} }
    }
    override fun onAdBreakStarted() {
      api.pigeonRegistrar.runOnMainThread { api.onAdBreakStarted(this ) {} }
    }
    override fun onAdPeriodEnded() {
      api.pigeonRegistrar.runOnMainThread { api.onAdPeriodEnded(this ) {} }
    }
    override fun onAdPeriodStarted() {
      api.pigeonRegistrar.runOnMainThread { api.onAdPeriodStarted(this ) {} }
    }
    override fun pause() {
      api.pigeonRegistrar.runOnMainThread { api.pause(this ) {} }
    }
    override fun removeCallback(callback: com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback) {
      api.pigeonRegistrar.runOnMainThread { api.removeCallback(this, callback) {} }
    }
    override fun resume() {
      api.pigeonRegistrar.runOnMainThread { api.resume(this ) {} }
    }
    override fun seek(time: Long) {
      api.pigeonRegistrar.runOnMainThread { api.seek(this, time) {} }
    }
  }

  override fun pigeon_defaultConstructor(): VideoStreamPlayer {
    return VideoStreamPlayerImpl()
  }

  override fun setVolume(pigeon_instance: VideoStreamPlayer,value: Long) {
    pigeon_instance.setVolume(value)
  }

  override fun setContentProgress(pigeon_instance: VideoStreamPlayer,progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
    pigeon_instance.setContentProgress(progress)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer
import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class VideoStreamPlayerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayer()

    assertTrue(api.pigeon_defaultConstructor() is VideoStreamPlayerProxyApi.VideoStreamPlayer)
  }

  @Test
  fun setVolume() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayer()

    val instance = mock<VideoStreamPlayer>()
    val value = 0
    api.setVolume(instance, value)

    verify(instance).setVolume(value)
  }

  @Test
  fun setContentProgress() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayer()

    val instance = mock<VideoStreamPlayer>()
    val progress = mock<VideoProgressUpdate>()
    api.setContentProgress(instance, progress)

    verify(instance).setContentProgress(progress)
  }

  @Test
  fun addCallback() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    val callback = mock<VideoStreamPlayerCallback>()
    instance.addCallback(callback)

    verify(mockApi).addCallback(eq(instance), eq(callback), any())
  }

  @Test
  fun loadUrl() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    val url = "myString"
    val subtitles = listOf(mapOf("myString" to "myString"))
    instance.loadUrl(url, subtitles)

    verify(mockApi).loadUrl(eq(instance), eq(url), eq(subtitles), any())
  }

  @Test
  fun onAdBreakEnded() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    instance.onAdBreakEnded()

    verify(mockApi).onAdBreakEnded(eq(instance) , any())
  }

  @Test
  fun onAdBreakStarted() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    instance.onAdBreakStarted()

    verify(mockApi).onAdBreakStarted(eq(instance) , any())
  }

  @Test
  fun onAdPeriodEnded() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    instance.onAdPeriodEnded()

    verify(mockApi).onAdPeriodEnded(eq(instance) , any())
  }

  @Test
  fun onAdPeriodStarted() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    instance.onAdPeriodStarted()

    verify(mockApi).onAdPeriodStarted(eq(instance) , any())
  }

  @Test
  fun pause() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    instance.pause()

    verify(mockApi).pause(eq(instance) , any())
  }

  @Test
  fun removeCallback() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    val callback = mock<VideoStreamPlayerCallback>()
    instance.removeCallback(callback)

    verify(mockApi).removeCallback(eq(instance), eq(callback), any())
  }

  @Test
  fun resume() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    instance.resume()

    verify(mockApi).resume(eq(instance) , any())
  }

  @Test
  fun seek() {
    val mockApi = mock<VideoStreamPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoStreamPlayerImpl(mockApi)
    val time = 0
    instance.seek(time)

    verify(mockApi).seek(eq(instance), eq(time), any())
  }

}
*/
/**
 * Defines a set of methods that a video player must implement to be used by the IMA SDK for dynamic
 * ad insertion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoStreamPlayer.VideoStreamPlayerCallback.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoStreamPlayerCallback(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Fire this callback when all content has finished playing. */
  abstract fun onContentComplete(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
  )

  /** Fire this callback when the video is paused. */
  abstract fun onPause(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
  )

  /** Fire this callback when the video is resumed. */
  abstract fun onResume(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
  )

  /**
   * Fire this callback when a timed metadata ID3 event corresponding to user-defined text is
   * received.
   *
   * For more information about user text events, see http://id3.org/id3v2.4.0-frames.
   */
  abstract fun onUserTextReceived(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback,
      userText: String
  )

  /** Fire this callback when the video player volume changes. */
  abstract fun onVolumeChanged(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback,
      percentage: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiVideoStreamPlayerCallback?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayerCallback.onContentComplete",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
            val wrapped: List<Any?> =
                try {
                  api.onContentComplete(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayerCallback.onPause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
            val wrapped: List<Any?> =
                try {
                  api.onPause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayerCallback.onResume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
            val wrapped: List<Any?> =
                try {
                  api.onResume(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayerCallback.onUserTextReceived",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
            val userTextArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.onUserTextReceived(pigeon_instanceArg, userTextArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayerCallback.onVolumeChanged",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
            val percentageArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.onVolumeChanged(pigeon_instanceArg, percentageArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /**
   * Creates a Dart instance of VideoStreamPlayerCallback and attaches it to [pigeon_instanceArg].
   */
  fun pigeon_newInstance(
      pigeon_instanceArg:
          com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoStreamPlayerCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback

/**
 * ProxyApi implementation for [VideoStreamPlayerCallback].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoStreamPlayerCallbackProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoStreamPlayerCallback(pigeonRegistrar) {

  override fun onContentComplete(pigeon_instance: VideoStreamPlayerCallback) {
    pigeon_instance.onContentComplete()
  }

  override fun onPause(pigeon_instance: VideoStreamPlayerCallback) {
    pigeon_instance.onPause()
  }

  override fun onResume(pigeon_instance: VideoStreamPlayerCallback) {
    pigeon_instance.onResume()
  }

  override fun onUserTextReceived(pigeon_instance: VideoStreamPlayerCallback,userText: String) {
    pigeon_instance.onUserTextReceived(userText)
  }

  override fun onVolumeChanged(pigeon_instance: VideoStreamPlayerCallback,percentage: Long) {
    pigeon_instance.onVolumeChanged(percentage)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoStreamPlayer.VideoStreamPlayerCallback
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class VideoStreamPlayerCallbackProxyApiTest {
  @Test
  fun onContentComplete() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayerCallback()

    val instance = mock<VideoStreamPlayerCallback>()
    api.onContentComplete(instance )

    verify(instance).onContentComplete()
  }

  @Test
  fun onPause() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayerCallback()

    val instance = mock<VideoStreamPlayerCallback>()
    api.onPause(instance )

    verify(instance).onPause()
  }

  @Test
  fun onResume() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayerCallback()

    val instance = mock<VideoStreamPlayerCallback>()
    api.onResume(instance )

    verify(instance).onResume()
  }

  @Test
  fun onUserTextReceived() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayerCallback()

    val instance = mock<VideoStreamPlayerCallback>()
    val userText = "myString"
    api.onUserTextReceived(instance, userText)

    verify(instance).onUserTextReceived(userText)
  }

  @Test
  fun onVolumeChanged() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoStreamPlayerCallback()

    val instance = mock<VideoStreamPlayerCallback>()
    val percentage = 0
    api.onVolumeChanged(instance, percentage)

    verify(instance).onVolumeChanged(percentage)
  }

}
*/
/**
 * Defines general SDK settings that are used when creating an `AdsLoader`.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkSettings.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImaSdkSettings(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Specifies whether VMAP and ad rules ad breaks are automatically played.
   *
   * Default is true.
   */
  abstract fun getAutoPlayAdBreaks(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): Boolean

  /** Returns the feature flags and their states as set by the `setFeatureFlags(Map)` function. */
  abstract fun getFeatureFlags(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): Map<String, String>

  /**
   * Gets the current ISO 639-1 language code.
   *
   * Defaults to "en" for English.
   */
  abstract fun getLanguage(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): String

  /** Returns the maximum number of VAST redirects. */
  abstract fun getMaxRedirects(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): Long

  /** Returns the partner provided player type. */
  abstract fun getPlayerType(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): String

  /** Returns the partner provided player version. */
  abstract fun getPlayerVersion(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): String

  /** Returns the PPID. */
  abstract fun getPpid(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): String

  /** Returns the session ID if set. */
  abstract fun getSessionId(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): String?

  /**
   * Gets the debug mode.
   *
   * Default is false.
   */
  abstract fun isDebugMode(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings
  ): Boolean

  /** Sets whether to automatically play VMAP and ad rules ad breaks. */
  abstract fun setAutoPlayAdBreaks(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      autoPlayAdBreaks: Boolean
  )

  /** Enables and disables the debug mode, which is disabled by default. */
  abstract fun setDebugMode(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      debugMode: Boolean
  )

  /** Sets the feature flags and their states to control experimental features. */
  abstract fun setFeatureFlags(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      featureFlags: Map<String, String>
  )

  /**
   * Sets the preferred language for the ad UI.
   *
   * The supported codes are closely related to the two-letter ISO 639-1 language codes. See
   * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/localization.
   *
   * Once the AdsLoader object has been created, using this setter will have no effect.
   */
  abstract fun setLanguage(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      language: String
  )

  /**
   * Specifies the maximum number of redirects before the subsequent redirects will be denied and
   * the ad load aborted. In this case, the ad will raise an error with error code 302.
   */
  abstract fun setMaxRedirects(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      maxRedirects: Long
  )

  /** Sets the partner provided player type. */
  abstract fun setPlayerType(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      playerType: String
  )

  /** Sets the partner provided player version. */
  abstract fun setPlayerVersion(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      playerVersion: String
  )

  /** Sets the publisher provided ID used for tracking. */
  abstract fun setPpid(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      ppid: String
  )

  /** Session ID is a temporary random ID. It is used exclusively for frequency capping. */
  abstract fun setSessionId(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      sessionId: String
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImaSdkSettings?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getAutoPlayAdBreaks",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAutoPlayAdBreaks(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getFeatureFlags",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getFeatureFlags(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getLanguage",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getLanguage(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getMaxRedirects",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getMaxRedirects(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getPlayerType",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getPlayerType(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getPlayerVersion",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getPlayerVersion(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getPpid",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getPpid(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.getSessionId",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getSessionId(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.isDebugMode",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.isDebugMode(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setAutoPlayAdBreaks",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val autoPlayAdBreaksArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setAutoPlayAdBreaks(pigeon_instanceArg, autoPlayAdBreaksArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setDebugMode",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val debugModeArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setDebugMode(pigeon_instanceArg, debugModeArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setFeatureFlags",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val featureFlagsArg = args[1] as Map<String, String>
            val wrapped: List<Any?> =
                try {
                  api.setFeatureFlags(pigeon_instanceArg, featureFlagsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setLanguage",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val languageArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setLanguage(pigeon_instanceArg, languageArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setMaxRedirects",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val maxRedirectsArg =
                args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setMaxRedirects(pigeon_instanceArg, maxRedirectsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setPlayerType",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val playerTypeArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setPlayerType(pigeon_instanceArg, playerTypeArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setPlayerVersion",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val playerVersionArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setPlayerVersion(pigeon_instanceArg, playerVersionArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setPpid",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val ppidArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setPpid(pigeon_instanceArg, ppidArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.setSessionId",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val sessionIdArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setSessionId(pigeon_instanceArg, sessionIdArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkSettings and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkSettings

/**
 * ProxyApi implementation for [ImaSdkSettings].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ImaSdkSettingsProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiImaSdkSettings(pigeonRegistrar) {

  override fun getAutoPlayAdBreaks(pigeon_instance: ImaSdkSettings): Boolean {
    return pigeon_instance.getAutoPlayAdBreaks()
  }

  override fun getFeatureFlags(pigeon_instance: ImaSdkSettings): Map<String, String> {
    return pigeon_instance.getFeatureFlags()
  }

  override fun getLanguage(pigeon_instance: ImaSdkSettings): String {
    return pigeon_instance.getLanguage()
  }

  override fun getMaxRedirects(pigeon_instance: ImaSdkSettings): Long {
    return pigeon_instance.getMaxRedirects()
  }

  override fun getPlayerType(pigeon_instance: ImaSdkSettings): String {
    return pigeon_instance.getPlayerType()
  }

  override fun getPlayerVersion(pigeon_instance: ImaSdkSettings): String {
    return pigeon_instance.getPlayerVersion()
  }

  override fun getPpid(pigeon_instance: ImaSdkSettings): String {
    return pigeon_instance.getPpid()
  }

  override fun getSessionId(pigeon_instance: ImaSdkSettings): String? {
    return pigeon_instance.getSessionId()
  }

  override fun isDebugMode(pigeon_instance: ImaSdkSettings): Boolean {
    return pigeon_instance.isDebugMode()
  }

  override fun setAutoPlayAdBreaks(pigeon_instance: ImaSdkSettings,autoPlayAdBreaks: Boolean) {
    pigeon_instance.setAutoPlayAdBreaks(autoPlayAdBreaks)
  }

  override fun setDebugMode(pigeon_instance: ImaSdkSettings,debugMode: Boolean) {
    pigeon_instance.setDebugMode(debugMode)
  }

  override fun setFeatureFlags(pigeon_instance: ImaSdkSettings,featureFlags: Map<String, String>) {
    pigeon_instance.setFeatureFlags(featureFlags)
  }

  override fun setLanguage(pigeon_instance: ImaSdkSettings,language: String) {
    pigeon_instance.setLanguage(language)
  }

  override fun setMaxRedirects(pigeon_instance: ImaSdkSettings,maxRedirects: Long) {
    pigeon_instance.setMaxRedirects(maxRedirects)
  }

  override fun setPlayerType(pigeon_instance: ImaSdkSettings,playerType: String) {
    pigeon_instance.setPlayerType(playerType)
  }

  override fun setPlayerVersion(pigeon_instance: ImaSdkSettings,playerVersion: String) {
    pigeon_instance.setPlayerVersion(playerVersion)
  }

  override fun setPpid(pigeon_instance: ImaSdkSettings,ppid: String) {
    pigeon_instance.setPpid(ppid)
  }

  override fun setSessionId(pigeon_instance: ImaSdkSettings,sessionId: String) {
    pigeon_instance.setSessionId(sessionId)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.ImaSdkSettings
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class ImaSdkSettingsProxyApiTest {
  @Test
  fun getAutoPlayAdBreaks() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = true
    whenever(instance.getAutoPlayAdBreaks()).thenReturn(value)

    assertEquals(value, api.getAutoPlayAdBreaks(instance ))
  }

  @Test
  fun getFeatureFlags() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = mapOf("myString" to "myString")
    whenever(instance.getFeatureFlags()).thenReturn(value)

    assertEquals(value, api.getFeatureFlags(instance ))
  }

  @Test
  fun getLanguage() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = "myString"
    whenever(instance.getLanguage()).thenReturn(value)

    assertEquals(value, api.getLanguage(instance ))
  }

  @Test
  fun getMaxRedirects() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = 0
    whenever(instance.getMaxRedirects()).thenReturn(value)

    assertEquals(value, api.getMaxRedirects(instance ))
  }

  @Test
  fun getPlayerType() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = "myString"
    whenever(instance.getPlayerType()).thenReturn(value)

    assertEquals(value, api.getPlayerType(instance ))
  }

  @Test
  fun getPlayerVersion() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = "myString"
    whenever(instance.getPlayerVersion()).thenReturn(value)

    assertEquals(value, api.getPlayerVersion(instance ))
  }

  @Test
  fun getPpid() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = "myString"
    whenever(instance.getPpid()).thenReturn(value)

    assertEquals(value, api.getPpid(instance ))
  }

  @Test
  fun getSessionId() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = "myString"
    whenever(instance.getSessionId()).thenReturn(value)

    assertEquals(value, api.getSessionId(instance ))
  }

  @Test
  fun isDebugMode() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val value = true
    whenever(instance.isDebugMode()).thenReturn(value)

    assertEquals(value, api.isDebugMode(instance ))
  }

  @Test
  fun setAutoPlayAdBreaks() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val autoPlayAdBreaks = true
    api.setAutoPlayAdBreaks(instance, autoPlayAdBreaks)

    verify(instance).setAutoPlayAdBreaks(autoPlayAdBreaks)
  }

  @Test
  fun setDebugMode() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val debugMode = true
    api.setDebugMode(instance, debugMode)

    verify(instance).setDebugMode(debugMode)
  }

  @Test
  fun setFeatureFlags() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val featureFlags = mapOf("myString" to "myString")
    api.setFeatureFlags(instance, featureFlags)

    verify(instance).setFeatureFlags(featureFlags)
  }

  @Test
  fun setLanguage() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val language = "myString"
    api.setLanguage(instance, language)

    verify(instance).setLanguage(language)
  }

  @Test
  fun setMaxRedirects() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val maxRedirects = 0
    api.setMaxRedirects(instance, maxRedirects)

    verify(instance).setMaxRedirects(maxRedirects)
  }

  @Test
  fun setPlayerType() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val playerType = "myString"
    api.setPlayerType(instance, playerType)

    verify(instance).setPlayerType(playerType)
  }

  @Test
  fun setPlayerVersion() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val playerVersion = "myString"
    api.setPlayerVersion(instance, playerVersion)

    verify(instance).setPlayerVersion(playerVersion)
  }

  @Test
  fun setPpid() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val ppid = "myString"
    api.setPpid(instance, ppid)

    verify(instance).setPpid(ppid)
  }

  @Test
  fun setSessionId() {
    val api = TestProxyApiRegistrar().getPigeonApiImaSdkSettings()

    val instance = mock<ImaSdkSettings>()
    val sessionId = "myString"
    api.setSessionId(instance, sessionId)

    verify(instance).setSessionId(sessionId)
  }

}
*/
/**
 * Defines an update to the video's progress.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoProgressUpdate.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoProgressUpdate(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(
      currentTimeMs: Long,
      durationMs: Long
  ): com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  /** Value to use for cases when progress is not yet defined, such as video initialization. */
  abstract fun videoTimeNotReady():
      com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoProgressUpdate?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val currentTimeMsArg =
                args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val durationMsArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(currentTimeMsArg, durationMsArg),
                      pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.videoTimeNotReady",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.videoTimeNotReady(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoProgressUpdate and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoProgressUpdate].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoProgressUpdateProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoProgressUpdate(pigeonRegistrar) {

  override fun pigeon_defaultConstructor(currentTimeMs: Long, durationMs: Long): VideoProgressUpdate {
    return VideoProgressUpdate(currentTimeMs, durationMs)
  }

  override fun videoTimeNotReady(): com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate {
    return VideoProgressUpdate.videoTimeNotReady
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class VideoProgressUpdateProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoProgressUpdate()

    assertTrue(api.pigeon_defaultConstructor(0, 0) is VideoProgressUpdateProxyApi.VideoProgressUpdate)
  }

}
*/
/**
 * The minimal information required to play an ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/AdMediaInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdMediaInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun url(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdMediaInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val urlArg = url(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo

/**
 * ProxyApi implementation for [AdMediaInfo].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdMediaInfoProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdMediaInfo(pigeonRegistrar) {

  override fun url(pigeon_instance: AdMediaInfo): String {
    return pigeon_instance.url
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdMediaInfoProxyApiTest {
  @Test
  fun url() {
    val api = TestProxyApiRegistrar().getPigeonApiAdMediaInfo()

    val instance = mock<AdMediaInfo>()
    val value = "myString"
    whenever(instance.url).thenReturn(value)

    assertEquals(value, api.url(instance))
  }

}
*/
/**
 * An ad may be part of a pod of ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdPodInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdPodInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * The position of the ad within the pod.
   *
   * The value returned is one-based, for example, 1 of 2, 2 of 2, etc. If the ad is not part of a
   * pod, this will return 1.
   */
  abstract fun adPosition(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The maximum duration of the pod in seconds.
   *
   * For unknown duration, -1 is returned.
   */
  abstract fun maxDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo
  ): Double

  /** Client side and DAI VOD: Returns the index of the ad pod. */
  abstract fun podIndex(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The content time offset at which the current ad pod was scheduled.
   *
   * For preroll pod, 0 is returned. For midrolls, the scheduled time is returned in seconds. For
   * postroll, -1 is returned. Defaults to 0 if this ad is not part of a pod, or the pod is not part
   * of an ad playlist.
   */
  abstract fun timeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Double

  /** The total number of ads contained within this pod, including bumpers. */
  abstract fun totalAds(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /** Returns true if the ad is a bumper ad. */
  abstract fun isBumper(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdPodInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adPositionArg = adPosition(pigeon_instanceArg)
    val maxDurationArg = maxDuration(pigeon_instanceArg)
    val podIndexArg = podIndex(pigeon_instanceArg)
    val timeOffsetArg = timeOffset(pigeon_instanceArg)
    val totalAdsArg = totalAds(pigeon_instanceArg)
    val isBumperArg = isBumper(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adPositionArg,
            maxDurationArg,
            podIndexArg,
            timeOffsetArg,
            totalAdsArg,
            isBumperArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdPodInfo

/**
 * ProxyApi implementation for [AdPodInfo].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdPodInfoProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdPodInfo(pigeonRegistrar) {

  override fun adPosition(pigeon_instance: AdPodInfo): Long {
    return pigeon_instance.adPosition
  }

  override fun maxDuration(pigeon_instance: AdPodInfo): Double {
    return pigeon_instance.maxDuration
  }

  override fun podIndex(pigeon_instance: AdPodInfo): Long {
    return pigeon_instance.podIndex
  }

  override fun timeOffset(pigeon_instance: AdPodInfo): Double {
    return pigeon_instance.timeOffset
  }

  override fun totalAds(pigeon_instance: AdPodInfo): Long {
    return pigeon_instance.totalAds
  }

  override fun isBumper(pigeon_instance: AdPodInfo): Boolean {
    return pigeon_instance.isBumper
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdPodInfo
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdPodInfoProxyApiTest {
  @Test
  fun adPosition() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 0
    whenever(instance.adPosition).thenReturn(value)

    assertEquals(value, api.adPosition(instance))
  }

  @Test
  fun maxDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 1.0
    whenever(instance.maxDuration).thenReturn(value)

    assertEquals(value, api.maxDuration(instance))
  }

  @Test
  fun podIndex() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 0
    whenever(instance.podIndex).thenReturn(value)

    assertEquals(value, api.podIndex(instance))
  }

  @Test
  fun timeOffset() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 1.0
    whenever(instance.timeOffset).thenReturn(value)

    assertEquals(value, api.timeOffset(instance))
  }

  @Test
  fun totalAds() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = 0
    whenever(instance.totalAds).thenReturn(value)

    assertEquals(value, api.totalAds(instance))
  }

  @Test
  fun isBumper() {
    val api = TestProxyApiRegistrar().getPigeonApiAdPodInfo()

    val instance = mock<AdPodInfo>()
    val value = true
    whenever(instance.isBumper).thenReturn(value)

    assertEquals(value, api.isBumper(instance))
  }

}
*/
/**
 * FrameLayout is designed to block out an area on the screen to display a single item.
 *
 * See https://developer.android.com/reference/android/widget/FrameLayout.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFrameLayout(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(): android.widget.FrameLayout

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFrameLayout?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FrameLayout and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.FrameLayout,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiViewGroup] used to access callback methods */
  fun pigeon_getPigeonApiViewGroup(): PigeonApiViewGroup {
    return pigeonRegistrar.getPigeonApiViewGroup()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.FrameLayout

/**
 * ProxyApi implementation for [FrameLayout].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class FrameLayoutProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiFrameLayout(pigeonRegistrar) {

  override fun pigeon_defaultConstructor(): FrameLayout {
    return FrameLayout()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.FrameLayout
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class FrameLayoutProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiFrameLayout()

    assertTrue(api.pigeon_defaultConstructor() is FrameLayoutProxyApi.FrameLayoutImpl)
  }

}
*/
/**
 * A special view that can contain other views (called children.)
 *
 * See https://developer.android.com/reference/android/view/ViewGroup.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiViewGroup(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun addView(pigeon_instance: android.view.ViewGroup, view: android.view.View)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiViewGroup?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ViewGroup.addView",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.view.ViewGroup
            val viewArg = args[1] as android.view.View
            val wrapped: List<Any?> =
                try {
                  api.addView(pigeon_instanceArg, viewArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ViewGroup and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.view.ViewGroup,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.ViewGroup
import android.view.View

/**
 * ProxyApi implementation for [ViewGroup].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ViewGroupProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiViewGroup(pigeonRegistrar) {

  override fun addView(pigeon_instance: ViewGroup,view: android.view.View) {
    pigeon_instance.addView(view)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.ViewGroup
import android.view.View
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class ViewGroupProxyApiTest {
  @Test
  fun addView() {
    val api = TestProxyApiRegistrar().getPigeonApiViewGroup()

    val instance = mock<ViewGroup>()
    val view = mock<View>()
    api.addView(instance, view)

    verify(instance).addView(view)
  }

}
*/
/**
 * Displays a video file.
 *
 * See https://developer.android.com/reference/android/widget/VideoView.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoView(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(): android.widget.VideoView

  /** Sets the URI of the video. */
  abstract fun setVideoUri(pigeon_instance: android.widget.VideoView, uri: String)

  /**
   * The current position of the playing video.
   *
   * In milliseconds.
   */
  abstract fun getCurrentPosition(pigeon_instance: android.widget.VideoView): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoView?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.setVideoUri",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.widget.VideoView
            val uriArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setVideoUri(pigeon_instanceArg, uriArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.getCurrentPosition",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.widget.VideoView
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCurrentPosition(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoView and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.VideoView,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoView, but the class has a nonnull callback method.")
  }

  /** Callback to be invoked when the media source is ready for playback. */
  fun onPrepared(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Callback to be invoked when playback of a media source has completed. */
  fun onCompletion(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Callback to be invoked when there has been an error during an asynchronous operation. */
  fun onError(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      whatArg: Long,
      extraArg: Long,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg, whatArg, extraArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.VideoView
import android.media.MediaPlayer

/**
 * ProxyApi implementation for [VideoView].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoViewProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoView(pigeonRegistrar) {
  internal class VideoViewImpl(val api: VideoViewProxyApi) : VideoView {
    override fun onPrepared(player: android.media.MediaPlayer) {
      api.pigeonRegistrar.runOnMainThread { api.onPrepared(this, player) {} }
    }
    override fun onCompletion(player: android.media.MediaPlayer) {
      api.pigeonRegistrar.runOnMainThread { api.onCompletion(this, player) {} }
    }
    override fun onError(player: android.media.MediaPlayer, what: Long, extra: Long) {
      api.pigeonRegistrar.runOnMainThread { api.onError(this, player, what, extra) {} }
    }
  }

  override fun pigeon_defaultConstructor(): VideoView {
    return VideoViewImpl()
  }

  override fun setVideoUri(pigeon_instance: VideoView,uri: String) {
    pigeon_instance.setVideoUri(uri)
  }

  override fun getCurrentPosition(pigeon_instance: VideoView): Long {
    return pigeon_instance.getCurrentPosition()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.widget.VideoView
import android.media.MediaPlayer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class VideoViewProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoView()

    assertTrue(api.pigeon_defaultConstructor() is VideoViewProxyApi.VideoView)
  }

  @Test
  fun setVideoUri() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoView()

    val instance = mock<VideoView>()
    val uri = "myString"
    api.setVideoUri(instance, uri)

    verify(instance).setVideoUri(uri)
  }

  @Test
  fun getCurrentPosition() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoView()

    val instance = mock<VideoView>()
    val value = 0
    whenever(instance.getCurrentPosition()).thenReturn(value)

    assertEquals(value, api.getCurrentPosition(instance ))
  }

  @Test
  fun onPrepared() {
    val mockApi = mock<VideoViewProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoViewImpl(mockApi)
    val player = mock<MediaPlayer>()
    instance.onPrepared(player)

    verify(mockApi).onPrepared(eq(instance), eq(player), any())
  }

  @Test
  fun onCompletion() {
    val mockApi = mock<VideoViewProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoViewImpl(mockApi)
    val player = mock<MediaPlayer>()
    instance.onCompletion(player)

    verify(mockApi).onCompletion(eq(instance), eq(player), any())
  }

  @Test
  fun onError() {
    val mockApi = mock<VideoViewProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoViewImpl(mockApi)
    val player = mock<MediaPlayer>()
    val what = 0
    val extra = 0
    instance.onError(player, what, extra)

    verify(mockApi).onError(eq(instance), eq(player), eq(what), eq(extra), any())
  }

}
*/
/**
 * This class represents the basic building block for user interface components.
 *
 * See https://developer.android.com/reference/android/view/View.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiView(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of View and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.view.View, callback: (Result<Unit>) -> Unit) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.View

/**
 * ProxyApi implementation for [View].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class ViewProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiView(pigeonRegistrar) {

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.view.View
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class ViewProxyApiTest {
}
*/
/**
 * MediaPlayer class can be used to control playback of audio/video files and streams.
 *
 * See https://developer.android.com/reference/android/media/MediaPlayer.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMediaPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Gets the duration of the file. */
  abstract fun getDuration(pigeon_instance: android.media.MediaPlayer): Long

  /** Seeks to specified time position. */
  abstract fun seekTo(pigeon_instance: android.media.MediaPlayer, mSec: Long)

  /** Starts or resumes playback. */
  abstract fun start(pigeon_instance: android.media.MediaPlayer)

  /** Pauses playback. */
  abstract fun pause(pigeon_instance: android.media.MediaPlayer)

  /** Stops playback after playback has been started or paused. */
  abstract fun stop(pigeon_instance: android.media.MediaPlayer)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMediaPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.getDuration",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getDuration(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.seekTo",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val mSecArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.seekTo(pigeon_instanceArg, mSecArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.start",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.start(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.pause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.stop", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.stop(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MediaPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.media.MediaPlayer

/**
 * ProxyApi implementation for [MediaPlayer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class MediaPlayerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiMediaPlayer(pigeonRegistrar) {

  override fun getDuration(pigeon_instance: MediaPlayer): Long {
    return pigeon_instance.getDuration()
  }

  override fun seekTo(pigeon_instance: MediaPlayer,mSec: Long) {
    pigeon_instance.seekTo(mSec)
  }

  override fun start(pigeon_instance: MediaPlayer) {
    pigeon_instance.start()
  }

  override fun pause(pigeon_instance: MediaPlayer) {
    pigeon_instance.pause()
  }

  override fun stop(pigeon_instance: MediaPlayer) {
    pigeon_instance.stop()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import android.media.MediaPlayer
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class MediaPlayerProxyApiTest {
  @Test
  fun getDuration() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    val value = 0
    whenever(instance.getDuration()).thenReturn(value)

    assertEquals(value, api.getDuration(instance ))
  }

  @Test
  fun seekTo() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    val mSec = 0
    api.seekTo(instance, mSec)

    verify(instance).seekTo(mSec)
  }

  @Test
  fun start() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    api.start(instance )

    verify(instance).start()
  }

  @Test
  fun pause() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    api.pause(instance )

    verify(instance).pause()
  }

  @Test
  fun stop() {
    val api = TestProxyApiRegistrar().getPigeonApiMediaPlayer()

    val instance = mock<MediaPlayer>()
    api.stop(instance )

    verify(instance).stop()
  }

}
*/
/**
 * Callbacks that the player must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.VideoAdPlayerCallback.html
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayerCallback(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Fire this callback periodically as ad playback occurs. */
  abstract fun onAdProgress(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      videoProgressUpdate: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  /** Fire this callback when video playback stalls waiting for data. */
  abstract fun onBuffering(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when all content has finished playing. */
  abstract fun onContentComplete(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
  )

  /** Fire this callback when the video finishes playing. */
  abstract fun onEnded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video has encountered an error. */
  abstract fun onError(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is ready to begin playback. */
  abstract fun onLoaded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is paused. */
  abstract fun onPause(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the player begins playing a video. */
  abstract fun onPlay(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is unpaused. */
  abstract fun onResume(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the playback volume changes. */
  abstract fun onVolumeChanged(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      percentage: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiVideoAdPlayerCallback?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val videoProgressUpdateArg =
                args[2] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.onAdProgress(pigeon_instanceArg, adMediaInfoArg, videoProgressUpdateArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onBuffering",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onBuffering(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onContentComplete",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val wrapped: List<Any?> =
                try {
                  api.onContentComplete(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onEnded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onEnded(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onError",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onError(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onLoaded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onLoaded(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onPause(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPlay",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onPlay(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onResume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onResume(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onVolumeChanged",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val percentageArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.onVolumeChanged(pigeon_instanceArg, adMediaInfoArg, percentageArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayerCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoAdPlayerCallback].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoAdPlayerCallbackProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoAdPlayerCallback(pigeonRegistrar) {

  override fun onAdProgress(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo, videoProgressUpdate: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
    pigeon_instance.onAdProgress(adMediaInfo, videoProgressUpdate)
  }

  override fun onBuffering(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onBuffering(adMediaInfo)
  }

  override fun onContentComplete(pigeon_instance: VideoAdPlayerCallback) {
    pigeon_instance.onContentComplete()
  }

  override fun onEnded(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onEnded(adMediaInfo)
  }

  override fun onError(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onError(adMediaInfo)
  }

  override fun onLoaded(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onLoaded(adMediaInfo)
  }

  override fun onPause(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onPause(adMediaInfo)
  }

  override fun onPlay(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onPlay(adMediaInfo)
  }

  override fun onResume(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
    pigeon_instance.onResume(adMediaInfo)
  }

  override fun onVolumeChanged(pigeon_instance: VideoAdPlayerCallback,adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo, percentage: Long) {
    pigeon_instance.onVolumeChanged(adMediaInfo, percentage)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class VideoAdPlayerCallbackProxyApiTest {
  @Test
  fun onAdProgress() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    val videoProgressUpdate = mock<VideoProgressUpdate>()
    api.onAdProgress(instance, adMediaInfo, videoProgressUpdate)

    verify(instance).onAdProgress(adMediaInfo, videoProgressUpdate)
  }

  @Test
  fun onBuffering() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onBuffering(instance, adMediaInfo)

    verify(instance).onBuffering(adMediaInfo)
  }

  @Test
  fun onContentComplete() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    api.onContentComplete(instance )

    verify(instance).onContentComplete()
  }

  @Test
  fun onEnded() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onEnded(instance, adMediaInfo)

    verify(instance).onEnded(adMediaInfo)
  }

  @Test
  fun onError() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onError(instance, adMediaInfo)

    verify(instance).onError(adMediaInfo)
  }

  @Test
  fun onLoaded() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onLoaded(instance, adMediaInfo)

    verify(instance).onLoaded(adMediaInfo)
  }

  @Test
  fun onPause() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onPause(instance, adMediaInfo)

    verify(instance).onPause(adMediaInfo)
  }

  @Test
  fun onPlay() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onPlay(instance, adMediaInfo)

    verify(instance).onPlay(adMediaInfo)
  }

  @Test
  fun onResume() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    api.onResume(instance, adMediaInfo)

    verify(instance).onResume(adMediaInfo)
  }

  @Test
  fun onVolumeChanged() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayerCallback()

    val instance = mock<VideoAdPlayerCallback>()
    val adMediaInfo = mock<AdMediaInfo>()
    val percentage = 0
    api.onVolumeChanged(instance, adMediaInfo, percentage)

    verify(instance).onVolumeChanged(adMediaInfo, percentage)
  }

}
*/
/**
 * Defines the set of methods that a video player must implement to be used by the IMA SDK, as well
 * as a set of callbacks that it must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer

  /** The volume of the player as a percentage from 0 to 100. */
  abstract fun setVolume(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      value: Long
  )

  /** The `VideoProgressUpdate` describing playback progress of the current video. */
  abstract fun setAdProgress(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoAdPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setVolume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val valueArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.setVolume(pigeon_instanceArg, valueArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val progressArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.setAdProgress(pigeon_instanceArg, progressArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoAdPlayer, but the class has a nonnull callback method.")
  }

  /** Adds a callback. */
  fun addCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Loads a video ad hosted at AdMediaInfo. */
  fun loadAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      adPodInfoArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg, adPodInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Pauses playing the current ad. */
  fun pauseAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /**
   * Starts or resumes playing the video ad referenced by the AdMediaInfo, provided loadAd has
   * already been called for it.
   */
  fun playAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Cleans up and releases all resources used by the `VideoAdPlayer`. */
  fun release(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Removes a callback. */
  fun removeCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Stops playing the current ad. */
  fun stopAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.AdPodInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

/**
 * ProxyApi implementation for [VideoAdPlayer].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class VideoAdPlayerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiVideoAdPlayer(pigeonRegistrar) {
  internal class VideoAdPlayerImpl(val api: VideoAdPlayerProxyApi) : VideoAdPlayer {
    override fun addCallback(callback: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      api.pigeonRegistrar.runOnMainThread { api.addCallback(this, callback) {} }
    }
    override fun loadAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo, adPodInfo: com.google.ads.interactivemedia.v3.api.AdPodInfo) {
      api.pigeonRegistrar.runOnMainThread { api.loadAd(this, adMediaInfo, adPodInfo) {} }
    }
    override fun pauseAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      api.pigeonRegistrar.runOnMainThread { api.pauseAd(this, adMediaInfo) {} }
    }
    override fun playAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      api.pigeonRegistrar.runOnMainThread { api.playAd(this, adMediaInfo) {} }
    }
    override fun release() {
      api.pigeonRegistrar.runOnMainThread { api.release(this ) {} }
    }
    override fun removeCallback(callback: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      api.pigeonRegistrar.runOnMainThread { api.removeCallback(this, callback) {} }
    }
    override fun stopAd(adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      api.pigeonRegistrar.runOnMainThread { api.stopAd(this, adMediaInfo) {} }
    }
  }

  override fun pigeon_defaultConstructor(): VideoAdPlayer {
    return VideoAdPlayerImpl()
  }

  override fun setVolume(pigeon_instance: VideoAdPlayer,value: Long) {
    pigeon_instance.setVolume(value)
  }

  override fun setAdProgress(pigeon_instance: VideoAdPlayer,progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
    pigeon_instance.setAdProgress(progress)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
import com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
import com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
import com.google.ads.interactivemedia.v3.api.AdPodInfo
import com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class VideoAdPlayerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayer()

    assertTrue(api.pigeon_defaultConstructor() is VideoAdPlayerProxyApi.VideoAdPlayer)
  }

  @Test
  fun setVolume() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayer()

    val instance = mock<VideoAdPlayer>()
    val value = 0
    api.setVolume(instance, value)

    verify(instance).setVolume(value)
  }

  @Test
  fun setAdProgress() {
    val api = TestProxyApiRegistrar().getPigeonApiVideoAdPlayer()

    val instance = mock<VideoAdPlayer>()
    val progress = mock<VideoProgressUpdate>()
    api.setAdProgress(instance, progress)

    verify(instance).setAdProgress(progress)
  }

  @Test
  fun addCallback() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val callback = mock<VideoAdPlayerCallback>()
    instance.addCallback(callback)

    verify(mockApi).addCallback(eq(instance), eq(callback), any())
  }

  @Test
  fun loadAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    val adPodInfo = mock<AdPodInfo>()
    instance.loadAd(adMediaInfo, adPodInfo)

    verify(mockApi).loadAd(eq(instance), eq(adMediaInfo), eq(adPodInfo), any())
  }

  @Test
  fun pauseAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    instance.pauseAd(adMediaInfo)

    verify(mockApi).pauseAd(eq(instance), eq(adMediaInfo), any())
  }

  @Test
  fun playAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    instance.playAd(adMediaInfo)

    verify(mockApi).playAd(eq(instance), eq(adMediaInfo), any())
  }

  @Test
  fun release() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    instance.release()

    verify(mockApi).release(eq(instance) , any())
  }

  @Test
  fun removeCallback() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val callback = mock<VideoAdPlayerCallback>()
    instance.removeCallback(callback)

    verify(mockApi).removeCallback(eq(instance), eq(callback), any())
  }

  @Test
  fun stopAd() {
    val mockApi = mock<VideoAdPlayerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = VideoAdPlayerImpl(mockApi)
    val adMediaInfo = mock<AdMediaInfo>()
    instance.stopAd(adMediaInfo)

    verify(mockApi).stopAd(eq(instance), eq(adMediaInfo), any())
  }

}
*/
/**
 * Listener interface for notification of ad load or stream load completion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.AdsLoadedListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoadedListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsLoadedListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoadedListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdsLoadedListener, but the class has a nonnull callback method.")
  }

  /** Called once the AdsManager or StreamManager has been loaded. */
  fun onAdsManagerLoaded(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent

/**
 * ProxyApi implementation for [AdsLoadedListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdsLoadedListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdsLoadedListener(pigeonRegistrar) {
  internal class AdsLoadedListenerImpl(val api: AdsLoadedListenerProxyApi) : AdsLoadedListener {
    override fun onAdsManagerLoaded(event: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent) {
      api.pigeonRegistrar.runOnMainThread { api.onAdsManagerLoaded(this, event) {} }
    }
  }

  override fun pigeon_defaultConstructor(): AdsLoadedListener {
    return AdsLoadedListenerImpl()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
import com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdsLoadedListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiAdsLoadedListener()

    assertTrue(api.pigeon_defaultConstructor() is AdsLoadedListenerProxyApi.AdsLoadedListenerImpl)
  }

  @Test
  fun onAdsManagerLoaded() {
    val mockApi = mock<AdsLoadedListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = AdsLoadedListenerImpl(mockApi)
    val event = mock<AdsManagerLoadedEvent>()
    instance.onAdsManagerLoaded(event)

    verify(mockApi).onAdsManagerLoaded(eq(instance), eq(event), any())
  }

}
*/
/**
 * Interface for classes that will listen to AdErrorEvents.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.AdErrorListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdErrorListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdErrorListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdErrorListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdErrorListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdErrorListener, but the class has a nonnull callback method.")
  }

  /** Called when an error occurs. */
  fun onAdError(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdErrorEvent

/**
 * ProxyApi implementation for [AdErrorListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdErrorListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdErrorListener(pigeonRegistrar) {
  internal class AdErrorListenerImpl(val api: AdErrorListenerProxyApi) : AdErrorListener {
    override fun onAdError(event: com.google.ads.interactivemedia.v3.api.AdErrorEvent) {
      api.pigeonRegistrar.runOnMainThread { api.onAdError(this, event) {} }
    }
  }

  override fun pigeon_defaultConstructor(): AdErrorListener {
    return AdErrorListenerImpl()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
import com.google.ads.interactivemedia.v3.api.AdErrorEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdErrorListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiAdErrorListener()

    assertTrue(api.pigeon_defaultConstructor() is AdErrorListenerProxyApi.AdErrorListenerImpl)
  }

  @Test
  fun onAdError() {
    val mockApi = mock<AdErrorListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = AdErrorListenerImpl(mockApi)
    val event = mock<AdErrorEvent>()
    instance.onAdError(event)

    verify(mockApi).onAdError(eq(instance), eq(event), any())
  }

}
*/
/**
 * Listener interface for ad events.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdEventListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdEventListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: StandardMessageCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdEventListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg =
                args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdEventListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdEventListener, but the class has a nonnull callback method.")
  }

  /** Respond to an occurrence of an AdEvent. */
  fun onAdEvent(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import com.google.ads.interactivemedia.v3.api.AdEvent

/**
 * ProxyApi implementation for [AdEventListener].
 *
 * <p>This class may handle instantiating native object instances that are attached to a Dart
 * instance or handle method calls on the associated native class or an instance of that class.
 */
class AdEventListenerProxyApi(override val pigeonRegistrar: ProxyApiRegistrar) : PigeonApiAdEventListener(pigeonRegistrar) {
  internal class AdEventListenerImpl(val api: AdEventListenerProxyApi) : AdEventListener {
    override fun onAdEvent(event: com.google.ads.interactivemedia.v3.api.AdEvent) {
      api.pigeonRegistrar.runOnMainThread { api.onAdEvent(this, event) {} }
    }
  }

  override fun pigeon_defaultConstructor(): AdEventListener {
    return AdEventListenerImpl()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package dev.flutter.packages.interactive_media_ads

import com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
import com.google.ads.interactivemedia.v3.api.AdEvent
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.mockito.Mockito
import org.mockito.kotlin.any
import org.mockito.kotlin.eq
import org.mockito.kotlin.mock
import org.mockito.kotlin.verify
import org.mockito.kotlin.whenever

class AdEventListenerProxyApiTest {
  @Test
  fun pigeon_defaultConstructor() {
    val api = TestProxyApiRegistrar().getPigeonApiAdEventListener()

    assertTrue(api.pigeon_defaultConstructor() is AdEventListenerProxyApi.AdEventListenerImpl)
  }

  @Test
  fun onAdEvent() {
    val mockApi = mock<AdEventListenerProxyApi>()
    whenever(mockApi.pigeonRegistrar).thenReturn(TestProxyApiRegistrar())

    val instance = AdEventListenerImpl(mockApi)
    val event = mock<AdEvent>()
    instance.onAdEvent(event)

    verify(mockApi).onAdEvent(eq(instance), eq(event), any())
  }

}
*/
