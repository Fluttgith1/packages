// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v13.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Possible outcomes of an authentication attempt.
enum AuthResult: Int {
  /// The user authenticated successfully.
  case success = 0
  /// The user failed to successfully authenticate.
  case failure = 1
  /// The authentication system was not available.
  case errorNotAvailable = 2
  /// No biometrics are enrolled.
  case errorNotEnrolled = 3
  /// No passcode is set.
  case errorPasscodeNotSet = 4
}

/// Pigeon equivalent of the subset of BiometricType used by iOS.
enum AuthBiometric: Int {
  case face = 0
  case fingerprint = 1
}

/// Pigeon version of IOSAuthMessages, plus the authorization reason.
///
/// See auth_messages_ios.dart for details.
///
/// Generated class from Pigeon that represents data sent in messages.
struct AuthStrings {
  var reason: String
  var lockOut: String
  var goToSettingsButton: String
  var goToSettingsDescription: String
  var cancelButton: String
  var localizedFallbackTitle: String? = nil

  static func fromList(_ list: [Any?]) -> AuthStrings? {
    let reason = list[0] as! String
    let lockOut = list[1] as! String
    let goToSettingsButton = list[2] as! String
    let goToSettingsDescription = list[3] as! String
    let cancelButton = list[4] as! String
    let localizedFallbackTitle: String? = nilOrValue(list[5])

    return AuthStrings(
      reason: reason,
      lockOut: lockOut,
      goToSettingsButton: goToSettingsButton,
      goToSettingsDescription: goToSettingsDescription,
      cancelButton: cancelButton,
      localizedFallbackTitle: localizedFallbackTitle
    )
  }
  func toList() -> [Any?] {
    return [
      reason,
      lockOut,
      goToSettingsButton,
      goToSettingsDescription,
      cancelButton,
      localizedFallbackTitle,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AuthOptions {
  var biometricOnly: Bool
  var sticky: Bool
  var useErrorDialogs: Bool

  static func fromList(_ list: [Any?]) -> AuthOptions? {
    let biometricOnly = list[0] as! Bool
    let sticky = list[1] as! Bool
    let useErrorDialogs = list[2] as! Bool

    return AuthOptions(
      biometricOnly: biometricOnly,
      sticky: sticky,
      useErrorDialogs: useErrorDialogs
    )
  }
  func toList() -> [Any?] {
    return [
      biometricOnly,
      sticky,
      useErrorDialogs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AuthResultDetails {
  /// The result of authenticating.
  var result: AuthResult
  /// A system-provided error message, if any.
  var errorMessage: String? = nil
  /// System-provided error details, if any.
  var errorDetails: String? = nil

  static func fromList(_ list: [Any?]) -> AuthResultDetails? {
    let result = AuthResult(rawValue: list[0] as! Int)!
    let errorMessage: String? = nilOrValue(list[1])
    let errorDetails: String? = nilOrValue(list[2])

    return AuthResultDetails(
      result: result,
      errorMessage: errorMessage,
      errorDetails: errorDetails
    )
  }
  func toList() -> [Any?] {
    return [
      result.rawValue,
      errorMessage,
      errorDetails,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AuthBiometricWrapper {
  var value: AuthBiometric

  static func fromList(_ list: [Any?]) -> AuthBiometricWrapper? {
    let value = AuthBiometric(rawValue: list[0] as! Int)!

    return AuthBiometricWrapper(
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      value.rawValue
    ]
  }
}

private class LocalAuthApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return AuthBiometricWrapper.fromList(self.readValue() as! [Any?])
    case 129:
      return AuthOptions.fromList(self.readValue() as! [Any?])
    case 130:
      return AuthResultDetails.fromList(self.readValue() as! [Any?])
    case 131:
      return AuthStrings.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class LocalAuthApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AuthBiometricWrapper {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? AuthOptions {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? AuthResultDetails {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? AuthStrings {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocalAuthApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocalAuthApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocalAuthApiCodecWriter(data: data)
  }
}

class LocalAuthApiCodec: FlutterStandardMessageCodec {
  static let shared = LocalAuthApiCodec(readerWriter: LocalAuthApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocalAuthApi {
  /// Returns true if this device supports authentication.
  func isDeviceSupported() throws -> Bool
  /// Returns true if this device can support biometric authentication, whether
  /// any biometrics are enrolled or not.
  func deviceCanSupportBiometrics() throws -> Bool
  /// Returns the biometric types that are enrolled, and can thus be used
  /// without additional setup.
  func getEnrolledBiometrics() throws -> [AuthBiometricWrapper]
  /// Attempts to authenticate the user with the provided [options], and using
  /// [strings] for any UI.
  func authenticate(
    options: AuthOptions, strings: AuthStrings,
    completion: @escaping (Result<AuthResultDetails, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocalAuthApiSetup {
  /// The codec used by LocalAuthApi.
  static var codec: FlutterStandardMessageCodec { LocalAuthApiCodec.shared }
  /// Sets up an instance of `LocalAuthApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocalAuthApi?) {
    /// Returns true if this device supports authentication.
    let isDeviceSupportedChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.local_auth_darwin.LocalAuthApi.isDeviceSupported",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDeviceSupportedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDeviceSupported()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDeviceSupportedChannel.setMessageHandler(nil)
    }
    /// Returns true if this device can support biometric authentication, whether
    /// any biometrics are enrolled or not.
    let deviceCanSupportBiometricsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.local_auth_darwin.LocalAuthApi.deviceCanSupportBiometrics",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deviceCanSupportBiometricsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.deviceCanSupportBiometrics()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      deviceCanSupportBiometricsChannel.setMessageHandler(nil)
    }
    /// Returns the biometric types that are enrolled, and can thus be used
    /// without additional setup.
    let getEnrolledBiometricsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.local_auth_darwin.LocalAuthApi.getEnrolledBiometrics",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getEnrolledBiometricsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getEnrolledBiometrics()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getEnrolledBiometricsChannel.setMessageHandler(nil)
    }
    /// Attempts to authenticate the user with the provided [options], and using
    /// [strings] for any UI.
    let authenticateChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.local_auth_darwin.LocalAuthApi.authenticate",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! AuthOptions
        let stringsArg = args[1] as! AuthStrings
        api.authenticate(options: optionsArg, strings: stringsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateChannel.setMessageHandler(nil)
    }
  }
}
