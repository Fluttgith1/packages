// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages_objc.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface CreateMessage ()
+ (CreateMessage *)fromList:(NSArray *)list;
+ (nullable CreateMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation CreateMessage
+ (instancetype)makeWithAsset:(nullable NSString *)asset
                          uri:(nullable NSString *)uri
                         code:(Code)code
                  httpHeaders:(NSDictionary<NSString *, NSString *> *)httpHeaders {
  CreateMessage *pigeonResult = [[CreateMessage alloc] init];
  pigeonResult.asset = asset;
  pigeonResult.uri = uri;
  pigeonResult.code = code;
  pigeonResult.httpHeaders = httpHeaders;
  return pigeonResult;
}
+ (CreateMessage *)fromList:(NSArray *)list {
  CreateMessage *pigeonResult = [[CreateMessage alloc] init];
  pigeonResult.asset = GetNullableObjectAtIndex(list, 0);
  pigeonResult.uri = GetNullableObjectAtIndex(list, 1);
  pigeonResult.code = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.httpHeaders = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.httpHeaders != nil, @"");
  return pigeonResult;
}
+ (nullable CreateMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [CreateMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.asset ?: [NSNull null]),
    (self.uri ?: [NSNull null]),
    @(self.code),
    (self.httpHeaders ?: [NSNull null]),
  ];
}
@end

@interface ExampleHostApiCodecReader : FlutterStandardReader
@end
@implementation ExampleHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [CreateMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ExampleHostApiCodecWriter : FlutterStandardWriter
@end
@implementation ExampleHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[CreateMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ExampleHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ExampleHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ExampleHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ExampleHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ExampleHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ExampleHostApiCodecReaderWriter *readerWriter = [[ExampleHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ExampleHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                         NSObject<ExampleHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.ExampleHostApi.getHostLanguage"
        binaryMessenger:binaryMessenger
                  codec:ExampleHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHostLanguageWithError:)],
                @"ExampleHostApi api (%@) doesn't respond to @selector(getHostLanguageWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getHostLanguageWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
        [[FlutterBasicMessageChannel alloc] initWithName:@"dev.flutter.pigeon.ExampleHostApi.add"
                                         binaryMessenger:binaryMessenger
                                                   codec:ExampleHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addA:b:error:)],
                @"ExampleHostApi api (%@) doesn't respond to @selector(addA:b:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_a = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_b = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api addA:arg_a b:arg_b error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.ExampleHostApi.sendMessage"
        binaryMessenger:binaryMessenger
                  codec:ExampleHostApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(sendMessageMessage:completion:)],
          @"ExampleHostApi api (%@) doesn't respond to @selector(sendMessageMessage:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CreateMessage *arg_message = GetNullableObjectAtIndex(args, 0);
        [api sendMessageMessage:arg_message
                     completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                       callback(wrapResult(output, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *MessageFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface MessageFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation MessageFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)flutterMethodAString:(nullable NSString *)arg_aString
                  completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MessageFlutterApi.flutterMethod"
             binaryMessenger:self.binaryMessenger
                       codec:MessageFlutterApiGetCodec()];
  [channel sendMessage:@[ arg_aString ?: [NSNull null] ]
                 reply:^(id reply) {
                   NSString *output = reply;
                   completion(output, nil);
                 }];
}
@end
