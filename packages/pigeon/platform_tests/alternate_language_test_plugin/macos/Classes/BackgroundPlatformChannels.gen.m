// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "BackgroundPlatformChannels.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *BackgroundApi2HostGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void BackgroundApi2HostSetup(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<BackgroundApi2Host> *api) {
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.BackgroundApi2Host.add"
        binaryMessenger:binaryMessenger
                  codec:BackgroundApi2HostGetCodec()
              taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addX:y:error:)],
                @"BackgroundApi2Host api (%@) doesn't respond to @selector(addX:y:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_x = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_y = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api addX:arg_x y:arg_y error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
