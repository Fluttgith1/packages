// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "CoreTests.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError
      errorWithCode:@"channel-error"
            message:[NSString stringWithFormat:@"%@/%@/%@",
                                               @"Unable to establish connection on channel: '",
                                               channelName, @"'."]
            details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation FillerEnum0Box
- (instancetype)initWithValue:(FillerEnum0)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum1Box
- (instancetype)initWithValue:(FillerEnum1)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum2Box
- (instancetype)initWithValue:(FillerEnum2)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum3Box
- (instancetype)initWithValue:(FillerEnum3)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum4Box
- (instancetype)initWithValue:(FillerEnum4)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum5Box
- (instancetype)initWithValue:(FillerEnum5)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum6Box
- (instancetype)initWithValue:(FillerEnum6)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum7Box
- (instancetype)initWithValue:(FillerEnum7)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum8Box
- (instancetype)initWithValue:(FillerEnum8)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum9Box
- (instancetype)initWithValue:(FillerEnum9)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum10Box
- (instancetype)initWithValue:(FillerEnum10)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum11Box
- (instancetype)initWithValue:(FillerEnum11)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum12Box
- (instancetype)initWithValue:(FillerEnum12)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum13Box
- (instancetype)initWithValue:(FillerEnum13)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum14Box
- (instancetype)initWithValue:(FillerEnum14)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum15Box
- (instancetype)initWithValue:(FillerEnum15)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum16Box
- (instancetype)initWithValue:(FillerEnum16)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum17Box
- (instancetype)initWithValue:(FillerEnum17)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum18Box
- (instancetype)initWithValue:(FillerEnum18)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum19Box
- (instancetype)initWithValue:(FillerEnum19)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum20Box
- (instancetype)initWithValue:(FillerEnum20)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum21Box
- (instancetype)initWithValue:(FillerEnum21)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum22Box
- (instancetype)initWithValue:(FillerEnum22)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum23Box
- (instancetype)initWithValue:(FillerEnum23)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum24Box
- (instancetype)initWithValue:(FillerEnum24)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum25Box
- (instancetype)initWithValue:(FillerEnum25)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum26Box
- (instancetype)initWithValue:(FillerEnum26)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum27Box
- (instancetype)initWithValue:(FillerEnum27)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum28Box
- (instancetype)initWithValue:(FillerEnum28)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum29Box
- (instancetype)initWithValue:(FillerEnum29)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum30Box
- (instancetype)initWithValue:(FillerEnum30)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum31Box
- (instancetype)initWithValue:(FillerEnum31)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum32Box
- (instancetype)initWithValue:(FillerEnum32)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum33Box
- (instancetype)initWithValue:(FillerEnum33)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum34Box
- (instancetype)initWithValue:(FillerEnum34)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum35Box
- (instancetype)initWithValue:(FillerEnum35)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum36Box
- (instancetype)initWithValue:(FillerEnum36)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum37Box
- (instancetype)initWithValue:(FillerEnum37)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum38Box
- (instancetype)initWithValue:(FillerEnum38)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum39Box
- (instancetype)initWithValue:(FillerEnum39)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum40Box
- (instancetype)initWithValue:(FillerEnum40)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum41Box
- (instancetype)initWithValue:(FillerEnum41)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum42Box
- (instancetype)initWithValue:(FillerEnum42)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum43Box
- (instancetype)initWithValue:(FillerEnum43)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum44Box
- (instancetype)initWithValue:(FillerEnum44)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum45Box
- (instancetype)initWithValue:(FillerEnum45)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum46Box
- (instancetype)initWithValue:(FillerEnum46)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum47Box
- (instancetype)initWithValue:(FillerEnum47)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum48Box
- (instancetype)initWithValue:(FillerEnum48)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum49Box
- (instancetype)initWithValue:(FillerEnum49)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum50Box
- (instancetype)initWithValue:(FillerEnum50)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum51Box
- (instancetype)initWithValue:(FillerEnum51)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum52Box
- (instancetype)initWithValue:(FillerEnum52)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum53Box
- (instancetype)initWithValue:(FillerEnum53)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum54Box
- (instancetype)initWithValue:(FillerEnum54)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum55Box
- (instancetype)initWithValue:(FillerEnum55)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum56Box
- (instancetype)initWithValue:(FillerEnum56)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum57Box
- (instancetype)initWithValue:(FillerEnum57)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum58Box
- (instancetype)initWithValue:(FillerEnum58)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum59Box
- (instancetype)initWithValue:(FillerEnum59)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum60Box
- (instancetype)initWithValue:(FillerEnum60)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum61Box
- (instancetype)initWithValue:(FillerEnum61)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum62Box
- (instancetype)initWithValue:(FillerEnum62)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum63Box
- (instancetype)initWithValue:(FillerEnum63)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum64Box
- (instancetype)initWithValue:(FillerEnum64)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum65Box
- (instancetype)initWithValue:(FillerEnum65)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum66Box
- (instancetype)initWithValue:(FillerEnum66)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum67Box
- (instancetype)initWithValue:(FillerEnum67)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum68Box
- (instancetype)initWithValue:(FillerEnum68)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum69Box
- (instancetype)initWithValue:(FillerEnum69)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum70Box
- (instancetype)initWithValue:(FillerEnum70)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum71Box
- (instancetype)initWithValue:(FillerEnum71)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum72Box
- (instancetype)initWithValue:(FillerEnum72)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum73Box
- (instancetype)initWithValue:(FillerEnum73)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum74Box
- (instancetype)initWithValue:(FillerEnum74)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum75Box
- (instancetype)initWithValue:(FillerEnum75)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum76Box
- (instancetype)initWithValue:(FillerEnum76)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum77Box
- (instancetype)initWithValue:(FillerEnum77)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum78Box
- (instancetype)initWithValue:(FillerEnum78)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum79Box
- (instancetype)initWithValue:(FillerEnum79)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum80Box
- (instancetype)initWithValue:(FillerEnum80)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum81Box
- (instancetype)initWithValue:(FillerEnum81)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum82Box
- (instancetype)initWithValue:(FillerEnum82)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum83Box
- (instancetype)initWithValue:(FillerEnum83)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum84Box
- (instancetype)initWithValue:(FillerEnum84)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum85Box
- (instancetype)initWithValue:(FillerEnum85)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum86Box
- (instancetype)initWithValue:(FillerEnum86)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum87Box
- (instancetype)initWithValue:(FillerEnum87)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum88Box
- (instancetype)initWithValue:(FillerEnum88)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum89Box
- (instancetype)initWithValue:(FillerEnum89)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum90Box
- (instancetype)initWithValue:(FillerEnum90)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum91Box
- (instancetype)initWithValue:(FillerEnum91)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum92Box
- (instancetype)initWithValue:(FillerEnum92)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum93Box
- (instancetype)initWithValue:(FillerEnum93)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum94Box
- (instancetype)initWithValue:(FillerEnum94)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum95Box
- (instancetype)initWithValue:(FillerEnum95)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum96Box
- (instancetype)initWithValue:(FillerEnum96)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum97Box
- (instancetype)initWithValue:(FillerEnum97)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum98Box
- (instancetype)initWithValue:(FillerEnum98)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum99Box
- (instancetype)initWithValue:(FillerEnum99)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum100Box
- (instancetype)initWithValue:(FillerEnum100)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum101Box
- (instancetype)initWithValue:(FillerEnum101)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum102Box
- (instancetype)initWithValue:(FillerEnum102)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum103Box
- (instancetype)initWithValue:(FillerEnum103)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum104Box
- (instancetype)initWithValue:(FillerEnum104)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum105Box
- (instancetype)initWithValue:(FillerEnum105)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum106Box
- (instancetype)initWithValue:(FillerEnum106)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum107Box
- (instancetype)initWithValue:(FillerEnum107)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum108Box
- (instancetype)initWithValue:(FillerEnum108)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum109Box
- (instancetype)initWithValue:(FillerEnum109)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum110Box
- (instancetype)initWithValue:(FillerEnum110)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum111Box
- (instancetype)initWithValue:(FillerEnum111)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum112Box
- (instancetype)initWithValue:(FillerEnum112)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum113Box
- (instancetype)initWithValue:(FillerEnum113)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum114Box
- (instancetype)initWithValue:(FillerEnum114)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum115Box
- (instancetype)initWithValue:(FillerEnum115)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum116Box
- (instancetype)initWithValue:(FillerEnum116)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum117Box
- (instancetype)initWithValue:(FillerEnum117)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum118Box
- (instancetype)initWithValue:(FillerEnum118)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum119Box
- (instancetype)initWithValue:(FillerEnum119)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum120Box
- (instancetype)initWithValue:(FillerEnum120)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum121Box
- (instancetype)initWithValue:(FillerEnum121)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum122Box
- (instancetype)initWithValue:(FillerEnum122)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum123Box
- (instancetype)initWithValue:(FillerEnum123)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FillerEnum124Box
- (instancetype)initWithValue:(FillerEnum124)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation AnEnumBox
- (instancetype)initWithValue:(AnEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation AnotherEnumBox
- (instancetype)initWithValue:(AnotherEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface AllTypes ()
+ (AllTypes *)fromList:(NSArray<id> *)list;
+ (nullable AllTypes *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AllNullableTypes ()
+ (AllNullableTypes *)fromList:(NSArray<id> *)list;
+ (nullable AllNullableTypes *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AllNullableTypesWithoutRecursion ()
+ (AllNullableTypesWithoutRecursion *)fromList:(NSArray<id> *)list;
+ (nullable AllNullableTypesWithoutRecursion *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AllClassesWrapper ()
+ (AllClassesWrapper *)fromList:(NSArray<id> *)list;
+ (nullable AllClassesWrapper *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface TestMessage ()
+ (TestMessage *)fromList:(NSArray<id> *)list;
+ (nullable TestMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation AllTypes
+ (instancetype)makeWithABool:(BOOL)aBool
                        anInt:(NSInteger)anInt
                      anInt64:(NSInteger)anInt64
                      aDouble:(double)aDouble
                   aByteArray:(FlutterStandardTypedData *)aByteArray
                  a4ByteArray:(FlutterStandardTypedData *)a4ByteArray
                  a8ByteArray:(FlutterStandardTypedData *)a8ByteArray
                  aFloatArray:(FlutterStandardTypedData *)aFloatArray
                       anEnum:(AnEnum)anEnum
                  anotherEnum:(AnotherEnum)anotherEnum
                      aString:(NSString *)aString
                     anObject:(id)anObject
                         list:(NSArray<id> *)list
                   stringList:(NSArray<NSString *> *)stringList
                      intList:(NSArray<NSNumber *> *)intList
                   doubleList:(NSArray<NSNumber *> *)doubleList
                     boolList:(NSArray<NSNumber *> *)boolList
                          map:(NSDictionary *)map {
  AllTypes *pigeonResult = [[AllTypes alloc] init];
  pigeonResult.aBool = aBool;
  pigeonResult.anInt = anInt;
  pigeonResult.anInt64 = anInt64;
  pigeonResult.aDouble = aDouble;
  pigeonResult.aByteArray = aByteArray;
  pigeonResult.a4ByteArray = a4ByteArray;
  pigeonResult.a8ByteArray = a8ByteArray;
  pigeonResult.aFloatArray = aFloatArray;
  pigeonResult.anEnum = anEnum;
  pigeonResult.anotherEnum = anotherEnum;
  pigeonResult.aString = aString;
  pigeonResult.anObject = anObject;
  pigeonResult.list = list;
  pigeonResult.stringList = stringList;
  pigeonResult.intList = intList;
  pigeonResult.doubleList = doubleList;
  pigeonResult.boolList = boolList;
  pigeonResult.map = map;
  return pigeonResult;
}
+ (AllTypes *)fromList:(NSArray<id> *)list {
  AllTypes *pigeonResult = [[AllTypes alloc] init];
  pigeonResult.aBool = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.anInt = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.anInt64 = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.aDouble = [GetNullableObjectAtIndex(list, 3) doubleValue];
  pigeonResult.aByteArray = GetNullableObjectAtIndex(list, 4);
  pigeonResult.a4ByteArray = GetNullableObjectAtIndex(list, 5);
  pigeonResult.a8ByteArray = GetNullableObjectAtIndex(list, 6);
  pigeonResult.aFloatArray = GetNullableObjectAtIndex(list, 7);
  AnEnumBox *anAnEnumBox = GetNullableObjectAtIndex(list, 8);
  pigeonResult.anEnum = anAnEnumBox.value;
  AnotherEnumBox *anAnotherEnumBox = GetNullableObjectAtIndex(list, 9);
  pigeonResult.anotherEnum = anAnotherEnumBox.value;
  pigeonResult.aString = GetNullableObjectAtIndex(list, 10);
  pigeonResult.anObject = GetNullableObjectAtIndex(list, 11);
  pigeonResult.list = GetNullableObjectAtIndex(list, 12);
  pigeonResult.stringList = GetNullableObjectAtIndex(list, 13);
  pigeonResult.intList = GetNullableObjectAtIndex(list, 14);
  pigeonResult.doubleList = GetNullableObjectAtIndex(list, 15);
  pigeonResult.boolList = GetNullableObjectAtIndex(list, 16);
  pigeonResult.map = GetNullableObjectAtIndex(list, 17);
  return pigeonResult;
}
+ (nullable AllTypes *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AllTypes fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.aBool),
    @(self.anInt),
    @(self.anInt64),
    @(self.aDouble),
    self.aByteArray ?: [NSNull null],
    self.a4ByteArray ?: [NSNull null],
    self.a8ByteArray ?: [NSNull null],
    self.aFloatArray ?: [NSNull null],
    [[AnEnumBox alloc] initWithValue:self.anEnum],
    [[AnotherEnumBox alloc] initWithValue:self.anotherEnum],
    self.aString ?: [NSNull null],
    self.anObject ?: [NSNull null],
    self.list ?: [NSNull null],
    self.stringList ?: [NSNull null],
    self.intList ?: [NSNull null],
    self.doubleList ?: [NSNull null],
    self.boolList ?: [NSNull null],
    self.map ?: [NSNull null],
  ];
}
@end

@implementation AllNullableTypes
+ (instancetype)makeWithANullableBool:(nullable NSNumber *)aNullableBool
                         aNullableInt:(nullable NSNumber *)aNullableInt
                       aNullableInt64:(nullable NSNumber *)aNullableInt64
                      aNullableDouble:(nullable NSNumber *)aNullableDouble
                   aNullableByteArray:(nullable FlutterStandardTypedData *)aNullableByteArray
                  aNullable4ByteArray:(nullable FlutterStandardTypedData *)aNullable4ByteArray
                  aNullable8ByteArray:(nullable FlutterStandardTypedData *)aNullable8ByteArray
                  aNullableFloatArray:(nullable FlutterStandardTypedData *)aNullableFloatArray
                   nullableNestedList:(nullable NSArray<NSArray<NSNumber *> *> *)nullableNestedList
           nullableMapWithAnnotations:
               (nullable NSDictionary<NSString *, NSString *> *)nullableMapWithAnnotations
                nullableMapWithObject:(nullable NSDictionary<NSString *, id> *)nullableMapWithObject
                        aNullableEnum:(nullable AnEnumBox *)aNullableEnum
                  anotherNullableEnum:(nullable AnotherEnumBox *)anotherNullableEnum
                      aNullableString:(nullable NSString *)aNullableString
                      aNullableObject:(nullable id)aNullableObject
                     allNullableTypes:(nullable AllNullableTypes *)allNullableTypes
                                 list:(nullable NSArray<id> *)list
                           stringList:(nullable NSArray<NSString *> *)stringList
                              intList:(nullable NSArray<NSNumber *> *)intList
                           doubleList:(nullable NSArray<NSNumber *> *)doubleList
                             boolList:(nullable NSArray<NSNumber *> *)boolList
                      nestedClassList:(nullable NSArray<AllNullableTypes *> *)nestedClassList
                                  map:(nullable NSDictionary *)map {
  AllNullableTypes *pigeonResult = [[AllNullableTypes alloc] init];
  pigeonResult.aNullableBool = aNullableBool;
  pigeonResult.aNullableInt = aNullableInt;
  pigeonResult.aNullableInt64 = aNullableInt64;
  pigeonResult.aNullableDouble = aNullableDouble;
  pigeonResult.aNullableByteArray = aNullableByteArray;
  pigeonResult.aNullable4ByteArray = aNullable4ByteArray;
  pigeonResult.aNullable8ByteArray = aNullable8ByteArray;
  pigeonResult.aNullableFloatArray = aNullableFloatArray;
  pigeonResult.nullableNestedList = nullableNestedList;
  pigeonResult.nullableMapWithAnnotations = nullableMapWithAnnotations;
  pigeonResult.nullableMapWithObject = nullableMapWithObject;
  pigeonResult.aNullableEnum = aNullableEnum;
  pigeonResult.anotherNullableEnum = anotherNullableEnum;
  pigeonResult.aNullableString = aNullableString;
  pigeonResult.aNullableObject = aNullableObject;
  pigeonResult.allNullableTypes = allNullableTypes;
  pigeonResult.list = list;
  pigeonResult.stringList = stringList;
  pigeonResult.intList = intList;
  pigeonResult.doubleList = doubleList;
  pigeonResult.boolList = boolList;
  pigeonResult.nestedClassList = nestedClassList;
  pigeonResult.map = map;
  return pigeonResult;
}
+ (AllNullableTypes *)fromList:(NSArray<id> *)list {
  AllNullableTypes *pigeonResult = [[AllNullableTypes alloc] init];
  pigeonResult.aNullableBool = GetNullableObjectAtIndex(list, 0);
  pigeonResult.aNullableInt = GetNullableObjectAtIndex(list, 1);
  pigeonResult.aNullableInt64 = GetNullableObjectAtIndex(list, 2);
  pigeonResult.aNullableDouble = GetNullableObjectAtIndex(list, 3);
  pigeonResult.aNullableByteArray = GetNullableObjectAtIndex(list, 4);
  pigeonResult.aNullable4ByteArray = GetNullableObjectAtIndex(list, 5);
  pigeonResult.aNullable8ByteArray = GetNullableObjectAtIndex(list, 6);
  pigeonResult.aNullableFloatArray = GetNullableObjectAtIndex(list, 7);
  pigeonResult.nullableNestedList = GetNullableObjectAtIndex(list, 8);
  pigeonResult.nullableMapWithAnnotations = GetNullableObjectAtIndex(list, 9);
  pigeonResult.nullableMapWithObject = GetNullableObjectAtIndex(list, 10);
  pigeonResult.aNullableEnum = GetNullableObjectAtIndex(list, 11);
  pigeonResult.anotherNullableEnum = GetNullableObjectAtIndex(list, 12);
  pigeonResult.aNullableString = GetNullableObjectAtIndex(list, 13);
  pigeonResult.aNullableObject = GetNullableObjectAtIndex(list, 14);
  pigeonResult.allNullableTypes = GetNullableObjectAtIndex(list, 15);
  pigeonResult.list = GetNullableObjectAtIndex(list, 16);
  pigeonResult.stringList = GetNullableObjectAtIndex(list, 17);
  pigeonResult.intList = GetNullableObjectAtIndex(list, 18);
  pigeonResult.doubleList = GetNullableObjectAtIndex(list, 19);
  pigeonResult.boolList = GetNullableObjectAtIndex(list, 20);
  pigeonResult.nestedClassList = GetNullableObjectAtIndex(list, 21);
  pigeonResult.map = GetNullableObjectAtIndex(list, 22);
  return pigeonResult;
}
+ (nullable AllNullableTypes *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AllNullableTypes fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.aNullableBool ?: [NSNull null],
    self.aNullableInt ?: [NSNull null],
    self.aNullableInt64 ?: [NSNull null],
    self.aNullableDouble ?: [NSNull null],
    self.aNullableByteArray ?: [NSNull null],
    self.aNullable4ByteArray ?: [NSNull null],
    self.aNullable8ByteArray ?: [NSNull null],
    self.aNullableFloatArray ?: [NSNull null],
    self.nullableNestedList ?: [NSNull null],
    self.nullableMapWithAnnotations ?: [NSNull null],
    self.nullableMapWithObject ?: [NSNull null],
    self.aNullableEnum ?: [NSNull null],
    self.anotherNullableEnum ?: [NSNull null],
    self.aNullableString ?: [NSNull null],
    self.aNullableObject ?: [NSNull null],
    self.allNullableTypes ?: [NSNull null],
    self.list ?: [NSNull null],
    self.stringList ?: [NSNull null],
    self.intList ?: [NSNull null],
    self.doubleList ?: [NSNull null],
    self.boolList ?: [NSNull null],
    self.nestedClassList ?: [NSNull null],
    self.map ?: [NSNull null],
  ];
}
@end

@implementation AllNullableTypesWithoutRecursion
+ (instancetype)makeWithANullableBool:(nullable NSNumber *)aNullableBool
                         aNullableInt:(nullable NSNumber *)aNullableInt
                       aNullableInt64:(nullable NSNumber *)aNullableInt64
                      aNullableDouble:(nullable NSNumber *)aNullableDouble
                   aNullableByteArray:(nullable FlutterStandardTypedData *)aNullableByteArray
                  aNullable4ByteArray:(nullable FlutterStandardTypedData *)aNullable4ByteArray
                  aNullable8ByteArray:(nullable FlutterStandardTypedData *)aNullable8ByteArray
                  aNullableFloatArray:(nullable FlutterStandardTypedData *)aNullableFloatArray
                   nullableNestedList:(nullable NSArray<NSArray<NSNumber *> *> *)nullableNestedList
           nullableMapWithAnnotations:
               (nullable NSDictionary<NSString *, NSString *> *)nullableMapWithAnnotations
                nullableMapWithObject:(nullable NSDictionary<NSString *, id> *)nullableMapWithObject
                        aNullableEnum:(nullable AnEnumBox *)aNullableEnum
                  anotherNullableEnum:(nullable AnotherEnumBox *)anotherNullableEnum
                      aNullableString:(nullable NSString *)aNullableString
                      aNullableObject:(nullable id)aNullableObject
                                 list:(nullable NSArray<id> *)list
                           stringList:(nullable NSArray<NSString *> *)stringList
                              intList:(nullable NSArray<NSNumber *> *)intList
                           doubleList:(nullable NSArray<NSNumber *> *)doubleList
                             boolList:(nullable NSArray<NSNumber *> *)boolList
                                  map:(nullable NSDictionary *)map {
  AllNullableTypesWithoutRecursion *pigeonResult = [[AllNullableTypesWithoutRecursion alloc] init];
  pigeonResult.aNullableBool = aNullableBool;
  pigeonResult.aNullableInt = aNullableInt;
  pigeonResult.aNullableInt64 = aNullableInt64;
  pigeonResult.aNullableDouble = aNullableDouble;
  pigeonResult.aNullableByteArray = aNullableByteArray;
  pigeonResult.aNullable4ByteArray = aNullable4ByteArray;
  pigeonResult.aNullable8ByteArray = aNullable8ByteArray;
  pigeonResult.aNullableFloatArray = aNullableFloatArray;
  pigeonResult.nullableNestedList = nullableNestedList;
  pigeonResult.nullableMapWithAnnotations = nullableMapWithAnnotations;
  pigeonResult.nullableMapWithObject = nullableMapWithObject;
  pigeonResult.aNullableEnum = aNullableEnum;
  pigeonResult.anotherNullableEnum = anotherNullableEnum;
  pigeonResult.aNullableString = aNullableString;
  pigeonResult.aNullableObject = aNullableObject;
  pigeonResult.list = list;
  pigeonResult.stringList = stringList;
  pigeonResult.intList = intList;
  pigeonResult.doubleList = doubleList;
  pigeonResult.boolList = boolList;
  pigeonResult.map = map;
  return pigeonResult;
}
+ (AllNullableTypesWithoutRecursion *)fromList:(NSArray<id> *)list {
  AllNullableTypesWithoutRecursion *pigeonResult = [[AllNullableTypesWithoutRecursion alloc] init];
  pigeonResult.aNullableBool = GetNullableObjectAtIndex(list, 0);
  pigeonResult.aNullableInt = GetNullableObjectAtIndex(list, 1);
  pigeonResult.aNullableInt64 = GetNullableObjectAtIndex(list, 2);
  pigeonResult.aNullableDouble = GetNullableObjectAtIndex(list, 3);
  pigeonResult.aNullableByteArray = GetNullableObjectAtIndex(list, 4);
  pigeonResult.aNullable4ByteArray = GetNullableObjectAtIndex(list, 5);
  pigeonResult.aNullable8ByteArray = GetNullableObjectAtIndex(list, 6);
  pigeonResult.aNullableFloatArray = GetNullableObjectAtIndex(list, 7);
  pigeonResult.nullableNestedList = GetNullableObjectAtIndex(list, 8);
  pigeonResult.nullableMapWithAnnotations = GetNullableObjectAtIndex(list, 9);
  pigeonResult.nullableMapWithObject = GetNullableObjectAtIndex(list, 10);
  pigeonResult.aNullableEnum = GetNullableObjectAtIndex(list, 11);
  pigeonResult.anotherNullableEnum = GetNullableObjectAtIndex(list, 12);
  pigeonResult.aNullableString = GetNullableObjectAtIndex(list, 13);
  pigeonResult.aNullableObject = GetNullableObjectAtIndex(list, 14);
  pigeonResult.list = GetNullableObjectAtIndex(list, 15);
  pigeonResult.stringList = GetNullableObjectAtIndex(list, 16);
  pigeonResult.intList = GetNullableObjectAtIndex(list, 17);
  pigeonResult.doubleList = GetNullableObjectAtIndex(list, 18);
  pigeonResult.boolList = GetNullableObjectAtIndex(list, 19);
  pigeonResult.map = GetNullableObjectAtIndex(list, 20);
  return pigeonResult;
}
+ (nullable AllNullableTypesWithoutRecursion *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AllNullableTypesWithoutRecursion fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.aNullableBool ?: [NSNull null],
    self.aNullableInt ?: [NSNull null],
    self.aNullableInt64 ?: [NSNull null],
    self.aNullableDouble ?: [NSNull null],
    self.aNullableByteArray ?: [NSNull null],
    self.aNullable4ByteArray ?: [NSNull null],
    self.aNullable8ByteArray ?: [NSNull null],
    self.aNullableFloatArray ?: [NSNull null],
    self.nullableNestedList ?: [NSNull null],
    self.nullableMapWithAnnotations ?: [NSNull null],
    self.nullableMapWithObject ?: [NSNull null],
    self.aNullableEnum ?: [NSNull null],
    self.anotherNullableEnum ?: [NSNull null],
    self.aNullableString ?: [NSNull null],
    self.aNullableObject ?: [NSNull null],
    self.list ?: [NSNull null],
    self.stringList ?: [NSNull null],
    self.intList ?: [NSNull null],
    self.doubleList ?: [NSNull null],
    self.boolList ?: [NSNull null],
    self.map ?: [NSNull null],
  ];
}
@end

@implementation AllClassesWrapper
+ (instancetype)makeWithAllNullableTypes:(AllNullableTypes *)allNullableTypes
        allNullableTypesWithoutRecursion:
            (nullable AllNullableTypesWithoutRecursion *)allNullableTypesWithoutRecursion
                                allTypes:(nullable AllTypes *)allTypes {
  AllClassesWrapper *pigeonResult = [[AllClassesWrapper alloc] init];
  pigeonResult.allNullableTypes = allNullableTypes;
  pigeonResult.allNullableTypesWithoutRecursion = allNullableTypesWithoutRecursion;
  pigeonResult.allTypes = allTypes;
  return pigeonResult;
}
+ (AllClassesWrapper *)fromList:(NSArray<id> *)list {
  AllClassesWrapper *pigeonResult = [[AllClassesWrapper alloc] init];
  pigeonResult.allNullableTypes = GetNullableObjectAtIndex(list, 0);
  pigeonResult.allNullableTypesWithoutRecursion = GetNullableObjectAtIndex(list, 1);
  pigeonResult.allTypes = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable AllClassesWrapper *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AllClassesWrapper fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.allNullableTypes ?: [NSNull null],
    self.allNullableTypesWithoutRecursion ?: [NSNull null],
    self.allTypes ?: [NSNull null],
  ];
}
@end

@implementation TestMessage
+ (instancetype)makeWithTestList:(nullable NSArray<id> *)testList {
  TestMessage *pigeonResult = [[TestMessage alloc] init];
  pigeonResult.testList = testList;
  return pigeonResult;
}
+ (TestMessage *)fromList:(NSArray<id> *)list {
  TestMessage *pigeonResult = [[TestMessage alloc] init];
  pigeonResult.testList = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable TestMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [TestMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.testList ?: [NSNull null],
  ];
}
@end

@interface __pigeon_CodecOverflow ()
+ (id)fromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation __pigeon_CodecOverflow
+ (instancetype)makeWithType:(NSInteger)type wrapped:(nullable id)wrapped {
  __pigeon_CodecOverflow *pigeonResult = [[__pigeon_CodecOverflow alloc] init];
  pigeonResult.type = type;
  pigeonResult.wrapped = wrapped;
  return pigeonResult;
}
- (NSArray<id> *)toList {
  return @[
    @(self.type),
    self.wrapped ?: [NSNull null],
  ];
}
+ (id)fromList:(NSArray<id> *)list {
  __pigeon_CodecOverflow *wrapper = [[__pigeon_CodecOverflow alloc] init];
  wrapper.type = [GetNullableObjectAtIndex(list, 0) integerValue];
  wrapper.wrapped = GetNullableObjectAtIndex(list, 1);
  return [wrapper unwrap];
}

- (id)unwrap {
  if (self.wrapped == nil) {
    return nil;
  }

  switch (self.type) {
    case 0:
      return [[AnotherEnumBox alloc] initWithValue:[self.wrapped integerValue]];
    case 1:
      return [AllTypes fromList:self.wrapped];
    case 2:
      return [AllNullableTypes fromList:self.wrapped];
    case 3:
      return [AllNullableTypesWithoutRecursion fromList:self.wrapped];
    case 4:
      return [AllClassesWrapper fromList:self.wrapped];
    case 5:
      return [TestMessage fromList:self.wrapped];
    default:
      return nil;
  }
}
@end
@interface CoreTestsPigeonCodecReader : FlutterStandardReader
@end
@implementation CoreTestsPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum0Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum1Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 131: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum2Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 132: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum3Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 133: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum4Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 134: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum5Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 135: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum6Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 136: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum7Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 137: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum8Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 138: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum9Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 139: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum10Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 140: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum11Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 141: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum12Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 142: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum13Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 143: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum14Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 144: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum15Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 145: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum16Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 146: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum17Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 147: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum18Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 148: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum19Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 149: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum20Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 150: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum21Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 151: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum22Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 152: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum23Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 153: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum24Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 154: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum25Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 155: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum26Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 156: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum27Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 157: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum28Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 158: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum29Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 159: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum30Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 160: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum31Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 161: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum32Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 162: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum33Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 163: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum34Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 164: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum35Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 165: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum36Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 166: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum37Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 167: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum38Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 168: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum39Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 169: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum40Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 170: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum41Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 171: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum42Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 172: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum43Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 173: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum44Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 174: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum45Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 175: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum46Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 176: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum47Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 177: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum48Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 178: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum49Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 179: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum50Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 180: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum51Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 181: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum52Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 182: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum53Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 183: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum54Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 184: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum55Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 185: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum56Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 186: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum57Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 187: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum58Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 188: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum59Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 189: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum60Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 190: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum61Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 191: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum62Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 192: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum63Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 193: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum64Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 194: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum65Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 195: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum66Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 196: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum67Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 197: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum68Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 198: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum69Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 199: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum70Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 200: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum71Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 201: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum72Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 202: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum73Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 203: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum74Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 204: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum75Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 205: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum76Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 206: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum77Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 207: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum78Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 208: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum79Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 209: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum80Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 210: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum81Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 211: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum82Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 212: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum83Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 213: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum84Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 214: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum85Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 215: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum86Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 216: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum87Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 217: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum88Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 218: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum89Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 219: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum90Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 220: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum91Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 221: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum92Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 222: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum93Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 223: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum94Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 224: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum95Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 225: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum96Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 226: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum97Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 227: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum98Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 228: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum99Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 229: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum100Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 230: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum101Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 231: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum102Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 232: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum103Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 233: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum104Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 234: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum105Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 235: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum106Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 236: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum107Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 237: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum108Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 238: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum109Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 239: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum110Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 240: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum111Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 241: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum112Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 242: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum113Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 243: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum114Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 244: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum115Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 245: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum116Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 246: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum117Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 247: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum118Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 248: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum119Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 249: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum120Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 250: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum121Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 251: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum122Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 252: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum123Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 253: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FillerEnum124Box alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 254: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil
                                 : [[AnEnumBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 255:
      return [__pigeon_CodecOverflow fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface CoreTestsPigeonCodecWriter : FlutterStandardWriter
@end
@implementation CoreTestsPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FillerEnum0Box class]]) {
    FillerEnum0Box *box = (FillerEnum0Box *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum1Box class]]) {
    FillerEnum1Box *box = (FillerEnum1Box *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum2Box class]]) {
    FillerEnum2Box *box = (FillerEnum2Box *)value;
    [self writeByte:131];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum3Box class]]) {
    FillerEnum3Box *box = (FillerEnum3Box *)value;
    [self writeByte:132];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum4Box class]]) {
    FillerEnum4Box *box = (FillerEnum4Box *)value;
    [self writeByte:133];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum5Box class]]) {
    FillerEnum5Box *box = (FillerEnum5Box *)value;
    [self writeByte:134];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum6Box class]]) {
    FillerEnum6Box *box = (FillerEnum6Box *)value;
    [self writeByte:135];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum7Box class]]) {
    FillerEnum7Box *box = (FillerEnum7Box *)value;
    [self writeByte:136];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum8Box class]]) {
    FillerEnum8Box *box = (FillerEnum8Box *)value;
    [self writeByte:137];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum9Box class]]) {
    FillerEnum9Box *box = (FillerEnum9Box *)value;
    [self writeByte:138];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum10Box class]]) {
    FillerEnum10Box *box = (FillerEnum10Box *)value;
    [self writeByte:139];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum11Box class]]) {
    FillerEnum11Box *box = (FillerEnum11Box *)value;
    [self writeByte:140];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum12Box class]]) {
    FillerEnum12Box *box = (FillerEnum12Box *)value;
    [self writeByte:141];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum13Box class]]) {
    FillerEnum13Box *box = (FillerEnum13Box *)value;
    [self writeByte:142];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum14Box class]]) {
    FillerEnum14Box *box = (FillerEnum14Box *)value;
    [self writeByte:143];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum15Box class]]) {
    FillerEnum15Box *box = (FillerEnum15Box *)value;
    [self writeByte:144];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum16Box class]]) {
    FillerEnum16Box *box = (FillerEnum16Box *)value;
    [self writeByte:145];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum17Box class]]) {
    FillerEnum17Box *box = (FillerEnum17Box *)value;
    [self writeByte:146];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum18Box class]]) {
    FillerEnum18Box *box = (FillerEnum18Box *)value;
    [self writeByte:147];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum19Box class]]) {
    FillerEnum19Box *box = (FillerEnum19Box *)value;
    [self writeByte:148];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum20Box class]]) {
    FillerEnum20Box *box = (FillerEnum20Box *)value;
    [self writeByte:149];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum21Box class]]) {
    FillerEnum21Box *box = (FillerEnum21Box *)value;
    [self writeByte:150];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum22Box class]]) {
    FillerEnum22Box *box = (FillerEnum22Box *)value;
    [self writeByte:151];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum23Box class]]) {
    FillerEnum23Box *box = (FillerEnum23Box *)value;
    [self writeByte:152];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum24Box class]]) {
    FillerEnum24Box *box = (FillerEnum24Box *)value;
    [self writeByte:153];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum25Box class]]) {
    FillerEnum25Box *box = (FillerEnum25Box *)value;
    [self writeByte:154];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum26Box class]]) {
    FillerEnum26Box *box = (FillerEnum26Box *)value;
    [self writeByte:155];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum27Box class]]) {
    FillerEnum27Box *box = (FillerEnum27Box *)value;
    [self writeByte:156];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum28Box class]]) {
    FillerEnum28Box *box = (FillerEnum28Box *)value;
    [self writeByte:157];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum29Box class]]) {
    FillerEnum29Box *box = (FillerEnum29Box *)value;
    [self writeByte:158];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum30Box class]]) {
    FillerEnum30Box *box = (FillerEnum30Box *)value;
    [self writeByte:159];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum31Box class]]) {
    FillerEnum31Box *box = (FillerEnum31Box *)value;
    [self writeByte:160];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum32Box class]]) {
    FillerEnum32Box *box = (FillerEnum32Box *)value;
    [self writeByte:161];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum33Box class]]) {
    FillerEnum33Box *box = (FillerEnum33Box *)value;
    [self writeByte:162];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum34Box class]]) {
    FillerEnum34Box *box = (FillerEnum34Box *)value;
    [self writeByte:163];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum35Box class]]) {
    FillerEnum35Box *box = (FillerEnum35Box *)value;
    [self writeByte:164];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum36Box class]]) {
    FillerEnum36Box *box = (FillerEnum36Box *)value;
    [self writeByte:165];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum37Box class]]) {
    FillerEnum37Box *box = (FillerEnum37Box *)value;
    [self writeByte:166];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum38Box class]]) {
    FillerEnum38Box *box = (FillerEnum38Box *)value;
    [self writeByte:167];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum39Box class]]) {
    FillerEnum39Box *box = (FillerEnum39Box *)value;
    [self writeByte:168];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum40Box class]]) {
    FillerEnum40Box *box = (FillerEnum40Box *)value;
    [self writeByte:169];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum41Box class]]) {
    FillerEnum41Box *box = (FillerEnum41Box *)value;
    [self writeByte:170];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum42Box class]]) {
    FillerEnum42Box *box = (FillerEnum42Box *)value;
    [self writeByte:171];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum43Box class]]) {
    FillerEnum43Box *box = (FillerEnum43Box *)value;
    [self writeByte:172];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum44Box class]]) {
    FillerEnum44Box *box = (FillerEnum44Box *)value;
    [self writeByte:173];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum45Box class]]) {
    FillerEnum45Box *box = (FillerEnum45Box *)value;
    [self writeByte:174];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum46Box class]]) {
    FillerEnum46Box *box = (FillerEnum46Box *)value;
    [self writeByte:175];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum47Box class]]) {
    FillerEnum47Box *box = (FillerEnum47Box *)value;
    [self writeByte:176];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum48Box class]]) {
    FillerEnum48Box *box = (FillerEnum48Box *)value;
    [self writeByte:177];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum49Box class]]) {
    FillerEnum49Box *box = (FillerEnum49Box *)value;
    [self writeByte:178];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum50Box class]]) {
    FillerEnum50Box *box = (FillerEnum50Box *)value;
    [self writeByte:179];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum51Box class]]) {
    FillerEnum51Box *box = (FillerEnum51Box *)value;
    [self writeByte:180];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum52Box class]]) {
    FillerEnum52Box *box = (FillerEnum52Box *)value;
    [self writeByte:181];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum53Box class]]) {
    FillerEnum53Box *box = (FillerEnum53Box *)value;
    [self writeByte:182];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum54Box class]]) {
    FillerEnum54Box *box = (FillerEnum54Box *)value;
    [self writeByte:183];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum55Box class]]) {
    FillerEnum55Box *box = (FillerEnum55Box *)value;
    [self writeByte:184];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum56Box class]]) {
    FillerEnum56Box *box = (FillerEnum56Box *)value;
    [self writeByte:185];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum57Box class]]) {
    FillerEnum57Box *box = (FillerEnum57Box *)value;
    [self writeByte:186];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum58Box class]]) {
    FillerEnum58Box *box = (FillerEnum58Box *)value;
    [self writeByte:187];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum59Box class]]) {
    FillerEnum59Box *box = (FillerEnum59Box *)value;
    [self writeByte:188];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum60Box class]]) {
    FillerEnum60Box *box = (FillerEnum60Box *)value;
    [self writeByte:189];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum61Box class]]) {
    FillerEnum61Box *box = (FillerEnum61Box *)value;
    [self writeByte:190];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum62Box class]]) {
    FillerEnum62Box *box = (FillerEnum62Box *)value;
    [self writeByte:191];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum63Box class]]) {
    FillerEnum63Box *box = (FillerEnum63Box *)value;
    [self writeByte:192];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum64Box class]]) {
    FillerEnum64Box *box = (FillerEnum64Box *)value;
    [self writeByte:193];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum65Box class]]) {
    FillerEnum65Box *box = (FillerEnum65Box *)value;
    [self writeByte:194];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum66Box class]]) {
    FillerEnum66Box *box = (FillerEnum66Box *)value;
    [self writeByte:195];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum67Box class]]) {
    FillerEnum67Box *box = (FillerEnum67Box *)value;
    [self writeByte:196];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum68Box class]]) {
    FillerEnum68Box *box = (FillerEnum68Box *)value;
    [self writeByte:197];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum69Box class]]) {
    FillerEnum69Box *box = (FillerEnum69Box *)value;
    [self writeByte:198];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum70Box class]]) {
    FillerEnum70Box *box = (FillerEnum70Box *)value;
    [self writeByte:199];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum71Box class]]) {
    FillerEnum71Box *box = (FillerEnum71Box *)value;
    [self writeByte:200];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum72Box class]]) {
    FillerEnum72Box *box = (FillerEnum72Box *)value;
    [self writeByte:201];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum73Box class]]) {
    FillerEnum73Box *box = (FillerEnum73Box *)value;
    [self writeByte:202];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum74Box class]]) {
    FillerEnum74Box *box = (FillerEnum74Box *)value;
    [self writeByte:203];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum75Box class]]) {
    FillerEnum75Box *box = (FillerEnum75Box *)value;
    [self writeByte:204];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum76Box class]]) {
    FillerEnum76Box *box = (FillerEnum76Box *)value;
    [self writeByte:205];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum77Box class]]) {
    FillerEnum77Box *box = (FillerEnum77Box *)value;
    [self writeByte:206];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum78Box class]]) {
    FillerEnum78Box *box = (FillerEnum78Box *)value;
    [self writeByte:207];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum79Box class]]) {
    FillerEnum79Box *box = (FillerEnum79Box *)value;
    [self writeByte:208];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum80Box class]]) {
    FillerEnum80Box *box = (FillerEnum80Box *)value;
    [self writeByte:209];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum81Box class]]) {
    FillerEnum81Box *box = (FillerEnum81Box *)value;
    [self writeByte:210];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum82Box class]]) {
    FillerEnum82Box *box = (FillerEnum82Box *)value;
    [self writeByte:211];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum83Box class]]) {
    FillerEnum83Box *box = (FillerEnum83Box *)value;
    [self writeByte:212];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum84Box class]]) {
    FillerEnum84Box *box = (FillerEnum84Box *)value;
    [self writeByte:213];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum85Box class]]) {
    FillerEnum85Box *box = (FillerEnum85Box *)value;
    [self writeByte:214];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum86Box class]]) {
    FillerEnum86Box *box = (FillerEnum86Box *)value;
    [self writeByte:215];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum87Box class]]) {
    FillerEnum87Box *box = (FillerEnum87Box *)value;
    [self writeByte:216];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum88Box class]]) {
    FillerEnum88Box *box = (FillerEnum88Box *)value;
    [self writeByte:217];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum89Box class]]) {
    FillerEnum89Box *box = (FillerEnum89Box *)value;
    [self writeByte:218];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum90Box class]]) {
    FillerEnum90Box *box = (FillerEnum90Box *)value;
    [self writeByte:219];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum91Box class]]) {
    FillerEnum91Box *box = (FillerEnum91Box *)value;
    [self writeByte:220];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum92Box class]]) {
    FillerEnum92Box *box = (FillerEnum92Box *)value;
    [self writeByte:221];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum93Box class]]) {
    FillerEnum93Box *box = (FillerEnum93Box *)value;
    [self writeByte:222];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum94Box class]]) {
    FillerEnum94Box *box = (FillerEnum94Box *)value;
    [self writeByte:223];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum95Box class]]) {
    FillerEnum95Box *box = (FillerEnum95Box *)value;
    [self writeByte:224];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum96Box class]]) {
    FillerEnum96Box *box = (FillerEnum96Box *)value;
    [self writeByte:225];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum97Box class]]) {
    FillerEnum97Box *box = (FillerEnum97Box *)value;
    [self writeByte:226];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum98Box class]]) {
    FillerEnum98Box *box = (FillerEnum98Box *)value;
    [self writeByte:227];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum99Box class]]) {
    FillerEnum99Box *box = (FillerEnum99Box *)value;
    [self writeByte:228];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum100Box class]]) {
    FillerEnum100Box *box = (FillerEnum100Box *)value;
    [self writeByte:229];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum101Box class]]) {
    FillerEnum101Box *box = (FillerEnum101Box *)value;
    [self writeByte:230];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum102Box class]]) {
    FillerEnum102Box *box = (FillerEnum102Box *)value;
    [self writeByte:231];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum103Box class]]) {
    FillerEnum103Box *box = (FillerEnum103Box *)value;
    [self writeByte:232];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum104Box class]]) {
    FillerEnum104Box *box = (FillerEnum104Box *)value;
    [self writeByte:233];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum105Box class]]) {
    FillerEnum105Box *box = (FillerEnum105Box *)value;
    [self writeByte:234];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum106Box class]]) {
    FillerEnum106Box *box = (FillerEnum106Box *)value;
    [self writeByte:235];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum107Box class]]) {
    FillerEnum107Box *box = (FillerEnum107Box *)value;
    [self writeByte:236];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum108Box class]]) {
    FillerEnum108Box *box = (FillerEnum108Box *)value;
    [self writeByte:237];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum109Box class]]) {
    FillerEnum109Box *box = (FillerEnum109Box *)value;
    [self writeByte:238];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum110Box class]]) {
    FillerEnum110Box *box = (FillerEnum110Box *)value;
    [self writeByte:239];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum111Box class]]) {
    FillerEnum111Box *box = (FillerEnum111Box *)value;
    [self writeByte:240];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum112Box class]]) {
    FillerEnum112Box *box = (FillerEnum112Box *)value;
    [self writeByte:241];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum113Box class]]) {
    FillerEnum113Box *box = (FillerEnum113Box *)value;
    [self writeByte:242];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum114Box class]]) {
    FillerEnum114Box *box = (FillerEnum114Box *)value;
    [self writeByte:243];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum115Box class]]) {
    FillerEnum115Box *box = (FillerEnum115Box *)value;
    [self writeByte:244];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum116Box class]]) {
    FillerEnum116Box *box = (FillerEnum116Box *)value;
    [self writeByte:245];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum117Box class]]) {
    FillerEnum117Box *box = (FillerEnum117Box *)value;
    [self writeByte:246];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum118Box class]]) {
    FillerEnum118Box *box = (FillerEnum118Box *)value;
    [self writeByte:247];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum119Box class]]) {
    FillerEnum119Box *box = (FillerEnum119Box *)value;
    [self writeByte:248];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum120Box class]]) {
    FillerEnum120Box *box = (FillerEnum120Box *)value;
    [self writeByte:249];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum121Box class]]) {
    FillerEnum121Box *box = (FillerEnum121Box *)value;
    [self writeByte:250];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum122Box class]]) {
    FillerEnum122Box *box = (FillerEnum122Box *)value;
    [self writeByte:251];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum123Box class]]) {
    FillerEnum123Box *box = (FillerEnum123Box *)value;
    [self writeByte:252];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FillerEnum124Box class]]) {
    FillerEnum124Box *box = (FillerEnum124Box *)value;
    [self writeByte:253];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[AnEnumBox class]]) {
    AnEnumBox *box = (AnEnumBox *)value;
    [self writeByte:254];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[AnotherEnumBox class]]) {
    AnotherEnumBox *box = (AnotherEnumBox *)value;
    __pigeon_CodecOverflow *wrap = [__pigeon_CodecOverflow
        makeWithType:0
             wrapped:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
    [self writeByte:255];
    [self writeValue:[wrap toList]];
  } else if ([value isKindOfClass:[AllTypes class]]) {
    __pigeon_CodecOverflow *wrap = [__pigeon_CodecOverflow makeWithType:1 wrapped:[value toList]];
    [self writeByte:255];
    [self writeValue:[wrap toList]];
  } else if ([value isKindOfClass:[AllNullableTypes class]]) {
    __pigeon_CodecOverflow *wrap = [__pigeon_CodecOverflow makeWithType:2 wrapped:[value toList]];
    [self writeByte:255];
    [self writeValue:[wrap toList]];
  } else if ([value isKindOfClass:[AllNullableTypesWithoutRecursion class]]) {
    __pigeon_CodecOverflow *wrap = [__pigeon_CodecOverflow makeWithType:3 wrapped:[value toList]];
    [self writeByte:255];
    [self writeValue:[wrap toList]];
  } else if ([value isKindOfClass:[AllClassesWrapper class]]) {
    __pigeon_CodecOverflow *wrap = [__pigeon_CodecOverflow makeWithType:4 wrapped:[value toList]];
    [self writeByte:255];
    [self writeValue:[wrap toList]];
  } else if ([value isKindOfClass:[TestMessage class]]) {
    __pigeon_CodecOverflow *wrap = [__pigeon_CodecOverflow makeWithType:5 wrapped:[value toList]];
    [self writeByte:255];
    [self writeValue:[wrap toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface CoreTestsPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation CoreTestsPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[CoreTestsPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[CoreTestsPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *GetCoreTestsCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    CoreTestsPigeonCodecReaderWriter *readerWriter =
        [[CoreTestsPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpHostIntegrationCoreApi(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<HostIntegrationCoreApi> *api) {
  SetUpHostIntegrationCoreApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpHostIntegrationCoreApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                           NSObject<HostIntegrationCoreApi> *api,
                                           NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.noop",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(noopWithError:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(noopWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api noopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAllTypes",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoAllTypes:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoAllTypes:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllTypes *arg_everything = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AllTypes *output = [api echoAllTypes:arg_everything error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns an error, to test error handling.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.throwError",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(throwErrorWithError:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(throwErrorWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        id output = [api throwErrorWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns an error from a void function, to test error handling.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.throwErrorFromVoid",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(throwErrorFromVoidWithError:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(throwErrorFromVoidWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api throwErrorFromVoidWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns a Flutter error, to test error handling.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.throwFlutterError",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(throwFlutterErrorWithError:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(throwFlutterErrorWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        id output = [api throwFlutterErrorWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in int.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoInt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoInt:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoInt:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_anInt = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        NSNumber *output = [api echoInt:arg_anInt error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in double.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoDouble",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoDouble:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoDouble:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_aDouble = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        NSNumber *output = [api echoDouble:arg_aDouble error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in boolean.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoBool",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoBool:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoBool:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_aBool = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        NSNumber *output = [api echoBool:arg_aBool error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in string.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoString",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api echoString:arg_aString error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in Uint8List.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoUint8List",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoUint8List:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoUint8List:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FlutterStandardTypedData *arg_aUint8List = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FlutterStandardTypedData *output = [api echoUint8List:arg_aUint8List error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in generic Object.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoObject",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoObject:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoObject:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        id arg_anObject = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        id output = [api echoObject:arg_anObject error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed list, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoList",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoList:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoList:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<id> *arg_list = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<id> *output = [api echoList:arg_list error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed map, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoMap",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoMap:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoMap:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_aMap = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSDictionary<NSString *, id> *output = [api echoMap:arg_aMap error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed map to test nested class serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoClassWrapper",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoClassWrapper:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoClassWrapper:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllClassesWrapper *arg_wrapper = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AllClassesWrapper *output = [api echoClassWrapper:arg_wrapper error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed enum to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoEnum:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoEnum:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnEnumBox *anAnEnumBox = GetNullableObjectAtIndex(args, 0);
        AnEnum arg_anEnum = anAnEnumBox.value;
        FlutterError *error;
        AnEnumBox *output = [api echoEnum:arg_anEnum error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed enum to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAnotherEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoAnotherEnum:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoAnotherEnum:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnotherEnumBox *anAnotherEnumBox = GetNullableObjectAtIndex(args, 0);
        AnotherEnum arg_anotherEnum = anAnotherEnumBox.value;
        FlutterError *error;
        AnotherEnumBox *output = [api echoAnotherEnum:arg_anotherEnum error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the default string.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNamedDefaultString",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoNamedDefaultString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoNamedDefaultString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api echoNamedDefaultString:arg_aString error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in double.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoOptionalDefaultDouble",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoOptionalDefaultDouble:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoOptionalDefaultDouble:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_aDouble = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        NSNumber *output = [api echoOptionalDefaultDouble:arg_aDouble error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in int.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoRequiredInt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoRequiredInt:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoRequiredInt:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_anInt = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        NSNumber *output = [api echoRequiredInt:arg_anInt error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAllNullableTypes",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAllNullableTypes:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAllNullableTypes:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllNullableTypes *arg_everything = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AllNullableTypes *output = [api echoAllNullableTypes:arg_everything error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString
                   stringWithFormat:@"%@%@",
                                    @"dev.flutter.pigeon.pigeon_integration_tests."
                                    @"HostIntegrationCoreApi.echoAllNullableTypesWithoutRecursion",
                                    messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAllNullableTypesWithoutRecursion:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAllNullableTypesWithoutRecursion:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllNullableTypesWithoutRecursion *arg_everything = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AllNullableTypesWithoutRecursion *output =
            [api echoAllNullableTypesWithoutRecursion:arg_everything error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the inner `aString` value from the wrapped object, to test
  /// sending of nested objects.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.extractNestedNullableString",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(extractNestedNullableStringFrom:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(extractNestedNullableStringFrom:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllClassesWrapper *arg_wrapper = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api extractNestedNullableStringFrom:arg_wrapper error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the inner `aString` value from the wrapped object, to test
  /// sending of nested objects.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.createNestedNullableString",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createNestedObjectWithNullableString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(createNestedObjectWithNullableString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_nullableString = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AllClassesWrapper *output = [api createNestedObjectWithNullableString:arg_nullableString
                                                                        error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in arguments of multiple types.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.sendMultipleNullableTypes",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMultipleNullableTypesABool:
                                                                           anInt:aString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(sendMultipleNullableTypesABool:anInt:aString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableBool = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_aNullableInt = GetNullableObjectAtIndex(args, 1);
        NSString *arg_aNullableString = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        AllNullableTypes *output = [api sendMultipleNullableTypesABool:arg_aNullableBool
                                                                 anInt:arg_aNullableInt
                                                               aString:arg_aNullableString
                                                                 error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in arguments of multiple types.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.pigeon_integration_tests."
                                @"HostIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (sendMultipleNullableTypesWithoutRecursionABool:anInt:aString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(sendMultipleNullableTypesWithoutRecursionABool:anInt:aString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableBool = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_aNullableInt = GetNullableObjectAtIndex(args, 1);
        NSString *arg_aNullableString = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        AllNullableTypesWithoutRecursion *output =
            [api sendMultipleNullableTypesWithoutRecursionABool:arg_aNullableBool
                                                          anInt:arg_aNullableInt
                                                        aString:arg_aNullableString
                                                          error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in int.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableInt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoNullableInt:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoNullableInt:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableInt = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api echoNullableInt:arg_aNullableInt error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in double.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableDouble",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoNullableDouble:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoNullableDouble:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableDouble = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api echoNullableDouble:arg_aNullableDouble error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in boolean.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableBool",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoNullableBool:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoNullableBool:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableBool = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api echoNullableBool:arg_aNullableBool error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in string.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableString",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoNullableString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoNullableString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aNullableString = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api echoNullableString:arg_aNullableString error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in Uint8List.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableUint8List",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoNullableUint8List:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoNullableUint8List:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FlutterStandardTypedData *arg_aNullableUint8List = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FlutterStandardTypedData *output = [api echoNullableUint8List:arg_aNullableUint8List
                                                                error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in generic Object.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableObject",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoNullableObject:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoNullableObject:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        id arg_aNullableObject = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        id output = [api echoNullableObject:arg_aNullableObject error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed list, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableList",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoNullableList:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoNullableList:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<id> *arg_aNullableList = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<id> *output = [api echoNullableList:arg_aNullableList error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed map, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableMap",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoNullableMap:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoNullableMap:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_aNullableMap = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSDictionary<NSString *, id> *output = [api echoNullableMap:arg_aNullableMap error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoNullableEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoNullableEnum:error:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoNullableEnum:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnEnumBox *arg_anEnum = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AnEnumBox *output = [api echoNullableEnum:arg_anEnum error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoAnotherNullableEnum",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAnotherNullableEnum:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAnotherNullableEnum:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnotherEnumBox *arg_anotherEnum = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AnotherEnumBox *output = [api echoAnotherNullableEnum:arg_anotherEnum error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in int.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoOptionalNullableInt",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoOptionalNullableInt:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoOptionalNullableInt:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableInt = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api echoOptionalNullableInt:arg_aNullableInt error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in string.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoNamedNullableString",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoNamedNullableString:error:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoNamedNullableString:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aNullableString = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api echoNamedNullableString:arg_aNullableString error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.noopAsync",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(noopAsyncWithCompletion:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(noopAsyncWithCompletion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api noopAsyncWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in int asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncInt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoAsyncInt:completion:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoAsyncInt:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_anInt = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api echoAsyncInt:arg_anInt
               completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                 callback(wrapResult(output, error));
               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in double asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncDouble",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncDouble:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncDouble:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_aDouble = [GetNullableObjectAtIndex(args, 0) doubleValue];
        [api echoAsyncDouble:arg_aDouble
                  completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                    callback(wrapResult(output, error));
                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in boolean asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncBool",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncBool:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncBool:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_aBool = [GetNullableObjectAtIndex(args, 0) boolValue];
        [api echoAsyncBool:arg_aBool
                completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed string asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncString",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncString:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncString:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncString:arg_aString
                  completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                    callback(wrapResult(output, error));
                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in Uint8List asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncUint8List",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncUint8List:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncUint8List:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FlutterStandardTypedData *arg_aUint8List = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncUint8List:arg_aUint8List
                     completion:^(FlutterStandardTypedData *_Nullable output,
                                  FlutterError *_Nullable error) {
                       callback(wrapResult(output, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in generic Object asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncObject",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncObject:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncObject:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        id arg_anObject = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncObject:arg_anObject
                  completion:^(id _Nullable output, FlutterError *_Nullable error) {
                    callback(wrapResult(output, error));
                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed list, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncList",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncList:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncList:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<id> *arg_list = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncList:arg_list
                completion:^(NSArray<id> *_Nullable output, FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed map, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncMap",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(echoAsyncMap:completion:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to @selector(echoAsyncMap:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_aMap = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncMap:arg_aMap
               completion:^(NSDictionary<NSString *, id> *_Nullable output,
                            FlutterError *_Nullable error) {
                 callback(wrapResult(output, error));
               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnEnumBox *anAnEnumBox = GetNullableObjectAtIndex(args, 0);
        AnEnum arg_anEnum = anAnEnumBox.value;
        [api echoAsyncEnum:arg_anEnum
                completion:^(AnEnumBox *_Nullable output, FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAnotherAsyncEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAnotherAsyncEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAnotherAsyncEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnotherEnumBox *anAnotherEnumBox = GetNullableObjectAtIndex(args, 0);
        AnotherEnum arg_anotherEnum = anAnotherEnumBox.value;
        [api echoAnotherAsyncEnum:arg_anotherEnum
                       completion:^(AnotherEnumBox *_Nullable output,
                                    FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Responds with an error from an async function returning a value.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.throwAsyncError",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(throwAsyncErrorWithCompletion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(throwAsyncErrorWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api throwAsyncErrorWithCompletion:^(id _Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Responds with an error from an async void function.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.throwAsyncErrorFromVoid",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(throwAsyncErrorFromVoidWithCompletion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(throwAsyncErrorFromVoidWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api throwAsyncErrorFromVoidWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Responds with a Flutter error from an async function returning a value.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.throwAsyncFlutterError",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(throwAsyncFlutterErrorWithCompletion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(throwAsyncFlutterErrorWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api throwAsyncFlutterErrorWithCompletion:^(id _Nullable output,
                                                    FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed object, to test async serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncAllTypes",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncAllTypes:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncAllTypes:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllTypes *arg_everything = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncAllTypes:arg_everything
                    completion:^(AllTypes *_Nullable output, FlutterError *_Nullable error) {
                      callback(wrapResult(output, error));
                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:
                                      @"%@%@",
                                      @"dev.flutter.pigeon.pigeon_integration_tests."
                                      @"HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes",
                                      messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableAllNullableTypes:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableAllNullableTypes:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllNullableTypes *arg_everything = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableAllNullableTypes:arg_everything
                                    completion:^(AllNullableTypes *_Nullable output,
                                                 FlutterError *_Nullable error) {
                                      callback(wrapResult(output, error));
                                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi."
                                             @"echoAsyncNullableAllNullableTypesWithoutRecursion",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (echoAsyncNullableAllNullableTypesWithoutRecursion:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableAllNullableTypesWithoutRecursion:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllNullableTypesWithoutRecursion *arg_everything = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableAllNullableTypesWithoutRecursion:arg_everything
                                                    completion:^(AllNullableTypesWithoutRecursion
                                                                     *_Nullable output,
                                                                 FlutterError *_Nullable error) {
                                                      callback(wrapResult(output, error));
                                                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in int asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncNullableInt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableInt:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableInt:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_anInt = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableInt:arg_anInt
                       completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns passed in double asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoAsyncNullableDouble",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableDouble:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableDouble:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aDouble = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableDouble:arg_aDouble
                          completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in boolean asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncNullableBool",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableBool:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableBool:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aBool = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableBool:arg_aBool
                        completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed string asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoAsyncNullableString",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableString:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableString:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableString:arg_aString
                          completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in Uint8List asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoAsyncNullableUint8List",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableUint8List:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableUint8List:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FlutterStandardTypedData *arg_aUint8List = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableUint8List:arg_aUint8List
                             completion:^(FlutterStandardTypedData *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed in generic Object asynchronously.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoAsyncNullableObject",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableObject:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableObject:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        id arg_anObject = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableObject:arg_anObject
                          completion:^(id _Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed list, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncNullableList",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableList:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableList:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<id> *arg_list = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableList:arg_list
                        completion:^(NSArray<id> *_Nullable output, FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed map, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncNullableMap",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableMap:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableMap:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_aMap = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableMap:arg_aMap
                       completion:^(NSDictionary<NSString *, id> *_Nullable output,
                                    FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.echoAsyncNullableEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAsyncNullableEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAsyncNullableEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnEnumBox *arg_anEnum = GetNullableObjectAtIndex(args, 0);
        [api echoAsyncNullableEnum:arg_anEnum
                        completion:^(AnEnumBox *_Nullable output, FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.echoAnotherAsyncNullableEnum",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoAnotherAsyncNullableEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(echoAnotherAsyncNullableEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnotherEnumBox *arg_anotherEnum = GetNullableObjectAtIndex(args, 0);
        [api echoAnotherAsyncNullableEnum:arg_anotherEnum
                               completion:^(AnotherEnumBox *_Nullable output,
                                            FlutterError *_Nullable error) {
                                 callback(wrapResult(output, error));
                               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterNoop",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterNoopWithCompletion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterNoopWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api callFlutterNoopWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterThrowError",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterThrowErrorWithCompletion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterThrowErrorWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api callFlutterThrowErrorWithCompletion:^(id _Nullable output,
                                                   FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.pigeon_integration_tests."
                                          @"HostIntegrationCoreApi.callFlutterThrowErrorFromVoid",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterThrowErrorFromVoidWithCompletion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterThrowErrorFromVoidWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api callFlutterThrowErrorFromVoidWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoAllTypes",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoAllTypes:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoAllTypes:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllTypes *arg_everything = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoAllTypes:arg_everything
                          completion:^(AllTypes *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.pigeon_integration_tests."
                                          @"HostIntegrationCoreApi.callFlutterEchoAllNullableTypes",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoAllNullableTypes:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoAllNullableTypes:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllNullableTypes *arg_everything = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoAllNullableTypes:arg_everything
                                  completion:^(AllNullableTypes *_Nullable output,
                                               FlutterError *_Nullable error) {
                                    callback(wrapResult(output, error));
                                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString
                   stringWithFormat:@"%@%@",
                                    @"dev.flutter.pigeon.pigeon_integration_tests."
                                    @"HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes",
                                    messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (callFlutterSendMultipleNullableTypesABool:anInt:aString:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterSendMultipleNullableTypesABool:anInt:aString:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableBool = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_aNullableInt = GetNullableObjectAtIndex(args, 1);
        NSString *arg_aNullableString = GetNullableObjectAtIndex(args, 2);
        [api callFlutterSendMultipleNullableTypesABool:arg_aNullableBool
                                                 anInt:arg_aNullableInt
                                               aString:arg_aNullableString
                                            completion:^(AllNullableTypes *_Nullable output,
                                                         FlutterError *_Nullable error) {
                                              callback(wrapResult(output, error));
                                            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi."
                                             @"callFlutterEchoAllNullableTypesWithoutRecursion",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (callFlutterEchoAllNullableTypesWithoutRecursion:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoAllNullableTypesWithoutRecursion:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AllNullableTypesWithoutRecursion *arg_everything = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoAllNullableTypesWithoutRecursion:arg_everything
                                                  completion:^(AllNullableTypesWithoutRecursion
                                                                   *_Nullable output,
                                                               FlutterError *_Nullable error) {
                                                    callback(wrapResult(output, error));
                                                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:
                             @"%@%@",
                             @"dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
                             @"callFlutterSendMultipleNullableTypesWithoutRecursion",
                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector
               (callFlutterSendMultipleNullableTypesWithoutRecursionABool:
                                                                    anInt:aString:completion:)],
          @"HostIntegrationCoreApi api (%@) doesn't respond to "
          @"@selector(callFlutterSendMultipleNullableTypesWithoutRecursionABool:anInt:aString:"
          @"completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aNullableBool = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_aNullableInt = GetNullableObjectAtIndex(args, 1);
        NSString *arg_aNullableString = GetNullableObjectAtIndex(args, 2);
        [api callFlutterSendMultipleNullableTypesWithoutRecursionABool:arg_aNullableBool
                                                                 anInt:arg_aNullableInt
                                                               aString:arg_aNullableString
                                                            completion:^(
                                                                AllNullableTypesWithoutRecursion
                                                                    *_Nullable output,
                                                                FlutterError *_Nullable error) {
                                                              callback(wrapResult(output, error));
                                                            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoBool",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoBool:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoBool:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_aBool = [GetNullableObjectAtIndex(args, 0) boolValue];
        [api callFlutterEchoBool:arg_aBool
                      completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                        callback(wrapResult(output, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoInt",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoInt:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoInt:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_anInt = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api callFlutterEchoInt:arg_anInt
                     completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                       callback(wrapResult(output, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoDouble",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoDouble:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoDouble:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_aDouble = [GetNullableObjectAtIndex(args, 0) doubleValue];
        [api callFlutterEchoDouble:arg_aDouble
                        completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoString",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoString:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoString:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoString:arg_aString
                        completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoUint8List",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoUint8List:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoUint8List:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FlutterStandardTypedData *arg_list = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoUint8List:arg_list
                           completion:^(FlutterStandardTypedData *_Nullable output,
                                        FlutterError *_Nullable error) {
                             callback(wrapResult(output, error));
                           }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoList",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoList:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoList:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<id> *arg_list = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoList:arg_list
                      completion:^(NSArray<id> *_Nullable output, FlutterError *_Nullable error) {
                        callback(wrapResult(output, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoMap",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoMap:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoMap:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_aMap = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoMap:arg_aMap
                     completion:^(NSDictionary<NSString *, id> *_Nullable output,
                                  FlutterError *_Nullable error) {
                       callback(wrapResult(output, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostIntegrationCoreApi.callFlutterEchoEnum",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnEnumBox *anAnEnumBox = GetNullableObjectAtIndex(args, 0);
        AnEnum arg_anEnum = anAnEnumBox.value;
        [api callFlutterEchoEnum:arg_anEnum
                      completion:^(AnEnumBox *_Nullable output, FlutterError *_Nullable error) {
                        callback(wrapResult(output, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoAnotherEnum",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoAnotherEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoAnotherEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnotherEnumBox *anAnotherEnumBox = GetNullableObjectAtIndex(args, 0);
        AnotherEnum arg_anotherEnum = anAnotherEnumBox.value;
        [api callFlutterEchoAnotherEnum:arg_anotherEnum
                             completion:^(AnotherEnumBox *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoNullableBool",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableBool:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableBool:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aBool = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableBool:arg_aBool
                              completion:^(NSNumber *_Nullable output,
                                           FlutterError *_Nullable error) {
                                callback(wrapResult(output, error));
                              }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoNullableInt",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableInt:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableInt:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_anInt = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableInt:arg_anInt
                             completion:^(NSNumber *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.pigeon_integration_tests."
                                          @"HostIntegrationCoreApi.callFlutterEchoNullableDouble",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableDouble:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableDouble:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_aDouble = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableDouble:arg_aDouble
                                completion:^(NSNumber *_Nullable output,
                                             FlutterError *_Nullable error) {
                                  callback(wrapResult(output, error));
                                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.pigeon_integration_tests."
                                          @"HostIntegrationCoreApi.callFlutterEchoNullableString",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableString:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableString:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableString:arg_aString
                                completion:^(NSString *_Nullable output,
                                             FlutterError *_Nullable error) {
                                  callback(wrapResult(output, error));
                                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:
                                      @"%@%@",
                                      @"dev.flutter.pigeon.pigeon_integration_tests."
                                      @"HostIntegrationCoreApi.callFlutterEchoNullableUint8List",
                                      messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableUint8List:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableUint8List:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FlutterStandardTypedData *arg_list = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableUint8List:arg_list
                                   completion:^(FlutterStandardTypedData *_Nullable output,
                                                FlutterError *_Nullable error) {
                                     callback(wrapResult(output, error));
                                   }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoNullableList",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableList:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableList:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<id> *arg_list = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableList:arg_list
                              completion:^(NSArray<id> *_Nullable output,
                                           FlutterError *_Nullable error) {
                                callback(wrapResult(output, error));
                              }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoNullableMap",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableMap:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableMap:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<NSString *, id> *arg_aMap = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableMap:arg_aMap
                             completion:^(NSDictionary<NSString *, id> *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.pigeon_integration_tests."
                                             @"HostIntegrationCoreApi.callFlutterEchoNullableEnum",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoNullableEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoNullableEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnEnumBox *arg_anEnum = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoNullableEnum:arg_anEnum
                              completion:^(AnEnumBox *_Nullable output,
                                           FlutterError *_Nullable error) {
                                callback(wrapResult(output, error));
                              }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:
                                      @"%@%@",
                                      @"dev.flutter.pigeon.pigeon_integration_tests."
                                      @"HostIntegrationCoreApi.callFlutterEchoAnotherNullableEnum",
                                      messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterEchoAnotherNullableEnum:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterEchoAnotherNullableEnum:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AnotherEnumBox *arg_anotherEnum = GetNullableObjectAtIndex(args, 0);
        [api callFlutterEchoAnotherNullableEnum:arg_anotherEnum
                                     completion:^(AnotherEnumBox *_Nullable output,
                                                  FlutterError *_Nullable error) {
                                       callback(wrapResult(output, error));
                                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.pigeon_integration_tests."
                                          @"HostIntegrationCoreApi.callFlutterSmallApiEchoString",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(callFlutterSmallApiEchoString:completion:)],
                @"HostIntegrationCoreApi api (%@) doesn't respond to "
                @"@selector(callFlutterSmallApiEchoString:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        [api callFlutterSmallApiEchoString:arg_aString
                                completion:^(NSString *_Nullable output,
                                             FlutterError *_Nullable error) {
                                  callback(wrapResult(output, error));
                                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FlutterIntegrationCoreApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation FlutterIntegrationCoreApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger
                   messageChannelSuffix:(nullable NSString *)messageChannelSuffix {
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0
                                ? @""
                                : [NSString stringWithFormat:@".%@", messageChannelSuffix];
  }
  return self;
}
- (void)noopWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@", @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.noop",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:nil
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion([FlutterError errorWithCode:reply[0]
                                                      message:reply[1]
                                                      details:reply[2]]);
                     } else {
                       completion(nil);
                     }
                   } else {
                     completion(createConnectionError(channelName));
                   }
                 }];
}
- (void)throwErrorWithCompletion:(void (^)(id _Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.throwError",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:nil
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       id output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)throwErrorFromVoidWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.throwErrorFromVoid",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:nil
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion([FlutterError errorWithCode:reply[0]
                                                      message:reply[1]
                                                      details:reply[2]]);
                     } else {
                       completion(nil);
                     }
                   } else {
                     completion(createConnectionError(channelName));
                   }
                 }];
}
- (void)echoAllTypes:(AllTypes *)arg_everything
          completion:(void (^)(AllTypes *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllTypes",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_everything ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AllTypes *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoAllNullableTypes:(nullable AllNullableTypes *)arg_everything
                  completion:
                      (void (^)(AllNullableTypes *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.echoAllNullableTypes",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_everything ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AllNullableTypes *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)sendMultipleNullableTypesABool:(nullable NSNumber *)arg_aNullableBool
                                 anInt:(nullable NSNumber *)arg_aNullableInt
                               aString:(nullable NSString *)arg_aNullableString
                            completion:(void (^)(AllNullableTypes *_Nullable,
                                                 FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.sendMultipleNullableTypes",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[
    arg_aNullableBool ?: [NSNull null], arg_aNullableInt ?: [NSNull null],
    arg_aNullableString ?: [NSNull null]
  ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AllNullableTypes *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoAllNullableTypesWithoutRecursion:
            (nullable AllNullableTypesWithoutRecursion *)arg_everything
                                  completion:(void (^)(AllNullableTypesWithoutRecursion *_Nullable,
                                                       FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.echoAllNullableTypesWithoutRecursion",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_everything ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AllNullableTypesWithoutRecursion *output =
                           reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)
    sendMultipleNullableTypesWithoutRecursionABool:(nullable NSNumber *)arg_aNullableBool
                                             anInt:(nullable NSNumber *)arg_aNullableInt
                                           aString:(nullable NSString *)arg_aNullableString
                                        completion:
                                            (void (^)(AllNullableTypesWithoutRecursion *_Nullable,
                                                      FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:@"%@%@",
                       @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi."
                       @"sendMultipleNullableTypesWithoutRecursion",
                       _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[
    arg_aNullableBool ?: [NSNull null], arg_aNullableInt ?: [NSNull null],
    arg_aNullableString ?: [NSNull null]
  ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AllNullableTypesWithoutRecursion *output =
                           reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoBool:(BOOL)arg_aBool
      completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoBool",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ @(arg_aBool) ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoInt:(NSInteger)arg_anInt
     completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@", @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoInt",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ @(arg_anInt) ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoDouble:(double)arg_aDouble
        completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoDouble",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ @(arg_aDouble) ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoString:(NSString *)arg_aString
        completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoString",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aString ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSString *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoUint8List:(FlutterStandardTypedData *)arg_list
           completion:
               (void (^)(FlutterStandardTypedData *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoUint8List",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_list ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       FlutterStandardTypedData *output =
                           reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoList:(NSArray<id> *)arg_list
      completion:(void (^)(NSArray<id> *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoList",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_list ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSArray<id> *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoMap:(NSDictionary<NSString *, id> *)arg_aMap
     completion:
         (void (^)(NSDictionary<NSString *, id> *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@", @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoMap",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aMap ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSDictionary<NSString *, id> *output =
                           reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoEnum:(AnEnum)arg_anEnum
      completion:(void (^)(AnEnumBox *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoEnum",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ [[AnEnumBox alloc] initWithValue:arg_anEnum] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AnEnumBox *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoAnotherEnum:(AnotherEnum)arg_anotherEnum
             completion:(void (^)(AnotherEnumBox *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAnotherEnum",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ [[AnotherEnumBox alloc] initWithValue:arg_anotherEnum] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AnotherEnumBox *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableBool:(nullable NSNumber *)arg_aBool
              completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableBool",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aBool ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableInt:(nullable NSNumber *)arg_anInt
             completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableInt",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_anInt ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableDouble:(nullable NSNumber *)arg_aDouble
                completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.echoNullableDouble",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aDouble ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableString:(nullable NSString *)arg_aString
                completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.echoNullableString",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aString ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSString *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableUint8List:(nullable FlutterStandardTypedData *)arg_list
                   completion:(void (^)(FlutterStandardTypedData *_Nullable,
                                        FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.echoNullableUint8List",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_list ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       FlutterStandardTypedData *output =
                           reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableList:(nullable NSArray<id> *)arg_list
              completion:(void (^)(NSArray<id> *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableList",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_list ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSArray<id> *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableMap:(nullable NSDictionary<NSString *, id> *)arg_aMap
             completion:(void (^)(NSDictionary<NSString *, id> *_Nullable,
                                  FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableMap",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aMap ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSDictionary<NSString *, id> *output =
                           reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoNullableEnum:(nullable AnEnumBox *)arg_anEnum
              completion:(void (^)(AnEnumBox *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableEnum",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_anEnum == nil ? [NSNull null] : arg_anEnum ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AnEnumBox *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoAnotherNullableEnum:(nullable AnotherEnumBox *)arg_anotherEnum
                     completion:
                         (void (^)(AnotherEnumBox *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName =
      [NSString stringWithFormat:@"%@%@",
                                 @"dev.flutter.pigeon.pigeon_integration_tests."
                                 @"FlutterIntegrationCoreApi.echoAnotherNullableEnum",
                                 _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_anotherEnum == nil ? [NSNull null] : arg_anotherEnum ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       AnotherEnumBox *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)noopAsyncWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.noopAsync",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:nil
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion([FlutterError errorWithCode:reply[0]
                                                      message:reply[1]
                                                      details:reply[2]]);
                     } else {
                       completion(nil);
                     }
                   } else {
                     completion(createConnectionError(channelName));
                   }
                 }];
}
- (void)echoAsyncString:(NSString *)arg_aString
             completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@",
          @"dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAsyncString",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aString ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSString *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
@end

void SetUpHostTrivialApi(id<FlutterBinaryMessenger> binaryMessenger,
                         NSObject<HostTrivialApi> *api) {
  SetUpHostTrivialApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpHostTrivialApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                   NSObject<HostTrivialApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.pigeon_integration_tests.HostTrivialApi.noop",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(noopWithError:)],
                @"HostTrivialApi api (%@) doesn't respond to @selector(noopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api noopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpHostSmallApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HostSmallApi> *api) {
  SetUpHostSmallApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpHostSmallApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<HostSmallApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.echo",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoString:completion:)],
                @"HostSmallApi api (%@) doesn't respond to @selector(echoString:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_aString = GetNullableObjectAtIndex(args, 0);
        [api echoString:arg_aString
             completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
               callback(wrapResult(output, error));
             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.pigeon_integration_tests."
                                                   @"HostSmallApi.voidVoid",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GetCoreTestsCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(voidVoidWithCompletion:)],
                @"HostSmallApi api (%@) doesn't respond to @selector(voidVoidWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api voidVoidWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FlutterSmallApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation FlutterSmallApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger
                   messageChannelSuffix:(nullable NSString *)messageChannelSuffix {
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0
                                ? @""
                                : [NSString stringWithFormat:@".%@", messageChannelSuffix];
  }
  return self;
}
- (void)echoWrappedList:(TestMessage *)arg_msg
             completion:(void (^)(TestMessage *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:
          @"%@%@", @"dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoWrappedList",
          _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_msg ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       TestMessage *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
- (void)echoString:(NSString *)arg_aString
        completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString
      stringWithFormat:@"%@%@",
                       @"dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoString",
                       _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:channelName
                                         binaryMessenger:self.binaryMessenger
                                                   codec:GetCoreTestsCodec()];
  [channel sendMessage:@[ arg_aString ?: [NSNull null] ]
                 reply:^(NSArray<id> *reply) {
                   if (reply != nil) {
                     if (reply.count > 1) {
                       completion(nil, [FlutterError errorWithCode:reply[0]
                                                           message:reply[1]
                                                           details:reply[2]]);
                     } else {
                       NSString *output = reply[0] == [NSNull null] ? nil : reply[0];
                       completion(output, nil);
                     }
                   } else {
                     completion(nil, createConnectionError(channelName));
                   }
                 }];
}
@end
