// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Enum.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface DataWithEnum ()
+ (DataWithEnum *)fromList:(NSArray *)list;
+ (nullable DataWithEnum *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation DataWithEnum
+ (instancetype)makeWithState:(EnumState)state {
  DataWithEnum *pigeonResult = [[DataWithEnum alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (DataWithEnum *)fromList:(NSArray *)list {
  DataWithEnum *pigeonResult = [[DataWithEnum alloc] init];
  pigeonResult.state = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable DataWithEnum *)nullableFromList:(NSArray *)list {
  return (list) ? [DataWithEnum fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.state),
  ];
}
@end

@interface EnumApi2HostCodecReader : FlutterStandardReader
@end
@implementation EnumApi2HostCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [DataWithEnum fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface EnumApi2HostCodecWriter : FlutterStandardWriter
@end
@implementation EnumApi2HostCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[DataWithEnum class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface EnumApi2HostCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation EnumApi2HostCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[EnumApi2HostCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[EnumApi2HostCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *EnumApi2HostGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    EnumApi2HostCodecReaderWriter *readerWriter = [[EnumApi2HostCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void EnumApi2HostSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<EnumApi2Host> *api) {
  /// This comment is to test method documentation comments.
  {
    FlutterBasicMessageChannel *channel =
        [[FlutterBasicMessageChannel alloc] initWithName:@"dev.flutter.pigeon.EnumApi2Host.echo"
                                         binaryMessenger:binaryMessenger
                                                   codec:EnumApi2HostGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(echoData:error:)],
                @"EnumApi2Host api (%@) doesn't respond to @selector(echoData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        DataWithEnum *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        DataWithEnum *output = [api echoData:arg_data error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface EnumApi2FlutterCodecReader : FlutterStandardReader
@end
@implementation EnumApi2FlutterCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [DataWithEnum fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface EnumApi2FlutterCodecWriter : FlutterStandardWriter
@end
@implementation EnumApi2FlutterCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[DataWithEnum class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface EnumApi2FlutterCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation EnumApi2FlutterCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[EnumApi2FlutterCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[EnumApi2FlutterCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *EnumApi2FlutterGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    EnumApi2FlutterCodecReaderWriter *readerWriter =
        [[EnumApi2FlutterCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface EnumApi2Flutter ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation EnumApi2Flutter

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)echoData:(DataWithEnum *)arg_data
      completion:(void (^)(DataWithEnum *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:@"dev.flutter.pigeon.EnumApi2Flutter.echo"
                                         binaryMessenger:self.binaryMessenger
                                                   codec:EnumApi2FlutterGetCodec()];
  [channel sendMessage:@[ arg_data ?: [NSNull null] ]
                 reply:^(id reply) {
                   DataWithEnum *output = reply;
                   completion(output, nil);
                 }];
}
@end
