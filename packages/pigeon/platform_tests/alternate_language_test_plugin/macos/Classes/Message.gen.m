// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Message.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface ACMessageSearchRequest ()
+ (ACMessageSearchRequest *)fromList:(NSArray *)list;
+ (nullable ACMessageSearchRequest *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ACMessageSearchReply ()
+ (ACMessageSearchReply *)fromList:(NSArray *)list;
+ (nullable ACMessageSearchReply *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ACMessageNested ()
+ (ACMessageNested *)fromList:(NSArray *)list;
+ (nullable ACMessageNested *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation ACMessageSearchRequest
+ (instancetype)makeWithQuery:(nullable NSString *)query
                        anInt:(nullable NSNumber *)anInt
                        aBool:(nullable NSNumber *)aBool {
  ACMessageSearchRequest *pigeonResult = [[ACMessageSearchRequest alloc] init];
  pigeonResult.query = query;
  pigeonResult.anInt = anInt;
  pigeonResult.aBool = aBool;
  return pigeonResult;
}
+ (ACMessageSearchRequest *)fromList:(NSArray *)list {
  ACMessageSearchRequest *pigeonResult = [[ACMessageSearchRequest alloc] init];
  pigeonResult.query = GetNullableObjectAtIndex(list, 0);
  pigeonResult.anInt = GetNullableObjectAtIndex(list, 1);
  pigeonResult.aBool = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable ACMessageSearchRequest *)nullableFromList:(NSArray *)list {
  return (list) ? [ACMessageSearchRequest fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.query ?: [NSNull null]),
    (self.anInt ?: [NSNull null]),
    (self.aBool ?: [NSNull null]),
  ];
}
@end

@implementation ACMessageSearchReply
+ (instancetype)makeWithResult:(nullable NSString *)result
                         error:(nullable NSString *)error
                         state:(ACMessageRequestState)state {
  ACMessageSearchReply *pigeonResult = [[ACMessageSearchReply alloc] init];
  pigeonResult.result = result;
  pigeonResult.error = error;
  pigeonResult.state = state;
  return pigeonResult;
}
+ (ACMessageSearchReply *)fromList:(NSArray *)list {
  ACMessageSearchReply *pigeonResult = [[ACMessageSearchReply alloc] init];
  pigeonResult.result = GetNullableObjectAtIndex(list, 0);
  pigeonResult.error = GetNullableObjectAtIndex(list, 1);
  pigeonResult.state = [GetNullableObjectAtIndex(list, 2) integerValue];
  return pigeonResult;
}
+ (nullable ACMessageSearchReply *)nullableFromList:(NSArray *)list {
  return (list) ? [ACMessageSearchReply fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.result ?: [NSNull null]),
    (self.error ?: [NSNull null]),
    @(self.state),
  ];
}
@end

@implementation ACMessageNested
+ (instancetype)makeWithRequest:(nullable ACMessageSearchRequest *)request {
  ACMessageNested *pigeonResult = [[ACMessageNested alloc] init];
  pigeonResult.request = request;
  return pigeonResult;
}
+ (ACMessageNested *)fromList:(NSArray *)list {
  ACMessageNested *pigeonResult = [[ACMessageNested alloc] init];
  pigeonResult.request =
      [ACMessageSearchRequest nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  return pigeonResult;
}
+ (nullable ACMessageNested *)nullableFromList:(NSArray *)list {
  return (list) ? [ACMessageNested fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.request ? [self.request toList] : [NSNull null]),
  ];
}
@end

@interface ACMessageApiCodecReader : FlutterStandardReader
@end
@implementation ACMessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [ACMessageSearchReply fromList:[self readValue]];
    case 129:
      return [ACMessageSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACMessageApiCodecWriter : FlutterStandardWriter
@end
@implementation ACMessageApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ACMessageSearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ACMessageSearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACMessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACMessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACMessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACMessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACMessageApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACMessageApiCodecReaderWriter *readerWriter = [[ACMessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ACMessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACMessageApi> *api) {
  /// This comment is to test documentation comments.
  ///
  /// This comment also tests multiple line comments.
  {
    FlutterBasicMessageChannel *channel =
        [[FlutterBasicMessageChannel alloc] initWithName:@"dev.flutter.pigeon.MessageApi.initialize"
                                         binaryMessenger:binaryMessenger
                                                   codec:ACMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeWithError:)],
                @"ACMessageApi api (%@) doesn't respond to @selector(initializeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initializeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// This comment is to test method documentation comments.
  {
    FlutterBasicMessageChannel *channel =
        [[FlutterBasicMessageChannel alloc] initWithName:@"dev.flutter.pigeon.MessageApi.search"
                                         binaryMessenger:binaryMessenger
                                                   codec:ACMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchRequest:error:)],
                @"ACMessageApi api (%@) doesn't respond to @selector(searchRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ACMessageSearchRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        ACMessageSearchReply *output = [api searchRequest:arg_request error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ACMessageNestedApiCodecReader : FlutterStandardReader
@end
@implementation ACMessageNestedApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [ACMessageNested fromList:[self readValue]];
    case 129:
      return [ACMessageSearchReply fromList:[self readValue]];
    case 130:
      return [ACMessageSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACMessageNestedApiCodecWriter : FlutterStandardWriter
@end
@implementation ACMessageNestedApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ACMessageNested class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ACMessageSearchReply class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ACMessageSearchRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACMessageNestedApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACMessageNestedApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACMessageNestedApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACMessageNestedApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACMessageNestedApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACMessageNestedApiCodecReaderWriter *readerWriter =
        [[ACMessageNestedApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ACMessageNestedApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<ACMessageNestedApi> *api) {
  /// This comment is to test method documentation comments.
  ///
  /// This comment also tests multiple line comments.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.MessageNestedApi.search"
        binaryMessenger:binaryMessenger
                  codec:ACMessageNestedApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchNested:error:)],
                @"ACMessageNestedApi api (%@) doesn't respond to @selector(searchNested:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ACMessageNested *arg_nested = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        ACMessageSearchReply *output = [api searchNested:arg_nested error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ACMessageFlutterSearchApiCodecReader : FlutterStandardReader
@end
@implementation ACMessageFlutterSearchApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [ACMessageSearchReply fromList:[self readValue]];
    case 129:
      return [ACMessageSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACMessageFlutterSearchApiCodecWriter : FlutterStandardWriter
@end
@implementation ACMessageFlutterSearchApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ACMessageSearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ACMessageSearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACMessageFlutterSearchApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACMessageFlutterSearchApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACMessageFlutterSearchApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACMessageFlutterSearchApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACMessageFlutterSearchApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACMessageFlutterSearchApiCodecReaderWriter *readerWriter =
        [[ACMessageFlutterSearchApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface ACMessageFlutterSearchApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation ACMessageFlutterSearchApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)searchRequest:(ACMessageSearchRequest *)arg_request
           completion:
               (void (^)(ACMessageSearchReply *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MessageFlutterSearchApi.search"
             binaryMessenger:self.binaryMessenger
                       codec:ACMessageFlutterSearchApiGetCodec()];
  [channel sendMessage:@[ arg_request ?: [NSNull null] ]
                 reply:^(id reply) {
                   ACMessageSearchReply *output = reply;
                   completion(output, nil);
                 }];
}
@end
