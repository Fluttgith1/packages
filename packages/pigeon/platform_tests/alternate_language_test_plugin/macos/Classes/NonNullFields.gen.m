// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "NonNullFields.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface NonNullFieldSearchRequest ()
+ (NonNullFieldSearchRequest *)fromList:(NSArray *)list;
+ (nullable NonNullFieldSearchRequest *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ExtraData ()
+ (ExtraData *)fromList:(NSArray *)list;
+ (nullable ExtraData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface NonNullFieldSearchReply ()
+ (NonNullFieldSearchReply *)fromList:(NSArray *)list;
+ (nullable NonNullFieldSearchReply *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation NonNullFieldSearchRequest
+ (instancetype)makeWithQuery:(NSString *)query {
  NonNullFieldSearchRequest *pigeonResult = [[NonNullFieldSearchRequest alloc] init];
  pigeonResult.query = query;
  return pigeonResult;
}
+ (NonNullFieldSearchRequest *)fromList:(NSArray *)list {
  NonNullFieldSearchRequest *pigeonResult = [[NonNullFieldSearchRequest alloc] init];
  pigeonResult.query = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.query != nil, @"");
  return pigeonResult;
}
+ (nullable NonNullFieldSearchRequest *)nullableFromList:(NSArray *)list {
  return (list) ? [NonNullFieldSearchRequest fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.query ?: [NSNull null]),
  ];
}
@end

@implementation ExtraData
+ (instancetype)makeWithDetailA:(NSString *)detailA detailB:(NSString *)detailB {
  ExtraData *pigeonResult = [[ExtraData alloc] init];
  pigeonResult.detailA = detailA;
  pigeonResult.detailB = detailB;
  return pigeonResult;
}
+ (ExtraData *)fromList:(NSArray *)list {
  ExtraData *pigeonResult = [[ExtraData alloc] init];
  pigeonResult.detailA = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.detailA != nil, @"");
  pigeonResult.detailB = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.detailB != nil, @"");
  return pigeonResult;
}
+ (nullable ExtraData *)nullableFromList:(NSArray *)list {
  return (list) ? [ExtraData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.detailA ?: [NSNull null]),
    (self.detailB ?: [NSNull null]),
  ];
}
@end

@implementation NonNullFieldSearchReply
+ (instancetype)makeWithResult:(NSString *)result
                         error:(NSString *)error
                       indices:(NSArray<NSNumber *> *)indices
                     extraData:(ExtraData *)extraData
                          type:(ReplyType)type {
  NonNullFieldSearchReply *pigeonResult = [[NonNullFieldSearchReply alloc] init];
  pigeonResult.result = result;
  pigeonResult.error = error;
  pigeonResult.indices = indices;
  pigeonResult.extraData = extraData;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (NonNullFieldSearchReply *)fromList:(NSArray *)list {
  NonNullFieldSearchReply *pigeonResult = [[NonNullFieldSearchReply alloc] init];
  pigeonResult.result = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.result != nil, @"");
  pigeonResult.error = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.error != nil, @"");
  pigeonResult.indices = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.indices != nil, @"");
  pigeonResult.extraData = [ExtraData nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  NSAssert(pigeonResult.extraData != nil, @"");
  pigeonResult.type = [GetNullableObjectAtIndex(list, 4) integerValue];
  return pigeonResult;
}
+ (nullable NonNullFieldSearchReply *)nullableFromList:(NSArray *)list {
  return (list) ? [NonNullFieldSearchReply fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.result ?: [NSNull null]),
    (self.error ?: [NSNull null]),
    (self.indices ?: [NSNull null]),
    (self.extraData ? [self.extraData toList] : [NSNull null]),
    @(self.type),
  ];
}
@end

@interface NonNullFieldHostApiCodecReader : FlutterStandardReader
@end
@implementation NonNullFieldHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [ExtraData fromList:[self readValue]];
    case 129:
      return [NonNullFieldSearchReply fromList:[self readValue]];
    case 130:
      return [NonNullFieldSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface NonNullFieldHostApiCodecWriter : FlutterStandardWriter
@end
@implementation NonNullFieldHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ExtraData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NonNullFieldSearchReply class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NonNullFieldSearchRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface NonNullFieldHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NonNullFieldHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NonNullFieldHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NonNullFieldHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NonNullFieldHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    NonNullFieldHostApiCodecReaderWriter *readerWriter =
        [[NonNullFieldHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void NonNullFieldHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                              NSObject<NonNullFieldHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.NonNullFieldHostApi.search"
        binaryMessenger:binaryMessenger
                  codec:NonNullFieldHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchNested:error:)],
                @"NonNullFieldHostApi api (%@) doesn't respond to @selector(searchNested:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NonNullFieldSearchRequest *arg_nested = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NonNullFieldSearchReply *output = [api searchNested:arg_nested error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface NonNullFieldFlutterApiCodecReader : FlutterStandardReader
@end
@implementation NonNullFieldFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [ExtraData fromList:[self readValue]];
    case 129:
      return [NonNullFieldSearchReply fromList:[self readValue]];
    case 130:
      return [NonNullFieldSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface NonNullFieldFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation NonNullFieldFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ExtraData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NonNullFieldSearchReply class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NonNullFieldSearchRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface NonNullFieldFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NonNullFieldFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NonNullFieldFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NonNullFieldFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NonNullFieldFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    NonNullFieldFlutterApiCodecReaderWriter *readerWriter =
        [[NonNullFieldFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface NonNullFieldFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NonNullFieldFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)searchRequest:(NonNullFieldSearchRequest *)arg_request
           completion:
               (void (^)(NonNullFieldSearchReply *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NonNullFieldFlutterApi.search"
             binaryMessenger:self.binaryMessenger
                       codec:NonNullFieldFlutterApiGetCodec()];
  [channel sendMessage:@[ arg_request ?: [NSNull null] ]
                 reply:^(id reply) {
                   NonNullFieldSearchReply *output = reply;
                   completion(output, nil);
                 }];
}
@end
