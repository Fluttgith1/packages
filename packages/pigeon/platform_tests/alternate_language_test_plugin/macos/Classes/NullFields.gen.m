// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "NullFields.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface NullFieldsSearchRequest ()
+ (NullFieldsSearchRequest *)fromList:(NSArray *)list;
+ (nullable NullFieldsSearchRequest *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface NullFieldsSearchReply ()
+ (NullFieldsSearchReply *)fromList:(NSArray *)list;
+ (nullable NullFieldsSearchReply *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation NullFieldsSearchRequest
+ (instancetype)makeWithQuery:(nullable NSString *)query identifier:(NSNumber *)identifier {
  NullFieldsSearchRequest *pigeonResult = [[NullFieldsSearchRequest alloc] init];
  pigeonResult.query = query;
  pigeonResult.identifier = identifier;
  return pigeonResult;
}
+ (NullFieldsSearchRequest *)fromList:(NSArray *)list {
  NullFieldsSearchRequest *pigeonResult = [[NullFieldsSearchRequest alloc] init];
  pigeonResult.query = GetNullableObjectAtIndex(list, 0);
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.identifier != nil, @"");
  return pigeonResult;
}
+ (nullable NullFieldsSearchRequest *)nullableFromList:(NSArray *)list {
  return (list) ? [NullFieldsSearchRequest fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.query ?: [NSNull null]),
    (self.identifier ?: [NSNull null]),
  ];
}
@end

@implementation NullFieldsSearchReply
+ (instancetype)makeWithResult:(nullable NSString *)result
                         error:(nullable NSString *)error
                       indices:(nullable NSArray<NSNumber *> *)indices
                       request:(nullable NullFieldsSearchRequest *)request
                          type:(NullFieldsSearchReplyType)type {
  NullFieldsSearchReply *pigeonResult = [[NullFieldsSearchReply alloc] init];
  pigeonResult.result = result;
  pigeonResult.error = error;
  pigeonResult.indices = indices;
  pigeonResult.request = request;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (NullFieldsSearchReply *)fromList:(NSArray *)list {
  NullFieldsSearchReply *pigeonResult = [[NullFieldsSearchReply alloc] init];
  pigeonResult.result = GetNullableObjectAtIndex(list, 0);
  pigeonResult.error = GetNullableObjectAtIndex(list, 1);
  pigeonResult.indices = GetNullableObjectAtIndex(list, 2);
  pigeonResult.request =
      [NullFieldsSearchRequest nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  pigeonResult.type = [GetNullableObjectAtIndex(list, 4) integerValue];
  return pigeonResult;
}
+ (nullable NullFieldsSearchReply *)nullableFromList:(NSArray *)list {
  return (list) ? [NullFieldsSearchReply fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.result ?: [NSNull null]),
    (self.error ?: [NSNull null]),
    (self.indices ?: [NSNull null]),
    (self.request ? [self.request toList] : [NSNull null]),
    @(self.type),
  ];
}
@end

@interface NullFieldsHostApiCodecReader : FlutterStandardReader
@end
@implementation NullFieldsHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [NullFieldsSearchReply fromList:[self readValue]];
    case 129:
      return [NullFieldsSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface NullFieldsHostApiCodecWriter : FlutterStandardWriter
@end
@implementation NullFieldsHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[NullFieldsSearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NullFieldsSearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface NullFieldsHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NullFieldsHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NullFieldsHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NullFieldsHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NullFieldsHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    NullFieldsHostApiCodecReaderWriter *readerWriter =
        [[NullFieldsHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void NullFieldsHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                            NSObject<NullFieldsHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.NullFieldsHostApi.search"
        binaryMessenger:binaryMessenger
                  codec:NullFieldsHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchNested:error:)],
                @"NullFieldsHostApi api (%@) doesn't respond to @selector(searchNested:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NullFieldsSearchRequest *arg_nested = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NullFieldsSearchReply *output = [api searchNested:arg_nested error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface NullFieldsFlutterApiCodecReader : FlutterStandardReader
@end
@implementation NullFieldsFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [NullFieldsSearchReply fromList:[self readValue]];
    case 129:
      return [NullFieldsSearchRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface NullFieldsFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation NullFieldsFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[NullFieldsSearchReply class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NullFieldsSearchRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface NullFieldsFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NullFieldsFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NullFieldsFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NullFieldsFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NullFieldsFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    NullFieldsFlutterApiCodecReaderWriter *readerWriter =
        [[NullFieldsFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface NullFieldsFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NullFieldsFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)searchRequest:(NullFieldsSearchRequest *)arg_request
           completion:
               (void (^)(NullFieldsSearchReply *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NullFieldsFlutterApi.search"
             binaryMessenger:self.binaryMessenger
                       codec:NullFieldsFlutterApiGetCodec()];
  [channel sendMessage:@[ arg_request ?: [NSNull null] ]
                 reply:^(id reply) {
                   NullFieldsSearchReply *output = reply;
                   completion(output, nil);
                 }];
}
@end
