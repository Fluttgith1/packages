// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "NullableReturns.gen.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *NullableReturnHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void NullableReturnHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                                NSObject<NullableReturnHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.NullableReturnHostApi.doit"
        binaryMessenger:binaryMessenger
                  codec:NullableReturnHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(doitWithError:)],
                @"NullableReturnHostApi api (%@) doesn't respond to @selector(doitWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api doitWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *NullableReturnFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface NullableReturnFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NullableReturnFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)doitWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NullableReturnFlutterApi.doit"
             binaryMessenger:self.binaryMessenger
                       codec:NullableReturnFlutterApiGetCodec()];
  [channel sendMessage:nil
                 reply:^(id reply) {
                   NSNumber *output = reply;
                   completion(output, nil);
                 }];
}
@end

NSObject<FlutterMessageCodec> *NullableArgHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void NullableArgHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<NullableArgHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.NullableArgHostApi.doit"
        binaryMessenger:binaryMessenger
                  codec:NullableArgHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(doitX:error:)],
                @"NullableArgHostApi api (%@) doesn't respond to @selector(doitX:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_x = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api doitX:arg_x error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *NullableArgFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface NullableArgFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NullableArgFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)doitX:(nullable NSNumber *)arg_x
    completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NullableArgFlutterApi.doit"
             binaryMessenger:self.binaryMessenger
                       codec:NullableArgFlutterApiGetCodec()];
  [channel sendMessage:@[ arg_x ?: [NSNull null] ]
                 reply:^(id reply) {
                   NSNumber *output = reply;
                   completion(output, nil);
                 }];
}
@end

NSObject<FlutterMessageCodec> *NullableCollectionReturnHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void NullableCollectionReturnHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                                          NSObject<NullableCollectionReturnHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.NullableCollectionReturnHostApi.doit"
        binaryMessenger:binaryMessenger
                  codec:NullableCollectionReturnHostApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(doitWithError:)],
          @"NullableCollectionReturnHostApi api (%@) doesn't respond to @selector(doitWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<NSString *> *output = [api doitWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *NullableCollectionReturnFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface NullableCollectionReturnFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NullableCollectionReturnFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)doitWithCompletion:(void (^)(NSArray<NSString *> *_Nullable,
                                     FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NullableCollectionReturnFlutterApi.doit"
             binaryMessenger:self.binaryMessenger
                       codec:NullableCollectionReturnFlutterApiGetCodec()];
  [channel sendMessage:nil
                 reply:^(id reply) {
                   NSArray<NSString *> *output = reply;
                   completion(output, nil);
                 }];
}
@end

NSObject<FlutterMessageCodec> *NullableCollectionArgHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void NullableCollectionArgHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                                       NSObject<NullableCollectionArgHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.NullableCollectionArgHostApi.doit"
        binaryMessenger:binaryMessenger
                  codec:NullableCollectionArgHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(doitX:error:)],
                @"NullableCollectionArgHostApi api (%@) doesn't respond to @selector(doitX:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_x = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<NSString *> *output = [api doitX:arg_x error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *NullableCollectionArgFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface NullableCollectionArgFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NullableCollectionArgFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)doitX:(nullable NSArray<NSString *> *)arg_x
    completion:(void (^)(NSArray<NSString *> *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NullableCollectionArgFlutterApi.doit"
             binaryMessenger:self.binaryMessenger
                       codec:NullableCollectionArgFlutterApiGetCodec()];
  [channel sendMessage:@[ arg_x ?: [NSNull null] ]
                 reply:^(id reply) {
                   NSArray<NSString *> *output = reply;
                   completion(output, nil);
                 }];
}
@end
