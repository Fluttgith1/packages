// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// 
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_kotlin_unit_tests

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

enum class AndroidLoadingState(val raw: Int) {
  LOADING(0),
  COMPLETE(1);

  companion object {
    fun ofRaw(raw: Int): AndroidLoadingState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidSetRequest (
  val value: Long? = null,
  val state: AndroidLoadingState? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(result: List<Any?>): AndroidSetRequest {
      val list = result.first() as List<Any?>
      val value = list[0].let { if (it is Int) it.toLong() else it as? Long }
      val state: AndroidLoadingState? = (list[1] as? Int)?.let {
        AndroidLoadingState.ofRaw(it)
      }

      return AndroidSetRequest(value, state)
    }
  }
  fun toList(): MutableList<MutableList<Any?>> {
    val list = mutableListOf<Any?>()
    list.add(value)
    list.add(state?.raw)
    return mutableListOf<MutableList<Any?>>(list)
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidNestedRequest (
  val context: String? = null,
  val request: AndroidSetRequest? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(result: List<Any?>): AndroidNestedRequest {
      val list = result.first() as List<Any?>
      val context = list[0] as? String
      val request: AndroidSetRequest? = (list[1] as? List<Any?>)?.let {
        AndroidSetRequest.fromList(it)
      }

      return AndroidNestedRequest(context, request)
    }
  }
  fun toList(): MutableList<MutableList<Any?>> {
    val list = mutableListOf<Any?>()
    list.add(context)
    list.add(request?.toList())
    return mutableListOf<MutableList<Any?>>(list)
  }
}
@Suppress("UNCHECKED_CAST")
private object AndroidApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidSetRequest.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AndroidSetRequest -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AndroidApi {
  fun setValue(request: AndroidSetRequest)

  companion object {
    /** The codec used by AndroidApi. */
    val codec: MessageCodec<Any?> by lazy {
      AndroidApiCodec
    }
    /** Sets up an instance of `AndroidApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.AndroidApi.setValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val requestArg = args[0] as AndroidSetRequest
              api.setValue(requestArg)
              wrapped.add(null)
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object AndroidNestedApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidNestedRequest.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidSetRequest.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AndroidNestedRequest -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is AndroidSetRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AndroidNestedApi {
  fun setValueWithContext(request: AndroidNestedRequest)

  companion object {
    /** The codec used by AndroidNestedApi. */
    val codec: MessageCodec<Any?> by lazy {
      AndroidNestedApiCodec
    }
    /** Sets up an instance of `AndroidNestedApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidNestedApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.AndroidNestedApi.setValueWithContext", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val requestArg = args[0] as AndroidNestedRequest
              api.setValueWithContext(requestArg)
              wrapped.add(null)
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}
