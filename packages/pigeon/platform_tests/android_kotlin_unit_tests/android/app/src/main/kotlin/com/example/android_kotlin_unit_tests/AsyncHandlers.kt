// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// 
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_kotlin_unit_tests

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

/** Generated class from Pigeon that represents data sent in messages. */
data class Value (
  val number: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(result: List<Any?>): Value {
      val list = result.first() as List<Any?>
      val number = list[0].let { if (it is Int) it.toLong() else it as? Long }

      return Value(number)
    }
  }
  fun toList(): MutableList<MutableList<Any?>> {
    val list = mutableListOf<Any?>()
    list.add(number)
    return mutableListOf<MutableList<Any?>>(list)
  }
}

@Suppress("UNCHECKED_CAST")
private object Api2HostCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Value.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Value -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface Api2Host {
  fun calculate(value: Value, callback: (Value) -> Unit)
  fun voidVoid(callback: () -> Unit)

  companion object {
    /** The codec used by Api2Host. */
    val codec: MessageCodec<Any?> by lazy {
      Api2HostCodec
    }
    /** Sets up an instance of `Api2Host` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: Api2Host?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.Api2Host.calculate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Value
              api.calculate(valueArg) {
                reply.reply(wrapResult(it))
              }
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
              reply.reply(wrapped)
            
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.Api2Host.voidVoid", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              api.voidVoid() {
                reply.reply(null)
              }
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
              reply.reply(wrapped)
            
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object Api2FlutterCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Value.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Value -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class Api2Flutter(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by Api2Flutter. */
    val codec: MessageCodec<Any?> by lazy {
      Api2FlutterCodec
    }
  }
  fun calculate(valueArg: Value, callback: (Value) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.Api2Flutter.calculate", codec)
    channel.send(listOf(valueArg)) {
      val result = it as Value
      callback(result)
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}
