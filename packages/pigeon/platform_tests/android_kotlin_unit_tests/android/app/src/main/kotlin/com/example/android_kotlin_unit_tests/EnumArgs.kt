// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// 
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_kotlin_unit_tests

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

enum class EnumArgsState(val raw: Int) {
  PENDING(0),
  SUCCESS(1),
  ERROR(2);

  companion object {
    fun ofRaw(raw: Int): EnumArgsState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface EnumArgs2Host {
  fun foo(state: EnumArgsState)

  companion object {
    /** The codec used by EnumArgs2Host. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `EnumArgs2Host` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: EnumArgs2Host?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.EnumArgs2Host.foo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val stateArg = EnumArgsState.ofRaw(args[0] as Int)!!
              api.foo(stateArg)
              wrapped.add(null)
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}
