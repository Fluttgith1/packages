// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// 
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_kotlin_unit_tests

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NullableReturnHostApi {
  fun doit(): Long?

  companion object {
    /** The codec used by NullableReturnHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `NullableReturnHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NullableReturnHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableReturnHostApi.doit", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              wrapped.add(api.doit())
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NullableReturnFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NullableReturnFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun doit(callback: (Long?) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableReturnFlutterApi.doit", codec)
    channel.send(null) {
      val result = it as? Long?
      callback(result)
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NullableArgHostApi {
  fun doit(x: Long?): Long

  companion object {
    /** The codec used by NullableArgHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `NullableArgHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NullableArgHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableArgHostApi.doit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val xArg = args[0].let { if (it is Int) it.toLong() else it as? Long }
              wrapped.add(api.doit(xArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NullableArgFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NullableArgFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun doit(xArg: Long?, callback: (Long) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableArgFlutterApi.doit", codec)
    channel.send(listOf(xArg)) {
      val result = it as Long
      callback(result)
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NullableCollectionReturnHostApi {
  fun doit(): List<String?>?

  companion object {
    /** The codec used by NullableCollectionReturnHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `NullableCollectionReturnHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NullableCollectionReturnHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableCollectionReturnHostApi.doit", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              wrapped.add(api.doit())
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NullableCollectionReturnFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NullableCollectionReturnFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun doit(callback: (List<String?>?) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableCollectionReturnFlutterApi.doit", codec)
    channel.send(null) {
      val result = it as? List<String?>?
      callback(result)
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NullableCollectionArgHostApi {
  fun doit(x: List<String?>?): List<String?>

  companion object {
    /** The codec used by NullableCollectionArgHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `NullableCollectionArgHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NullableCollectionArgHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableCollectionArgHostApi.doit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val xArg = args[0] as? List<String?>
              wrapped.add(api.doit(xArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NullableCollectionArgFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NullableCollectionArgFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun doit(xArg: List<String?>?, callback: (List<String?>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NullableCollectionArgFlutterApi.doit", codec)
    channel.send(listOf(xArg)) {
      val result = it as List<String?>
      callback(result)
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}
