// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// 
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_kotlin_unit_tests

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PrimitiveHostApi {
  fun anInt(value: Long): Long
  fun aBool(value: Boolean): Boolean
  fun aString(value: String): String
  fun aDouble(value: Double): Double
  fun aMap(value: Map<Any, Any?>): Map<Any, Any?>
  fun aList(value: List<Any?>): List<Any?>
  fun anInt32List(value: IntArray): IntArray
  fun aBoolList(value: List<Boolean?>): List<Boolean?>
  fun aStringIntMap(value: Map<String?, Long?>): Map<String?, Long?>

  companion object {
    /** The codec used by PrimitiveHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `PrimitiveHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PrimitiveHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.anInt", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0].let { if (it is Int) it.toLong() else it as Long }
              wrapped.add(api.anInt(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aBool", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Boolean
              wrapped.add(api.aBool(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aString", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as String
              wrapped.add(api.aString(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aDouble", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Double
              wrapped.add(api.aDouble(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aMap", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Map<Any, Any?>
              wrapped.add(api.aMap(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aList", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as List<Any?>
              wrapped.add(api.aList(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.anInt32List", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as IntArray
              wrapped.add(api.anInt32List(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aBoolList", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as List<Boolean?>
              wrapped.add(api.aBoolList(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveHostApi.aStringIntMap", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = mutableListOf<Any?>()
            try {
              val args = message as List<Any?>
              val valueArg = args[0] as Map<String?, Long?>
              wrapped.add(api.aStringIntMap(valueArg))
            } catch (exception: Error) {
              wrapped.add(wrapError(exception))
            
            reply.reply(wrapped)
          }
        }} else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PrimitiveFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PrimitiveFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun anInt(valueArg: Long, callback: (Long) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.anInt", codec)
    channel.send(listOf(valueArg)) {
      val result = it as Long
      callback(result)
    }
  }
  fun aBool(valueArg: Boolean, callback: (Boolean) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aBool", codec)
    channel.send(listOf(valueArg)) {
      val result = it as Boolean
      callback(result)
    }
  }
  fun aString(valueArg: String, callback: (String) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aString", codec)
    channel.send(listOf(valueArg)) {
      val result = it as String
      callback(result)
    }
  }
  fun aDouble(valueArg: Double, callback: (Double) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aDouble", codec)
    channel.send(listOf(valueArg)) {
      val result = it as Double
      callback(result)
    }
  }
  fun aMap(valueArg: Map<Any, Any?>, callback: (Map<Any, Any?>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aMap", codec)
    channel.send(listOf(valueArg)) {
      val result = it as Map<Any, Any?>
      callback(result)
    }
  }
  fun aList(valueArg: List<Any?>, callback: (List<Any?>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aList", codec)
    channel.send(listOf(valueArg)) {
      val result = it as List<Any?>
      callback(result)
    }
  }
  fun anInt32List(valueArg: IntArray, callback: (IntArray) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.anInt32List", codec)
    channel.send(listOf(valueArg)) {
      val result = it as IntArray
      callback(result)
    }
  }
  fun aBoolList(valueArg: List<Boolean?>, callback: (List<Boolean?>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aBoolList", codec)
    channel.send(listOf(valueArg)) {
      val result = it as List<Boolean?>
      callback(result)
    }
  }
  fun aStringIntMap(valueArg: Map<String?, Long?>, callback: (Map<String?, Long?>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PrimitiveFlutterApi.aStringIntMap", codec)
    channel.send(listOf(valueArg)) {
      val result = it as Map<String?, Long?>
      callback(result)
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}
