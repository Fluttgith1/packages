// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AllDatatypes {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Everything {
    private @Nullable Boolean aBool;

    public @Nullable Boolean getABool() {
      return aBool;
    }

    public void setABool(@Nullable Boolean setterArg) {
      this.aBool = setterArg;
    }

    private @Nullable Long anInt;

    public @Nullable Long getAnInt() {
      return anInt;
    }

    public void setAnInt(@Nullable Long setterArg) {
      this.anInt = setterArg;
    }

    private @Nullable Double aDouble;

    public @Nullable Double getADouble() {
      return aDouble;
    }

    public void setADouble(@Nullable Double setterArg) {
      this.aDouble = setterArg;
    }

    private @Nullable String aString;

    public @Nullable String getAString() {
      return aString;
    }

    public void setAString(@Nullable String setterArg) {
      this.aString = setterArg;
    }

    private @Nullable byte[] aByteArray;

    public @Nullable byte[] getAByteArray() {
      return aByteArray;
    }

    public void setAByteArray(@Nullable byte[] setterArg) {
      this.aByteArray = setterArg;
    }

    private @Nullable int[] a4ByteArray;

    public @Nullable int[] getA4ByteArray() {
      return a4ByteArray;
    }

    public void setA4ByteArray(@Nullable int[] setterArg) {
      this.a4ByteArray = setterArg;
    }

    private @Nullable long[] a8ByteArray;

    public @Nullable long[] getA8ByteArray() {
      return a8ByteArray;
    }

    public void setA8ByteArray(@Nullable long[] setterArg) {
      this.a8ByteArray = setterArg;
    }

    private @Nullable double[] aFloatArray;

    public @Nullable double[] getAFloatArray() {
      return aFloatArray;
    }

    public void setAFloatArray(@Nullable double[] setterArg) {
      this.aFloatArray = setterArg;
    }

    private @Nullable List<Object> aList;

    public @Nullable List<Object> getAList() {
      return aList;
    }

    public void setAList(@Nullable List<Object> setterArg) {
      this.aList = setterArg;
    }

    private @Nullable Map<Object, Object> aMap;

    public @Nullable Map<Object, Object> getAMap() {
      return aMap;
    }

    public void setAMap(@Nullable Map<Object, Object> setterArg) {
      this.aMap = setterArg;
    }

    private @Nullable List<List<Boolean>> nestedList;

    public @Nullable List<List<Boolean>> getNestedList() {
      return nestedList;
    }

    public void setNestedList(@Nullable List<List<Boolean>> setterArg) {
      this.nestedList = setterArg;
    }

    private @Nullable Map<String, String> mapWithAnnotations;

    public @Nullable Map<String, String> getMapWithAnnotations() {
      return mapWithAnnotations;
    }

    public void setMapWithAnnotations(@Nullable Map<String, String> setterArg) {
      this.mapWithAnnotations = setterArg;
    }

    private @Nullable Map<String, Object> mapWithObject;

    public @Nullable Map<String, Object> getMapWithObject() {
      return mapWithObject;
    }

    public void setMapWithObject(@Nullable Map<String, Object> setterArg) {
      this.mapWithObject = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean aBool;

      public @NonNull Builder setABool(@Nullable Boolean setterArg) {
        this.aBool = setterArg;
        return this;
      }

      private @Nullable Long anInt;

      public @NonNull Builder setAnInt(@Nullable Long setterArg) {
        this.anInt = setterArg;
        return this;
      }

      private @Nullable Double aDouble;

      public @NonNull Builder setADouble(@Nullable Double setterArg) {
        this.aDouble = setterArg;
        return this;
      }

      private @Nullable String aString;

      public @NonNull Builder setAString(@Nullable String setterArg) {
        this.aString = setterArg;
        return this;
      }

      private @Nullable byte[] aByteArray;

      public @NonNull Builder setAByteArray(@Nullable byte[] setterArg) {
        this.aByteArray = setterArg;
        return this;
      }

      private @Nullable int[] a4ByteArray;

      public @NonNull Builder setA4ByteArray(@Nullable int[] setterArg) {
        this.a4ByteArray = setterArg;
        return this;
      }

      private @Nullable long[] a8ByteArray;

      public @NonNull Builder setA8ByteArray(@Nullable long[] setterArg) {
        this.a8ByteArray = setterArg;
        return this;
      }

      private @Nullable double[] aFloatArray;

      public @NonNull Builder setAFloatArray(@Nullable double[] setterArg) {
        this.aFloatArray = setterArg;
        return this;
      }

      private @Nullable List<Object> aList;

      public @NonNull Builder setAList(@Nullable List<Object> setterArg) {
        this.aList = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> aMap;

      public @NonNull Builder setAMap(@Nullable Map<Object, Object> setterArg) {
        this.aMap = setterArg;
        return this;
      }

      private @Nullable List<List<Boolean>> nestedList;

      public @NonNull Builder setNestedList(@Nullable List<List<Boolean>> setterArg) {
        this.nestedList = setterArg;
        return this;
      }

      private @Nullable Map<String, String> mapWithAnnotations;

      public @NonNull Builder setMapWithAnnotations(@Nullable Map<String, String> setterArg) {
        this.mapWithAnnotations = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> mapWithObject;

      public @NonNull Builder setMapWithObject(@Nullable Map<String, Object> setterArg) {
        this.mapWithObject = setterArg;
        return this;
      }

      public @NonNull Everything build() {
        Everything pigeonReturn = new Everything();
        pigeonReturn.setABool(aBool);
        pigeonReturn.setAnInt(anInt);
        pigeonReturn.setADouble(aDouble);
        pigeonReturn.setAString(aString);
        pigeonReturn.setAByteArray(aByteArray);
        pigeonReturn.setA4ByteArray(a4ByteArray);
        pigeonReturn.setA8ByteArray(a8ByteArray);
        pigeonReturn.setAFloatArray(aFloatArray);
        pigeonReturn.setAList(aList);
        pigeonReturn.setAMap(aMap);
        pigeonReturn.setNestedList(nestedList);
        pigeonReturn.setMapWithAnnotations(mapWithAnnotations);
        pigeonReturn.setMapWithObject(mapWithObject);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(aBool);
      toListResult.add(anInt);
      toListResult.add(aDouble);
      toListResult.add(aString);
      toListResult.add(aByteArray);
      toListResult.add(a4ByteArray);
      toListResult.add(a8ByteArray);
      toListResult.add(aFloatArray);
      toListResult.add(aList);
      toListResult.add(aMap);
      toListResult.add(nestedList);
      toListResult.add(mapWithAnnotations);
      toListResult.add(mapWithObject);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull Everything fromList(@NonNull ArrayList<ArrayList> list) {
      Everything pigeonResult = new Everything();
      ArrayList<Object> unwrapped = list.get(0);

      Object aBool = unwrapped.get(0);
      pigeonResult.setABool((Boolean) aBool);
      Object anInt = unwrapped.get(1);
      pigeonResult.setAnInt(
          (anInt == null) ? null : ((anInt instanceof Integer) ? (Integer) anInt : (Long) anInt));
      Object aDouble = unwrapped.get(2);
      pigeonResult.setADouble((Double) aDouble);
      Object aString = unwrapped.get(3);
      pigeonResult.setAString((String) aString);
      Object aByteArray = unwrapped.get(4);
      pigeonResult.setAByteArray((byte[]) aByteArray);
      Object a4ByteArray = unwrapped.get(5);
      pigeonResult.setA4ByteArray((int[]) a4ByteArray);
      Object a8ByteArray = unwrapped.get(6);
      pigeonResult.setA8ByteArray((long[]) a8ByteArray);
      Object aFloatArray = unwrapped.get(7);
      pigeonResult.setAFloatArray((double[]) aFloatArray);
      Object aList = unwrapped.get(8);
      pigeonResult.setAList((List<Object>) aList);
      Object aMap = unwrapped.get(9);
      pigeonResult.setAMap((Map<Object, Object>) aMap);
      Object nestedList = unwrapped.get(10);
      pigeonResult.setNestedList((List<List<Boolean>>) nestedList);
      Object mapWithAnnotations = unwrapped.get(11);
      pigeonResult.setMapWithAnnotations((Map<String, String>) mapWithAnnotations);
      Object mapWithObject = unwrapped.get(12);
      pigeonResult.setMapWithObject((Map<String, Object>) mapWithObject);
      return pigeonResult;
    }
  }

  private static class HostEverythingCodec extends StandardMessageCodec {
    public static final HostEverythingCodec INSTANCE = new HostEverythingCodec();

    private HostEverythingCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Everything.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Everything) {
        stream.write(128);
        writeValue(stream, ((Everything) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HostEverything {
    @NonNull
    Everything giveMeEverything();

    @NonNull
    Everything echo(@NonNull Everything everything);

    /** The codec used by HostEverything. */
    static MessageCodec<Object> getCodec() {
      return HostEverythingCodec.INSTANCE;
    }
    /** Sets up an instance of `HostEverything` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostEverything api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.HostEverything.giveMeEverything", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  Everything output = api.giveMeEverything();
                  wrapped.add(output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.HostEverything.echo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Everything everythingArg = (Everything) args.get(0);
                  if (everythingArg == null) {
                    throw new NullPointerException("everythingArg unexpectedly null.");
                  }
                  Everything output = api.echo(everythingArg);
                  wrapped.add(output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class FlutterEverythingCodec extends StandardMessageCodec {
    public static final FlutterEverythingCodec INSTANCE = new FlutterEverythingCodec();

    private FlutterEverythingCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Everything.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Everything) {
        stream.write(128);
        writeValue(stream, ((Everything) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterEverything {
    private final BinaryMessenger binaryMessenger;

    public FlutterEverything(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterEverything. */
    static MessageCodec<Object> getCodec() {
      return FlutterEverythingCodec.INSTANCE;
    }

    public void giveMeEverything(Reply<Everything> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterEverything.giveMeEverything", getCodec());
      channel.send(
          null,
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Everything output = (Everything) channelReply;
            callback.reply(output);
          });
    }

    public void echo(@NonNull Everything everythingArg, Reply<Everything> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterEverything.echo", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(everythingArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Everything output = (Everything) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
