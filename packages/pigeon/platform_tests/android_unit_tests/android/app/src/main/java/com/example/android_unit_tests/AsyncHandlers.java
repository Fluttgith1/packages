// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AsyncHandlers {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Value {
    private @Nullable Long number;

    public @Nullable Long getNumber() {
      return number;
    }

    public void setNumber(@Nullable Long setterArg) {
      this.number = setterArg;
    }

    public static final class Builder {
      private @Nullable Long number;

      public @NonNull Builder setNumber(@Nullable Long setterArg) {
        this.number = setterArg;
        return this;
      }

      public @NonNull Value build() {
        Value pigeonReturn = new Value();
        pigeonReturn.setNumber(number);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(number);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull Value fromList(@NonNull ArrayList<ArrayList> list) {
      Value pigeonResult = new Value();
      ArrayList<Object> unwrapped = list.get(0);

      Object number = unwrapped.get(0);
      pigeonResult.setNumber(
          (number == null)
              ? null
              : ((number instanceof Integer) ? (Integer) number : (Long) number));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class Api2HostCodec extends StandardMessageCodec {
    public static final Api2HostCodec INSTANCE = new Api2HostCodec();

    private Api2HostCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Value.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Value) {
        stream.write(128);
        writeValue(stream, ((Value) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface Api2Host {
    void calculate(@NonNull Value value, Result<Value> result);

    void voidVoid(Result<Void> result);

    /** The codec used by Api2Host. */
    static MessageCodec<Object> getCodec() {
      return Api2HostCodec.INSTANCE;
    }
    /** Sets up an instance of `Api2Host` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Api2Host api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api2Host.calculate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Value valueArg = (Value) args.get(0);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  Result<Value> resultCallback =
                      new Result<Value>() {
                        public void success(Value result) {
                          wrapped.add(result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          wrapped.add(wrappedError.get(0));
                          wrapped.add(wrappedError.get(1));
                          wrapped.add(wrappedError.get(2));
                          reply.reply(wrapped);
                        }
                      };

                  api.calculate(valueArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                  reply.reply(wrapped);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api2Host.voidVoid", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  Result<Void> resultCallback =
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          wrapped.add(wrappedError.get(0));
                          wrapped.add(wrappedError.get(1));
                          wrapped.add(wrappedError.get(2));
                          reply.reply(wrapped);
                        }
                      };

                  api.voidVoid(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                  reply.reply(wrapped);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class Api2FlutterCodec extends StandardMessageCodec {
    public static final Api2FlutterCodec INSTANCE = new Api2FlutterCodec();

    private Api2FlutterCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Value.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Value) {
        stream.write(128);
        writeValue(stream, ((Value) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class Api2Flutter {
    private final BinaryMessenger binaryMessenger;

    public Api2Flutter(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by Api2Flutter. */
    static MessageCodec<Object> getCodec() {
      return Api2FlutterCodec.INSTANCE;
    }

    public void calculate(@NonNull Value valueArg, Reply<Value> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.Api2Flutter.calculate", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(valueArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Value output = (Value) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
