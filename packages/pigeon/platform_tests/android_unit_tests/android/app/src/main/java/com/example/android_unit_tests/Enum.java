// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Enum {

  /** This comment is to test enum documentation comments. */
  public enum EnumState {
    PENDING(0),
    SUCCESS(1),
    ERROR(2);

    private int index;

    private EnumState(final int index) {
      this.index = index;
    }
  }

  /**
   * This comment is to test class documentation comments.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static class DataWithEnum {
    /** This comment is to test field documentation comments. */
    private @Nullable EnumState state;

    public @Nullable EnumState getState() {
      return state;
    }

    public void setState(@Nullable EnumState setterArg) {
      this.state = setterArg;
    }

    public static final class Builder {
      private @Nullable EnumState state;

      public @NonNull Builder setState(@Nullable EnumState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull DataWithEnum build() {
        DataWithEnum pigeonReturn = new DataWithEnum();
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(state == null ? null : state.index);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull DataWithEnum fromList(@NonNull ArrayList<ArrayList> list) {
      DataWithEnum pigeonResult = new DataWithEnum();
      ArrayList<Object> unwrapped = list.get(0);

      Object state = unwrapped.get(0);
      pigeonResult.setState(state == null ? null : EnumState.values()[(int) state]);
      return pigeonResult;
    }
  }

  private static class EnumApi2HostCodec extends StandardMessageCodec {
    public static final EnumApi2HostCodec INSTANCE = new EnumApi2HostCodec();

    private EnumApi2HostCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DataWithEnum.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DataWithEnum) {
        stream.write(128);
        writeValue(stream, ((DataWithEnum) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * This comment is to test api documentation comments.
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface EnumApi2Host {
    /** This comment is to test method documentation comments. */
    @NonNull
    DataWithEnum echo(@NonNull DataWithEnum data);

    /** The codec used by EnumApi2Host. */
    static MessageCodec<Object> getCodec() {
      return EnumApi2HostCodec.INSTANCE;
    }
    /** Sets up an instance of `EnumApi2Host` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, EnumApi2Host api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.EnumApi2Host.echo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  DataWithEnum dataArg = (DataWithEnum) args.get(0);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  DataWithEnum output = api.echo(dataArg);
                  wrapped.add(output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class EnumApi2FlutterCodec extends StandardMessageCodec {
    public static final EnumApi2FlutterCodec INSTANCE = new EnumApi2FlutterCodec();

    private EnumApi2FlutterCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DataWithEnum.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DataWithEnum) {
        stream.write(128);
        writeValue(stream, ((DataWithEnum) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * This comment is to test api documentation comments.
   *
   * <p>Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class EnumApi2Flutter {
    private final BinaryMessenger binaryMessenger;

    public EnumApi2Flutter(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by EnumApi2Flutter. */
    static MessageCodec<Object> getCodec() {
      return EnumApi2FlutterCodec.INSTANCE;
    }
    /** This comment is to test method documentation comments. */
    public void echo(@NonNull DataWithEnum dataArg, Reply<DataWithEnum> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.EnumApi2Flutter.echo", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            DataWithEnum output = (DataWithEnum) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
