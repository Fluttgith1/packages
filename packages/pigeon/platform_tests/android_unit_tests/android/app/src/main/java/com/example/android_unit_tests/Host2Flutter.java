// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Host2Flutter {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Host2FlutterSearchRequest {
    private @Nullable String query;

    public @Nullable String getQuery() {
      return query;
    }

    public void setQuery(@Nullable String setterArg) {
      this.query = setterArg;
    }

    public static final class Builder {
      private @Nullable String query;

      public @NonNull Builder setQuery(@Nullable String setterArg) {
        this.query = setterArg;
        return this;
      }

      public @NonNull Host2FlutterSearchRequest build() {
        Host2FlutterSearchRequest pigeonReturn = new Host2FlutterSearchRequest();
        pigeonReturn.setQuery(query);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(query);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull Host2FlutterSearchRequest fromList(@NonNull ArrayList<ArrayList> list) {
      Host2FlutterSearchRequest pigeonResult = new Host2FlutterSearchRequest();
      ArrayList<Object> unwrapped = list.get(0);

      Object query = unwrapped.get(0);
      pigeonResult.setQuery((String) query);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Host2FlutterSearchReply {
    private @Nullable String result;

    public @Nullable String getResult() {
      return result;
    }

    public void setResult(@Nullable String setterArg) {
      this.result = setterArg;
    }

    public static final class Builder {
      private @Nullable String result;

      public @NonNull Builder setResult(@Nullable String setterArg) {
        this.result = setterArg;
        return this;
      }

      public @NonNull Host2FlutterSearchReply build() {
        Host2FlutterSearchReply pigeonReturn = new Host2FlutterSearchReply();
        pigeonReturn.setResult(result);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(result);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull Host2FlutterSearchReply fromList(@NonNull ArrayList<ArrayList> list) {
      Host2FlutterSearchReply pigeonResult = new Host2FlutterSearchReply();
      ArrayList<Object> unwrapped = list.get(0);

      Object result = unwrapped.get(0);
      pigeonResult.setResult((String) result);
      return pigeonResult;
    }
  }

  private static class H2FApiCodec extends StandardMessageCodec {
    public static final H2FApiCodec INSTANCE = new H2FApiCodec();

    private H2FApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Host2FlutterSearchReply.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return Host2FlutterSearchRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Host2FlutterSearchReply) {
        stream.write(128);
        writeValue(stream, ((Host2FlutterSearchReply) value).toList());
      } else if (value instanceof Host2FlutterSearchRequest) {
        stream.write(129);
        writeValue(stream, ((Host2FlutterSearchRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class H2FApi {
    private final BinaryMessenger binaryMessenger;

    public H2FApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by H2FApi. */
    static MessageCodec<Object> getCodec() {
      return H2FApiCodec.INSTANCE;
    }

    public void search(
        @NonNull Host2FlutterSearchRequest requestArg, Reply<Host2FlutterSearchReply> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.H2FApi.search", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(requestArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Host2FlutterSearchReply output = (Host2FlutterSearchReply) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
