// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class JavaDoubleHostApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BridgeResponse {
    private @Nullable Long result;

    public @Nullable Long getResult() {
      return result;
    }

    public void setResult(@Nullable Long setterArg) {
      this.result = setterArg;
    }

    public static final class Builder {
      private @Nullable Long result;

      public @NonNull Builder setResult(@Nullable Long setterArg) {
        this.result = setterArg;
        return this;
      }

      public @NonNull BridgeResponse build() {
        BridgeResponse pigeonReturn = new BridgeResponse();
        pigeonReturn.setResult(result);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(result);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull BridgeResponse fromList(@NonNull ArrayList<ArrayList> list) {
      BridgeResponse pigeonResult = new BridgeResponse();
      ArrayList<Object> unwrapped = list.get(0);

      Object result = unwrapped.get(0);
      pigeonResult.setResult(
          (result == null)
              ? null
              : ((result instanceof Integer) ? (Integer) result : (Long) result));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class BridgeApi1Codec extends StandardMessageCodec {
    public static final BridgeApi1Codec INSTANCE = new BridgeApi1Codec();

    private BridgeApi1Codec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BridgeResponse.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BridgeResponse) {
        stream.write(128);
        writeValue(stream, ((BridgeResponse) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface BridgeApi1 {
    void call(Result<BridgeResponse> result);

    /** The codec used by BridgeApi1. */
    static MessageCodec<Object> getCodec() {
      return BridgeApi1Codec.INSTANCE;
    }
    /** Sets up an instance of `BridgeApi1` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BridgeApi1 api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.BridgeApi1.call", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  Result<BridgeResponse> resultCallback =
                      new Result<BridgeResponse>() {
                        public void success(BridgeResponse result) {
                          wrapped.add(result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          wrapped.add(wrappedError.get(0));
                          wrapped.add(wrappedError.get(1));
                          wrapped.add(wrappedError.get(2));
                          reply.reply(wrapped);
                        }
                      };

                  api.call(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                  reply.reply(wrapped);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class BridgeApi2Codec extends StandardMessageCodec {
    public static final BridgeApi2Codec INSTANCE = new BridgeApi2Codec();

    private BridgeApi2Codec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BridgeResponse.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BridgeResponse) {
        stream.write(128);
        writeValue(stream, ((BridgeResponse) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface BridgeApi2 {
    void call(Result<BridgeResponse> result);

    /** The codec used by BridgeApi2. */
    static MessageCodec<Object> getCodec() {
      return BridgeApi2Codec.INSTANCE;
    }
    /** Sets up an instance of `BridgeApi2` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BridgeApi2 api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.BridgeApi2.call", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  Result<BridgeResponse> resultCallback =
                      new Result<BridgeResponse>() {
                        public void success(BridgeResponse result) {
                          wrapped.add(result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          wrapped.add(wrappedError.get(0));
                          wrapped.add(wrappedError.get(1));
                          wrapped.add(wrappedError.get(2));
                          reply.reply(wrapped);
                        }
                      };

                  api.call(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                  reply.reply(wrapped);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
