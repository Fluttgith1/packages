// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.aaclarke.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class MessagePigeon {

  /**
   * This comment is to test enum documentation comments.
   *
   * <p>This comment also tests multiple line comments.
   */
  public enum MessageRequestState {
    PENDING(0),
    SUCCESS(1),
    FAILURE(2);

    private int index;

    private MessageRequestState(final int index) {
      this.index = index;
    }
  }

  /**
   * This comment is to test class documentation comments.
   *
   * <p>This comment also tests multiple line comments.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static class MessageSearchRequest {
    /** This comment is to test field documentation comments. */
    private @Nullable String query;

    public @Nullable String getQuery() {
      return query;
    }

    public void setQuery(@Nullable String setterArg) {
      this.query = setterArg;
    }

    /** This comment is to test field documentation comments. */
    private @Nullable Long anInt;

    public @Nullable Long getAnInt() {
      return anInt;
    }

    public void setAnInt(@Nullable Long setterArg) {
      this.anInt = setterArg;
    }

    /** This comment is to test field documentation comments. */
    private @Nullable Boolean aBool;

    public @Nullable Boolean getABool() {
      return aBool;
    }

    public void setABool(@Nullable Boolean setterArg) {
      this.aBool = setterArg;
    }

    public static final class Builder {
      private @Nullable String query;

      public @NonNull Builder setQuery(@Nullable String setterArg) {
        this.query = setterArg;
        return this;
      }

      private @Nullable Long anInt;

      public @NonNull Builder setAnInt(@Nullable Long setterArg) {
        this.anInt = setterArg;
        return this;
      }

      private @Nullable Boolean aBool;

      public @NonNull Builder setABool(@Nullable Boolean setterArg) {
        this.aBool = setterArg;
        return this;
      }

      public @NonNull MessageSearchRequest build() {
        MessageSearchRequest pigeonReturn = new MessageSearchRequest();
        pigeonReturn.setQuery(query);
        pigeonReturn.setAnInt(anInt);
        pigeonReturn.setABool(aBool);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(query);
      toListResult.add(anInt);
      toListResult.add(aBool);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull MessageSearchRequest fromList(@NonNull ArrayList<ArrayList> list) {
      MessageSearchRequest pigeonResult = new MessageSearchRequest();
      ArrayList<Object> unwrapped = list.get(0);

      Object query = unwrapped.get(0);
      pigeonResult.setQuery((String) query);
      Object anInt = unwrapped.get(1);
      pigeonResult.setAnInt(
          (anInt == null) ? null : ((anInt instanceof Integer) ? (Integer) anInt : (Long) anInt));
      Object aBool = unwrapped.get(2);
      pigeonResult.setABool((Boolean) aBool);
      return pigeonResult;
    }
  }

  /**
   * This comment is to test class documentation comments.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static class MessageSearchReply {
    /**
     * This comment is to test field documentation comments.
     *
     * <p>This comment also tests multiple line comments.
     */
    private @Nullable String result;

    public @Nullable String getResult() {
      return result;
    }

    public void setResult(@Nullable String setterArg) {
      this.result = setterArg;
    }

    /** This comment is to test field documentation comments. */
    private @Nullable String error;

    public @Nullable String getError() {
      return error;
    }

    public void setError(@Nullable String setterArg) {
      this.error = setterArg;
    }

    /** This comment is to test field documentation comments. */
    private @Nullable MessageRequestState state;

    public @Nullable MessageRequestState getState() {
      return state;
    }

    public void setState(@Nullable MessageRequestState setterArg) {
      this.state = setterArg;
    }

    public static final class Builder {
      private @Nullable String result;

      public @NonNull Builder setResult(@Nullable String setterArg) {
        this.result = setterArg;
        return this;
      }

      private @Nullable String error;

      public @NonNull Builder setError(@Nullable String setterArg) {
        this.error = setterArg;
        return this;
      }

      private @Nullable MessageRequestState state;

      public @NonNull Builder setState(@Nullable MessageRequestState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull MessageSearchReply build() {
        MessageSearchReply pigeonReturn = new MessageSearchReply();
        pigeonReturn.setResult(result);
        pigeonReturn.setError(error);
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(result);
      toListResult.add(error);
      toListResult.add(state == null ? null : state.index);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull MessageSearchReply fromList(@NonNull ArrayList<ArrayList> list) {
      MessageSearchReply pigeonResult = new MessageSearchReply();
      ArrayList<Object> unwrapped = list.get(0);

      Object result = unwrapped.get(0);
      pigeonResult.setResult((String) result);
      Object error = unwrapped.get(1);
      pigeonResult.setError((String) error);
      Object state = unwrapped.get(2);
      pigeonResult.setState(state == null ? null : MessageRequestState.values()[(int) state]);
      return pigeonResult;
    }
  }

  /**
   * This comment is to test class documentation comments.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static class MessageNested {
    /** This comment is to test field documentation comments. */
    private @Nullable MessageSearchRequest request;

    public @Nullable MessageSearchRequest getRequest() {
      return request;
    }

    public void setRequest(@Nullable MessageSearchRequest setterArg) {
      this.request = setterArg;
    }

    public static final class Builder {
      private @Nullable MessageSearchRequest request;

      public @NonNull Builder setRequest(@Nullable MessageSearchRequest setterArg) {
        this.request = setterArg;
        return this;
      }

      public @NonNull MessageNested build() {
        MessageNested pigeonReturn = new MessageNested();
        pigeonReturn.setRequest(request);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add((request == null) ? null : request.toList());
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull MessageNested fromList(@NonNull ArrayList<ArrayList> list) {
      MessageNested pigeonResult = new MessageNested();
      ArrayList<Object> unwrapped = list.get(0);

      Object request = unwrapped.get(0);
      pigeonResult.setRequest(
          (request == null) ? null : MessageSearchRequest.fromList((ArrayList<ArrayList>) request));
      return pigeonResult;
    }
  }

  private static class MessageApiCodec extends StandardMessageCodec {
    public static final MessageApiCodec INSTANCE = new MessageApiCodec();

    private MessageApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return MessageSearchReply.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return MessageSearchRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof MessageSearchReply) {
        stream.write(128);
        writeValue(stream, ((MessageSearchReply) value).toList());
      } else if (value instanceof MessageSearchRequest) {
        stream.write(129);
        writeValue(stream, ((MessageSearchRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * This comment is to test api documentation comments.
   *
   * <p>This comment also tests multiple line comments.
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface MessageApi {
    /**
     * This comment is to test documentation comments.
     *
     * <p>This comment also tests multiple line comments.
     */
    void initialize();
    /** This comment is to test method documentation comments. */
    @NonNull
    MessageSearchReply search(@NonNull MessageSearchRequest request);

    /** The codec used by MessageApi. */
    static MessageCodec<Object> getCodec() {
      return MessageApiCodec.INSTANCE;
    }
    /** Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MessageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  api.initialize();
                  wrapped.add(null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.search", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  MessageSearchRequest requestArg = (MessageSearchRequest) args.get(0);
                  if (requestArg == null) {
                    throw new NullPointerException("requestArg unexpectedly null.");
                  }
                  MessageSearchReply output = api.search(requestArg);
                  wrapped.add(output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MessageNestedApiCodec extends StandardMessageCodec {
    public static final MessageNestedApiCodec INSTANCE = new MessageNestedApiCodec();

    private MessageNestedApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return MessageNested.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return MessageSearchReply.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 130:
          return MessageSearchRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof MessageNested) {
        stream.write(128);
        writeValue(stream, ((MessageNested) value).toList());
      } else if (value instanceof MessageSearchReply) {
        stream.write(129);
        writeValue(stream, ((MessageSearchReply) value).toList());
      } else if (value instanceof MessageSearchRequest) {
        stream.write(130);
        writeValue(stream, ((MessageSearchRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * This comment is to test api documentation comments.
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface MessageNestedApi {
    /**
     * This comment is to test method documentation comments.
     *
     * <p>This comment also tests multiple line comments.
     */
    @NonNull
    MessageSearchReply search(@NonNull MessageNested nested);

    /** The codec used by MessageNestedApi. */
    static MessageCodec<Object> getCodec() {
      return MessageNestedApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MessageNestedApi` to handle messages through the `binaryMessenger`.
     */
    static void setup(BinaryMessenger binaryMessenger, MessageNestedApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageNestedApi.search", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  MessageNested nestedArg = (MessageNested) args.get(0);
                  if (nestedArg == null) {
                    throw new NullPointerException("nestedArg unexpectedly null.");
                  }
                  MessageSearchReply output = api.search(nestedArg);
                  wrapped.add(output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MessageFlutterSearchApiCodec extends StandardMessageCodec {
    public static final MessageFlutterSearchApiCodec INSTANCE = new MessageFlutterSearchApiCodec();

    private MessageFlutterSearchApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return MessageSearchReply.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return MessageSearchRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof MessageSearchReply) {
        stream.write(128);
        writeValue(stream, ((MessageSearchReply) value).toList());
      } else if (value instanceof MessageSearchRequest) {
        stream.write(129);
        writeValue(stream, ((MessageSearchRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * This comment is to test api documentation comments.
   *
   * <p>Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class MessageFlutterSearchApi {
    private final BinaryMessenger binaryMessenger;

    public MessageFlutterSearchApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by MessageFlutterSearchApi. */
    static MessageCodec<Object> getCodec() {
      return MessageFlutterSearchApiCodec.INSTANCE;
    }
    /** This comment is to test method documentation comments. */
    public void search(
        @NonNull MessageSearchRequest requestArg, Reply<MessageSearchReply> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.MessageFlutterSearchApi.search", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(requestArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            MessageSearchReply output = (MessageSearchReply) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
