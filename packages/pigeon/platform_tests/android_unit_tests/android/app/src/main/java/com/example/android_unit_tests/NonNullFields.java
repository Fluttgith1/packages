// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class NonNullFields {

  public enum ReplyType {
    SUCCESS(0),
    ERROR(1);

    private int index;

    private ReplyType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NonNullFieldSearchRequest {
    private @NonNull String query;

    public @NonNull String getQuery() {
      return query;
    }

    public void setQuery(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"query\" is null.");
      }
      this.query = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NonNullFieldSearchRequest() {}

    public static final class Builder {
      private @Nullable String query;

      public @NonNull Builder setQuery(@NonNull String setterArg) {
        this.query = setterArg;
        return this;
      }

      public @NonNull NonNullFieldSearchRequest build() {
        NonNullFieldSearchRequest pigeonReturn = new NonNullFieldSearchRequest();
        pigeonReturn.setQuery(query);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(query);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull NonNullFieldSearchRequest fromList(@NonNull ArrayList<ArrayList> list) {
      NonNullFieldSearchRequest pigeonResult = new NonNullFieldSearchRequest();
      ArrayList<Object> unwrapped = list.get(0);

      Object query = unwrapped.get(0);
      pigeonResult.setQuery((String) query);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ExtraData {
    private @NonNull String detailA;

    public @NonNull String getDetailA() {
      return detailA;
    }

    public void setDetailA(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"detailA\" is null.");
      }
      this.detailA = setterArg;
    }

    private @NonNull String detailB;

    public @NonNull String getDetailB() {
      return detailB;
    }

    public void setDetailB(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"detailB\" is null.");
      }
      this.detailB = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ExtraData() {}

    public static final class Builder {
      private @Nullable String detailA;

      public @NonNull Builder setDetailA(@NonNull String setterArg) {
        this.detailA = setterArg;
        return this;
      }

      private @Nullable String detailB;

      public @NonNull Builder setDetailB(@NonNull String setterArg) {
        this.detailB = setterArg;
        return this;
      }

      public @NonNull ExtraData build() {
        ExtraData pigeonReturn = new ExtraData();
        pigeonReturn.setDetailA(detailA);
        pigeonReturn.setDetailB(detailB);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(detailA);
      toListResult.add(detailB);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull ExtraData fromList(@NonNull ArrayList<ArrayList> list) {
      ExtraData pigeonResult = new ExtraData();
      ArrayList<Object> unwrapped = list.get(0);

      Object detailA = unwrapped.get(0);
      pigeonResult.setDetailA((String) detailA);
      Object detailB = unwrapped.get(1);
      pigeonResult.setDetailB((String) detailB);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NonNullFieldSearchReply {
    private @NonNull String result;

    public @NonNull String getResult() {
      return result;
    }

    public void setResult(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"result\" is null.");
      }
      this.result = setterArg;
    }

    private @NonNull String error;

    public @NonNull String getError() {
      return error;
    }

    public void setError(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"error\" is null.");
      }
      this.error = setterArg;
    }

    private @NonNull List<Long> indices;

    public @NonNull List<Long> getIndices() {
      return indices;
    }

    public void setIndices(@NonNull List<Long> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"indices\" is null.");
      }
      this.indices = setterArg;
    }

    private @NonNull ExtraData extraData;

    public @NonNull ExtraData getExtraData() {
      return extraData;
    }

    public void setExtraData(@NonNull ExtraData setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"extraData\" is null.");
      }
      this.extraData = setterArg;
    }

    private @NonNull ReplyType type;

    public @NonNull ReplyType getType() {
      return type;
    }

    public void setType(@NonNull ReplyType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NonNullFieldSearchReply() {}

    public static final class Builder {
      private @Nullable String result;

      public @NonNull Builder setResult(@NonNull String setterArg) {
        this.result = setterArg;
        return this;
      }

      private @Nullable String error;

      public @NonNull Builder setError(@NonNull String setterArg) {
        this.error = setterArg;
        return this;
      }

      private @Nullable List<Long> indices;

      public @NonNull Builder setIndices(@NonNull List<Long> setterArg) {
        this.indices = setterArg;
        return this;
      }

      private @Nullable ExtraData extraData;

      public @NonNull Builder setExtraData(@NonNull ExtraData setterArg) {
        this.extraData = setterArg;
        return this;
      }

      private @Nullable ReplyType type;

      public @NonNull Builder setType(@NonNull ReplyType setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull NonNullFieldSearchReply build() {
        NonNullFieldSearchReply pigeonReturn = new NonNullFieldSearchReply();
        pigeonReturn.setResult(result);
        pigeonReturn.setError(error);
        pigeonReturn.setIndices(indices);
        pigeonReturn.setExtraData(extraData);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(result);
      toListResult.add(error);
      toListResult.add(indices);
      toListResult.add((extraData == null) ? null : extraData.toList());
      toListResult.add(type == null ? null : type.index);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull NonNullFieldSearchReply fromList(@NonNull ArrayList<ArrayList> list) {
      NonNullFieldSearchReply pigeonResult = new NonNullFieldSearchReply();
      ArrayList<Object> unwrapped = list.get(0);

      Object result = unwrapped.get(0);
      pigeonResult.setResult((String) result);
      Object error = unwrapped.get(1);
      pigeonResult.setError((String) error);
      Object indices = unwrapped.get(2);
      pigeonResult.setIndices((List<Long>) indices);
      Object extraData = unwrapped.get(3);
      pigeonResult.setExtraData(
          (extraData == null) ? null : ExtraData.fromList((ArrayList<ArrayList>) extraData));
      Object type = unwrapped.get(4);
      pigeonResult.setType(type == null ? null : ReplyType.values()[(int) type]);
      return pigeonResult;
    }
  }

  private static class NonNullFieldHostApiCodec extends StandardMessageCodec {
    public static final NonNullFieldHostApiCodec INSTANCE = new NonNullFieldHostApiCodec();

    private NonNullFieldHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ExtraData.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return NonNullFieldSearchReply.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 130:
          return NonNullFieldSearchRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ExtraData) {
        stream.write(128);
        writeValue(stream, ((ExtraData) value).toList());
      } else if (value instanceof NonNullFieldSearchReply) {
        stream.write(129);
        writeValue(stream, ((NonNullFieldSearchReply) value).toList());
      } else if (value instanceof NonNullFieldSearchRequest) {
        stream.write(130);
        writeValue(stream, ((NonNullFieldSearchRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NonNullFieldHostApi {
    @NonNull
    NonNullFieldSearchReply search(@NonNull NonNullFieldSearchRequest nested);

    /** The codec used by NonNullFieldHostApi. */
    static MessageCodec<Object> getCodec() {
      return NonNullFieldHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `NonNullFieldHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(BinaryMessenger binaryMessenger, NonNullFieldHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NonNullFieldHostApi.search", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  NonNullFieldSearchRequest nestedArg = (NonNullFieldSearchRequest) args.get(0);
                  if (nestedArg == null) {
                    throw new NullPointerException("nestedArg unexpectedly null.");
                  }
                  NonNullFieldSearchReply output = api.search(nestedArg);
                  wrapped.add(output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class NonNullFieldFlutterApiCodec extends StandardMessageCodec {
    public static final NonNullFieldFlutterApiCodec INSTANCE = new NonNullFieldFlutterApiCodec();

    private NonNullFieldFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ExtraData.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return NonNullFieldSearchReply.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 130:
          return NonNullFieldSearchRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ExtraData) {
        stream.write(128);
        writeValue(stream, ((ExtraData) value).toList());
      } else if (value instanceof NonNullFieldSearchReply) {
        stream.write(129);
        writeValue(stream, ((NonNullFieldSearchReply) value).toList());
      } else if (value instanceof NonNullFieldSearchRequest) {
        stream.write(130);
        writeValue(stream, ((NonNullFieldSearchRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class NonNullFieldFlutterApi {
    private final BinaryMessenger binaryMessenger;

    public NonNullFieldFlutterApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by NonNullFieldFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return NonNullFieldFlutterApiCodec.INSTANCE;
    }

    public void search(
        @NonNull NonNullFieldSearchRequest requestArg, Reply<NonNullFieldSearchReply> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NonNullFieldFlutterApi.search", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(requestArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            NonNullFieldSearchReply output = (NonNullFieldSearchReply) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
