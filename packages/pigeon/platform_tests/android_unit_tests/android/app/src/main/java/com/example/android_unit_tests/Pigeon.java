// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum AndroidLoadingState {
    LOADING(0),
    COMPLETE(1);

    private int index;

    private AndroidLoadingState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AndroidSetRequest {
    private @Nullable Long value;

    public @Nullable Long getValue() {
      return value;
    }

    public void setValue(@Nullable Long setterArg) {
      this.value = setterArg;
    }

    private @Nullable AndroidLoadingState state;

    public @Nullable AndroidLoadingState getState() {
      return state;
    }

    public void setState(@Nullable AndroidLoadingState setterArg) {
      this.state = setterArg;
    }

    public static final class Builder {
      private @Nullable Long value;

      public @NonNull Builder setValue(@Nullable Long setterArg) {
        this.value = setterArg;
        return this;
      }

      private @Nullable AndroidLoadingState state;

      public @NonNull Builder setState(@Nullable AndroidLoadingState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull AndroidSetRequest build() {
        AndroidSetRequest pigeonReturn = new AndroidSetRequest();
        pigeonReturn.setValue(value);
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(value);
      toListResult.add(state == null ? null : state.index);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull AndroidSetRequest fromList(@NonNull ArrayList<ArrayList> list) {
      AndroidSetRequest pigeonResult = new AndroidSetRequest();
      ArrayList<Object> unwrapped = list.get(0);

      Object value = unwrapped.get(0);
      pigeonResult.setValue(
          (value == null) ? null : ((value instanceof Integer) ? (Integer) value : (Long) value));
      Object state = unwrapped.get(1);
      pigeonResult.setState(state == null ? null : AndroidLoadingState.values()[(int) state]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AndroidNestedRequest {
    private @Nullable String context;

    public @Nullable String getContext() {
      return context;
    }

    public void setContext(@Nullable String setterArg) {
      this.context = setterArg;
    }

    private @Nullable AndroidSetRequest request;

    public @Nullable AndroidSetRequest getRequest() {
      return request;
    }

    public void setRequest(@Nullable AndroidSetRequest setterArg) {
      this.request = setterArg;
    }

    public static final class Builder {
      private @Nullable String context;

      public @NonNull Builder setContext(@Nullable String setterArg) {
        this.context = setterArg;
        return this;
      }

      private @Nullable AndroidSetRequest request;

      public @NonNull Builder setRequest(@Nullable AndroidSetRequest setterArg) {
        this.request = setterArg;
        return this;
      }

      public @NonNull AndroidNestedRequest build() {
        AndroidNestedRequest pigeonReturn = new AndroidNestedRequest();
        pigeonReturn.setContext(context);
        pigeonReturn.setRequest(request);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(context);
      toListResult.add((request == null) ? null : request.toList());
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull AndroidNestedRequest fromList(@NonNull ArrayList<ArrayList> list) {
      AndroidNestedRequest pigeonResult = new AndroidNestedRequest();
      ArrayList<Object> unwrapped = list.get(0);

      Object context = unwrapped.get(0);
      pigeonResult.setContext((String) context);
      Object request = unwrapped.get(1);
      pigeonResult.setRequest(
          (request == null) ? null : AndroidSetRequest.fromList((ArrayList<ArrayList>) request));
      return pigeonResult;
    }
  }

  private static class AndroidApiCodec extends StandardMessageCodec {
    public static final AndroidApiCodec INSTANCE = new AndroidApiCodec();

    private AndroidApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AndroidSetRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AndroidSetRequest) {
        stream.write(128);
        writeValue(stream, ((AndroidSetRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AndroidApi {
    void setValue(@NonNull AndroidSetRequest request);

    /** The codec used by AndroidApi. */
    static MessageCodec<Object> getCodec() {
      return AndroidApiCodec.INSTANCE;
    }
    /** Sets up an instance of `AndroidApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AndroidApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AndroidApi.setValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  AndroidSetRequest requestArg = (AndroidSetRequest) args.get(0);
                  if (requestArg == null) {
                    throw new NullPointerException("requestArg unexpectedly null.");
                  }
                  api.setValue(requestArg);
                  wrapped.add(null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class AndroidNestedApiCodec extends StandardMessageCodec {
    public static final AndroidNestedApiCodec INSTANCE = new AndroidNestedApiCodec();

    private AndroidNestedApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AndroidNestedRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        case (byte) 129:
          return AndroidSetRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AndroidNestedRequest) {
        stream.write(128);
        writeValue(stream, ((AndroidNestedRequest) value).toList());
      } else if (value instanceof AndroidSetRequest) {
        stream.write(129);
        writeValue(stream, ((AndroidSetRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AndroidNestedApi {
    void setValueWithContext(@NonNull AndroidNestedRequest request);

    /** The codec used by AndroidNestedApi. */
    static MessageCodec<Object> getCodec() {
      return AndroidNestedApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `AndroidNestedApi` to handle messages through the `binaryMessenger`.
     */
    static void setup(BinaryMessenger binaryMessenger, AndroidNestedApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.AndroidNestedApi.setValueWithContext",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  AndroidNestedRequest requestArg = (AndroidNestedRequest) args.get(0);
                  if (requestArg == null) {
                    throw new NullPointerException("requestArg unexpectedly null.");
                  }
                  api.setValueWithContext(requestArg);
                  wrapped.add(null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
