// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PigeonList {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TestMessage {
    private @Nullable List<Object> testList;

    public @Nullable List<Object> getTestList() {
      return testList;
    }

    public void setTestList(@Nullable List<Object> setterArg) {
      this.testList = setterArg;
    }

    public static final class Builder {
      private @Nullable List<Object> testList;

      public @NonNull Builder setTestList(@Nullable List<Object> setterArg) {
        this.testList = setterArg;
        return this;
      }

      public @NonNull TestMessage build() {
        TestMessage pigeonReturn = new TestMessage();
        pigeonReturn.setTestList(testList);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(testList);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull TestMessage fromList(@NonNull ArrayList<ArrayList> list) {
      TestMessage pigeonResult = new TestMessage();
      ArrayList<Object> unwrapped = list.get(0);

      Object testList = unwrapped.get(0);
      pigeonResult.setTestList((List<Object>) testList);
      return pigeonResult;
    }
  }

  private static class TestApiCodec extends StandardMessageCodec {
    public static final TestApiCodec INSTANCE = new TestApiCodec();

    private TestApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return TestMessage.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof TestMessage) {
        stream.write(128);
        writeValue(stream, ((TestMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface TestApi {
    void test(@NonNull TestMessage msg);

    /** The codec used by TestApi. */
    static MessageCodec<Object> getCodec() {
      return TestApiCodec.INSTANCE;
    }
    /** Sets up an instance of `TestApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TestApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.TestApi.test", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList wrapped = new ArrayList<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  TestMessage msgArg = (TestMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.test(msgArg);
                  wrapped.add(null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped.add(wrappedError.get(0));
                  wrapped.add(wrappedError.get(1));
                  wrapped.add(wrappedError.get(2));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class EchoApiCodec extends StandardMessageCodec {
    public static final EchoApiCodec INSTANCE = new EchoApiCodec();

    private EchoApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return TestMessage.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof TestMessage) {
        stream.write(128);
        writeValue(stream, ((TestMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class EchoApi {
    private final BinaryMessenger binaryMessenger;

    public EchoApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by EchoApi. */
    static MessageCodec<Object> getCodec() {
      return EchoApiCodec.INSTANCE;
    }

    public void echo(@NonNull TestMessage msgArg, Reply<TestMessage> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EchoApi.echo", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            TestMessage output = (TestMessage) channelReply;
            callback.reply(output);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
