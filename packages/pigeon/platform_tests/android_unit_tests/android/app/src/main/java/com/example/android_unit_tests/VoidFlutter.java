// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class VoidFlutter {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VoidFlutterSetRequest {
    private @Nullable Long value;

    public @Nullable Long getValue() {
      return value;
    }

    public void setValue(@Nullable Long setterArg) {
      this.value = setterArg;
    }

    public static final class Builder {
      private @Nullable Long value;

      public @NonNull Builder setValue(@Nullable Long setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull VoidFlutterSetRequest build() {
        VoidFlutterSetRequest pigeonReturn = new VoidFlutterSetRequest();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<ArrayList> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>();
      toListResult.add(value);
      ArrayList<ArrayList> wrapped = new ArrayList<ArrayList>();
      wrapped.add(toListResult);
      return wrapped;
    }

    static @NonNull VoidFlutterSetRequest fromList(@NonNull ArrayList<ArrayList> list) {
      VoidFlutterSetRequest pigeonResult = new VoidFlutterSetRequest();
      ArrayList<Object> unwrapped = list.get(0);

      Object value = unwrapped.get(0);
      pigeonResult.setValue(
          (value == null) ? null : ((value instanceof Integer) ? (Integer) value : (Long) value));
      return pigeonResult;
    }
  }

  private static class VoidFlutterApiCodec extends StandardMessageCodec {
    public static final VoidFlutterApiCodec INSTANCE = new VoidFlutterApiCodec();

    private VoidFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return VoidFlutterSetRequest.fromList((ArrayList<ArrayList>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof VoidFlutterSetRequest) {
        stream.write(128);
        writeValue(stream, ((VoidFlutterSetRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class VoidFlutterApi {
    private final BinaryMessenger binaryMessenger;

    public VoidFlutterApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by VoidFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return VoidFlutterApiCodec.INSTANCE;
    }

    public void setValue(@NonNull VoidFlutterSetRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.VoidFlutterApi.setValue", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(requestArg)),
          channelReply -> {
            callback.reply(null);
          });
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>();
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
