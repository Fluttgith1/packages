// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
}

class BackgroundApi2Host {
  /// Constructor for [BackgroundApi2Host].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BackgroundApi2Host(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeon_binaryMessenger = binaryMessenger,
        pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeon_messageChannelSuffix;

  Future<int> add(int x, int y) async {
    final String pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.BackgroundApi2Host.add$pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeon_channel =
        BasicMessageChannel<Object?>(
      pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? pigeon_replyList =
        await pigeon_channel.send(<Object?>[x, y]) as List<Object?>?;
    if (pigeon_replyList == null) {
      throw _createConnectionError(pigeon_channelName);
    } else if (pigeon_replyList.length > 1) {
      throw PlatformException(
        code: pigeon_replyList[0]! as String,
        message: pigeon_replyList[1] as String?,
        details: pigeon_replyList[2],
      );
    } else if (pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeon_replyList[0] as int?)!;
    }
  }
}
