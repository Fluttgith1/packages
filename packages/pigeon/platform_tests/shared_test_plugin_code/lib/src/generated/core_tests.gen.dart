// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers, camel_case_types

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart'
    show ReadBuffer, WriteBuffer, immutable, protected;
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart' show WidgetsFlutterBinding;

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// An immutable object that can provide functional copies of itself.
///
/// All implementers are expected to be immutable as defined by the annotation.
@immutable
mixin Pigeon_Copyable {
  /// Instantiates and returns a functionally identical object to oneself.
  ///
  /// Outside of tests, this method should only ever be called by
  /// [Pigeon_InstanceManager].
  ///
  /// Subclasses should always override their parent's implementation of this
  /// method.
  @protected
  Pigeon_Copyable pigeon_copy();
}

/// Maintains instances used to communicate with the native objects they
/// represent.
///
/// Added instances are stored as weak references and their copies are stored
/// as strong references to maintain access to their variables and callback
/// methods. Both are stored with the same identifier.
///
/// When a weak referenced instance becomes inaccessible,
/// [onWeakReferenceRemoved] is called with its associated identifier.
///
/// If an instance is retrieved and has the possibility to be used,
/// (e.g. calling [getInstanceWithWeakReference]) a copy of the strong reference
/// is added as a weak reference with the same identifier. This prevents a
/// scenario where the weak referenced instance was released and then later
/// returned by the host platform.
class Pigeon_InstanceManager {
  /// Constructs an [Pigeon_InstanceManager].
  Pigeon_InstanceManager({required void Function(int) onWeakReferenceRemoved}) {
    this.onWeakReferenceRemoved = (int identifier) {
      _weakInstances.remove(identifier);
      onWeakReferenceRemoved(identifier);
    };
    _finalizer = Finalizer<int>(this.onWeakReferenceRemoved);
  }

  // Identifiers are locked to a specific range to avoid collisions with objects
  // created simultaneously by the host platform.
  // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
  // 0 <= n < 2^16.
  static const int _maxDartCreatedIdentifier = 65536;

  static final Pigeon_InstanceManager instance = _initInstance();

  // Expando is used because it doesn't prevent its keys from becoming
  // inaccessible. This allows the manager to efficiently retrieve an identifier
  // of an instance without holding a strong reference to that instance.
  //
  // It also doesn't use `==` to search for identifiers, which would lead to an
  // infinite loop when comparing an object to its copy. (i.e. which was caused
  // by calling instanceManager.getIdentifier() inside of `==` while this was a
  // HashMap).
  final Expando<int> _identifiers = Expando<int>();
  final Map<int, WeakReference<Pigeon_Copyable>> _weakInstances =
      <int, WeakReference<Pigeon_Copyable>>{};
  final Map<int, Pigeon_Copyable> _strongInstances = <int, Pigeon_Copyable>{};
  late final Finalizer<int> _finalizer;
  int _nextIdentifier = 0;

  /// Called when a weak referenced instance is removed by [removeWeakReference]
  /// or becomes inaccessible.
  late final void Function(int) onWeakReferenceRemoved;

  static Pigeon_InstanceManager _initInstance() {
    WidgetsFlutterBinding.ensureInitialized();
    final _Pigeon_InstanceManagerApi api = _Pigeon_InstanceManagerApi();
    // Clears the native `Pigeon_InstanceManager` on the initial use of the Dart one.
    api.clear();
    final Pigeon_InstanceManager instanceManager = Pigeon_InstanceManager(
      onWeakReferenceRemoved: (int identifier) {
        api.removeStrongReference(identifier);
      },
    );
    _Pigeon_InstanceManagerApi.setUpMessageHandlers(
        instanceManager: instanceManager);
    ProxyIntegrationCoreApi.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    ProxyApiSuperClass.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    ProxyApiInterface.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    return instanceManager;
  }

  /// Adds a new instance that was instantiated by Dart.
  ///
  /// In other words, Dart wants to add a new instance that will represent
  /// an object that will be instantiated on the host platform.
  ///
  /// Throws assertion error if the instance has already been added.
  ///
  /// Returns the randomly generated id of the [instance] added.
  int addDartCreatedInstance(Pigeon_Copyable instance) {
    final int identifier = _nextUniqueIdentifier();
    _addInstanceWithIdentifier(instance, identifier);
    return identifier;
  }

  /// Removes the instance, if present, and call [onWeakReferenceRemoved] with
  /// its identifier.
  ///
  /// Returns the identifier associated with the removed instance. Otherwise,
  /// `null` if the instance was not found in this manager.
  ///
  /// This does not remove the strong referenced instance associated with
  /// [instance]. This can be done with [remove].
  int? removeWeakReference(Pigeon_Copyable instance) {
    final int? identifier = getIdentifier(instance);
    if (identifier == null) {
      return null;
    }

    _identifiers[instance] = null;
    _finalizer.detach(instance);
    onWeakReferenceRemoved(identifier);

    return identifier;
  }

  /// Removes [identifier] and its associated strongly referenced instance, if
  /// present, from the manager.
  ///
  /// Returns the strong referenced instance associated with [identifier] before
  /// it was removed. Returns `null` if [identifier] was not associated with
  /// any strong reference.
  ///
  /// This does not remove the weak referenced instance associated with
  /// [identifier]. This can be done with [removeWeakReference].
  T? remove<T extends Pigeon_Copyable>(int identifier) {
    return _strongInstances.remove(identifier) as T?;
  }

  /// Retrieves the instance associated with identifier.
  ///
  /// The value returned is chosen from the following order:
  ///
  /// 1. A weakly referenced instance associated with identifier.
  /// 2. If the only instance associated with identifier is a strongly
  /// referenced instance, a copy of the instance is added as a weak reference
  /// with the same identifier. Returning the newly created copy.
  /// 3. If no instance is associated with identifier, returns null.
  ///
  /// This method also expects the host `InstanceManager` to have a strong
  /// reference to the instance the identifier is associated with.
  T? getInstanceWithWeakReference<T extends Pigeon_Copyable>(int identifier) {
    final Pigeon_Copyable? weakInstance = _weakInstances[identifier]?.target;

    if (weakInstance == null) {
      final Pigeon_Copyable? strongInstance = _strongInstances[identifier];
      if (strongInstance != null) {
        final Pigeon_Copyable copy = strongInstance.pigeon_copy();
        _identifiers[copy] = identifier;
        _weakInstances[identifier] = WeakReference<Pigeon_Copyable>(copy);
        _finalizer.attach(copy, identifier, detach: copy);
        return copy as T;
      }
      return strongInstance as T?;
    }

    return weakInstance as T;
  }

  /// Retrieves the identifier associated with instance.
  int? getIdentifier(Pigeon_Copyable instance) {
    return _identifiers[instance];
  }

  /// Adds a new instance that was instantiated by the host platform.
  ///
  /// In other words, the host platform wants to add a new instance that
  /// represents an object on the host platform. Stored with [identifier].
  ///
  /// Throws assertion error if the instance or its identifier has already been
  /// added.
  ///
  /// Returns unique identifier of the [instance] added.
  void addHostCreatedInstance(Pigeon_Copyable instance, int identifier) {
    _addInstanceWithIdentifier(instance, identifier);
  }

  void _addInstanceWithIdentifier(Pigeon_Copyable instance, int identifier) {
    assert(!containsIdentifier(identifier));
    assert(getIdentifier(instance) == null);
    assert(identifier >= 0);

    _identifiers[instance] = identifier;
    _weakInstances[identifier] = WeakReference<Pigeon_Copyable>(instance);
    _finalizer.attach(instance, identifier, detach: instance);

    final Pigeon_Copyable copy = instance.pigeon_copy();
    _identifiers[copy] = identifier;
    _strongInstances[identifier] = copy;
  }

  /// Whether this manager contains the given [identifier].
  bool containsIdentifier(int identifier) {
    return _weakInstances.containsKey(identifier) ||
        _strongInstances.containsKey(identifier);
  }

  int _nextUniqueIdentifier() {
    late int identifier;
    do {
      identifier = _nextIdentifier;
      _nextIdentifier = (_nextIdentifier + 1) % _maxDartCreatedIdentifier;
    } while (containsIdentifier(identifier));
    return identifier;
  }
}

/// Generated API for managing the Dart and native `Pigeon_InstanceManager`s.
class _Pigeon_InstanceManagerApi {
  /// Constructor for [_Pigeon_InstanceManagerApi ].
  _Pigeon_InstanceManagerApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      StandardMessageCodec();

  static void setUpMessageHandlers({
    BinaryMessenger? binaryMessenger,
    Pigeon_InstanceManager? instanceManager,
  }) {
    const String channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.Pigeon_InstanceManagerApi.removeStrongReference';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      pigeonChannelCodec,
      binaryMessenger: binaryMessenger,
    );
    channel.setMessageHandler((Object? message) async {
      assert(
        message != null,
        'Argument for $channelName was null.',
      );
      final int? identifier = message as int?;
      assert(
        identifier != null,
        r'Argument for $channelName, expected non-null int.',
      );
      (instanceManager ?? Pigeon_InstanceManager.instance).remove(identifier!);
      return;
    });
  }

  Future<void> removeStrongReference(int identifier) async {
    const String channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.Pigeon_InstanceManagerApi.removeStrongReference';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      pigeonChannelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(identifier) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Clear the native `Pigeon_InstanceManager`.
  ///
  /// This is typically called after a hot restart.
  Future<void> clear() async {
    const String channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.Pigeon_InstanceManagerApi.clear';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      pigeonChannelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _Pigeon_ProxyApiBaseCodec extends StandardMessageCodec {
  const _Pigeon_ProxyApiBaseCodec(this.instanceManager);

  final Pigeon_InstanceManager instanceManager;

  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Pigeon_Copyable) {
      buffer.putUint8(128);
      writeValue(buffer, instanceManager.getIdentifier(value));
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return instanceManager
            .getInstanceWithWeakReference(readValue(buffer)! as int);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

enum AnEnum {
  one,
  two,
  three,
}

/// A class containing all supported types.
class AllTypes {
  AllTypes({
    this.aBool = false,
    this.anInt = 0,
    this.anInt64 = 0,
    this.aDouble = 0,
    required this.aByteArray,
    required this.a4ByteArray,
    required this.a8ByteArray,
    required this.aFloatArray,
    this.aList = const <Object?>[],
    this.aMap = const <String?, Object?>{},
    this.anEnum = AnEnum.one,
    this.aString = '',
    this.anObject = 0,
  });

  bool aBool;

  int anInt;

  int anInt64;

  double aDouble;

  Uint8List aByteArray;

  Int32List a4ByteArray;

  Int64List a8ByteArray;

  Float64List aFloatArray;

  List<Object?> aList;

  Map<Object?, Object?> aMap;

  AnEnum anEnum;

  String aString;

  Object anObject;

  Object encode() {
    return <Object?>[
      aBool,
      anInt,
      anInt64,
      aDouble,
      aByteArray,
      a4ByteArray,
      a8ByteArray,
      aFloatArray,
      aList,
      aMap,
      anEnum.index,
      aString,
      anObject,
    ];
  }

  static AllTypes decode(Object result) {
    result as List<Object?>;
    return AllTypes(
      aBool: result[0]! as bool,
      anInt: result[1]! as int,
      anInt64: result[2]! as int,
      aDouble: result[3]! as double,
      aByteArray: result[4]! as Uint8List,
      a4ByteArray: result[5]! as Int32List,
      a8ByteArray: result[6]! as Int64List,
      aFloatArray: result[7]! as Float64List,
      aList: result[8]! as List<Object?>,
      aMap: result[9]! as Map<Object?, Object?>,
      anEnum: AnEnum.values[result[10]! as int],
      aString: result[11]! as String,
      anObject: result[12]!,
    );
  }
}

/// A class containing all supported nullable types.
class AllNullableTypes {
  AllNullableTypes({
    this.aNullableBool,
    this.aNullableInt,
    this.aNullableInt64,
    this.aNullableDouble,
    this.aNullableByteArray,
    this.aNullable4ByteArray,
    this.aNullable8ByteArray,
    this.aNullableFloatArray,
    this.aNullableList,
    this.aNullableMap,
    this.nullableNestedList,
    this.nullableMapWithAnnotations,
    this.nullableMapWithObject,
    this.aNullableEnum,
    this.aNullableString,
    this.aNullableObject,
  });

  bool? aNullableBool;

  int? aNullableInt;

  int? aNullableInt64;

  double? aNullableDouble;

  Uint8List? aNullableByteArray;

  Int32List? aNullable4ByteArray;

  Int64List? aNullable8ByteArray;

  Float64List? aNullableFloatArray;

  List<Object?>? aNullableList;

  Map<Object?, Object?>? aNullableMap;

  List<List<bool?>?>? nullableNestedList;

  Map<String?, String?>? nullableMapWithAnnotations;

  Map<String?, Object?>? nullableMapWithObject;

  AnEnum? aNullableEnum;

  String? aNullableString;

  Object? aNullableObject;

  Object encode() {
    return <Object?>[
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableByteArray,
      aNullable4ByteArray,
      aNullable8ByteArray,
      aNullableFloatArray,
      aNullableList,
      aNullableMap,
      nullableNestedList,
      nullableMapWithAnnotations,
      nullableMapWithObject,
      aNullableEnum?.index,
      aNullableString,
      aNullableObject,
    ];
  }

  static AllNullableTypes decode(Object result) {
    result as List<Object?>;
    return AllNullableTypes(
      aNullableBool: result[0] as bool?,
      aNullableInt: result[1] as int?,
      aNullableInt64: result[2] as int?,
      aNullableDouble: result[3] as double?,
      aNullableByteArray: result[4] as Uint8List?,
      aNullable4ByteArray: result[5] as Int32List?,
      aNullable8ByteArray: result[6] as Int64List?,
      aNullableFloatArray: result[7] as Float64List?,
      aNullableList: result[8] as List<Object?>?,
      aNullableMap: result[9] as Map<Object?, Object?>?,
      nullableNestedList: (result[10] as List<Object?>?)?.cast<List<bool?>?>(),
      nullableMapWithAnnotations:
          (result[11] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      nullableMapWithObject:
          (result[12] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      aNullableEnum:
          result[13] != null ? AnEnum.values[result[13]! as int] : null,
      aNullableString: result[14] as String?,
      aNullableObject: result[15],
    );
  }
}

/// A class for testing nested class handling.
///
/// This is needed to test nested nullable and non-nullable classes,
/// `AllNullableTypes` is non-nullable here as it is easier to instantiate
/// than `AllTypes` when testing doesn't require both (ie. testing null classes).
class AllClassesWrapper {
  AllClassesWrapper({
    required this.allNullableTypes,
    this.allTypes,
  });

  AllNullableTypes allNullableTypes;

  AllTypes? allTypes;

  Object encode() {
    return <Object?>[
      allNullableTypes.encode(),
      allTypes?.encode(),
    ];
  }

  static AllClassesWrapper decode(Object result) {
    result as List<Object?>;
    return AllClassesWrapper(
      allNullableTypes: AllNullableTypes.decode(result[0]! as List<Object?>),
      allTypes: result[1] != null
          ? AllTypes.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

/// A data class containing a List, used in unit tests.
class TestMessage {
  TestMessage({
    this.testList,
  });

  List<Object?>? testList;

  Object encode() {
    return <Object?>[
      testList,
    ];
  }

  static TestMessage decode(Object result) {
    result as List<Object?>;
    return TestMessage(
      testList: result[0] as List<Object?>?,
    );
  }
}

class _HostIntegrationCoreApiCodec extends StandardMessageCodec {
  const _HostIntegrationCoreApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AllClassesWrapper) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AllNullableTypes) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AllTypes) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is TestMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AllClassesWrapper.decode(readValue(buffer)!);
      case 129:
        return AllNullableTypes.decode(readValue(buffer)!);
      case 130:
        return AllTypes.decode(readValue(buffer)!);
      case 131:
        return TestMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// The core interface that each host language plugin must implement in
/// platform_test integration tests.
class HostIntegrationCoreApi {
  /// Constructor for [HostIntegrationCoreApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostIntegrationCoreApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      _HostIntegrationCoreApiCodec();

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  Future<void> noop() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.noop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns the passed object, to test serialization and deserialization.
  Future<AllTypes> echoAllTypes(AllTypes everything) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAllTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[everything]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllTypes?)!;
    }
  }

  /// Returns an error, to test error handling.
  Future<Object?> throwError() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns an error from a void function, to test error handling.
  Future<void> throwErrorFromVoid() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwErrorFromVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns a Flutter error, to test error handling.
  Future<Object?> throwFlutterError() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwFlutterError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns passed in int.
  Future<int> echoInt(int anInt) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  /// Returns passed in double.
  Future<double> echoDouble(double aDouble) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  /// Returns the passed in boolean.
  Future<bool> echoBool(bool aBool) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aBool]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  /// Returns the passed in string.
  Future<String> echoString(String aString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  /// Returns the passed in Uint8List.
  Future<Uint8List> echoUint8List(Uint8List aUint8List) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aUint8List]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  /// Returns the passed in generic Object.
  Future<Object> echoObject(Object anObject) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anObject]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return __pigeon_replyList[0]!;
    }
  }

  /// Returns the passed list, to test serialization and deserialization.
  Future<List<Object?>> echoList(List<Object?> aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  /// Returns the passed map, to test serialization and deserialization.
  Future<Map<String?, Object?>> echoMap(Map<String?, Object?> aMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }

  /// Returns the passed map to test nested class serialization and deserialization.
  Future<AllClassesWrapper> echoClassWrapper(AllClassesWrapper wrapper) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoClassWrapper';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[wrapper]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllClassesWrapper?)!;
    }
  }

  /// Returns the passed enum to test serialization and deserialization.
  Future<AnEnum> echoEnum(AnEnum anEnum) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anEnum.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Returns the default string.
  Future<String> echoNamedDefaultString({String aString = 'default'}) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNamedDefaultString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  /// Returns passed in double.
  Future<double> echoOptionalDefaultDouble([double aDouble = 3.14]) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoOptionalDefaultDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  /// Returns passed in int.
  Future<int> echoRequiredInt({required int anInt}) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoRequiredInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  /// Returns the passed object, to test serialization and deserialization.
  Future<AllNullableTypes?> echoAllNullableTypes(
      AllNullableTypes? everything) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAllNullableTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[everything]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as AllNullableTypes?);
    }
  }

  /// Returns the inner `aString` value from the wrapped object, to test
  /// sending of nested objects.
  Future<String?> extractNestedNullableString(AllClassesWrapper wrapper) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.extractNestedNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[wrapper]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  /// Returns the inner `aString` value from the wrapped object, to test
  /// sending of nested objects.
  Future<AllClassesWrapper> createNestedNullableString(
      String? nullableString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.createNestedNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[nullableString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllClassesWrapper?)!;
    }
  }

  /// Returns passed in arguments of multiple types.
  Future<AllNullableTypes> sendMultipleNullableTypes(
      bool? aNullableBool, int? aNullableInt, String? aNullableString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.sendMultipleNullableTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[aNullableBool, aNullableInt, aNullableString])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllNullableTypes?)!;
    }
  }

  /// Returns passed in int.
  Future<int?> echoNullableInt(int? aNullableInt) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aNullableInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  /// Returns passed in double.
  Future<double?> echoNullableDouble(double? aNullableDouble) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[aNullableDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as double?);
    }
  }

  /// Returns the passed in boolean.
  Future<bool?> echoNullableBool(bool? aNullableBool) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aNullableBool]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  /// Returns the passed in string.
  Future<String?> echoNullableString(String? aNullableString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[aNullableString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  /// Returns the passed in Uint8List.
  Future<Uint8List?> echoNullableUint8List(
      Uint8List? aNullableUint8List) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[aNullableUint8List]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?);
    }
  }

  /// Returns the passed in generic Object.
  Future<Object?> echoNullableObject(Object? aNullableObject) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[aNullableObject]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns the passed list, to test serialization and deserialization.
  Future<List<Object?>?> echoNullableList(List<Object?>? aNullableList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aNullableList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  /// Returns the passed map, to test serialization and deserialization.
  Future<Map<String?, Object?>?> echoNullableMap(
      Map<String?, Object?>? aNullableMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aNullableMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>();
    }
  }

  Future<AnEnum?> echoNullableEnum(AnEnum? anEnum) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anEnum?.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?) == null
          ? null
          : AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Returns passed in int.
  Future<int?> echoOptionalNullableInt([int? aNullableInt]) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoOptionalNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aNullableInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  /// Returns the passed in string.
  Future<String?> echoNamedNullableString({String? aNullableString}) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNamedNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[aNullableString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  Future<void> noopAsync() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.noopAsync';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns passed in int asynchronously.
  Future<int> echoAsyncInt(int anInt) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  /// Returns passed in double asynchronously.
  Future<double> echoAsyncDouble(double aDouble) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  /// Returns the passed in boolean asynchronously.
  Future<bool> echoAsyncBool(bool aBool) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aBool]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  /// Returns the passed string asynchronously.
  Future<String> echoAsyncString(String aString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  /// Returns the passed in Uint8List asynchronously.
  Future<Uint8List> echoAsyncUint8List(Uint8List aUint8List) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aUint8List]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  /// Returns the passed in generic Object asynchronously.
  Future<Object> echoAsyncObject(Object anObject) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anObject]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return __pigeon_replyList[0]!;
    }
  }

  /// Returns the passed list, to test asynchronous serialization and deserialization.
  Future<List<Object?>> echoAsyncList(List<Object?> aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  /// Returns the passed map, to test asynchronous serialization and deserialization.
  Future<Map<String?, Object?>> echoAsyncMap(Map<String?, Object?> aMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }

  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  Future<AnEnum> echoAsyncEnum(AnEnum anEnum) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anEnum.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Responds with an error from an async function returning a value.
  Future<Object?> throwAsyncError() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwAsyncError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Responds with an error from an async void function.
  Future<void> throwAsyncErrorFromVoid() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwAsyncErrorFromVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Responds with a Flutter error from an async function returning a value.
  Future<Object?> throwAsyncFlutterError() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwAsyncFlutterError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns the passed object, to test async serialization and deserialization.
  Future<AllTypes> echoAsyncAllTypes(AllTypes everything) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncAllTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[everything]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllTypes?)!;
    }
  }

  /// Returns the passed object, to test serialization and deserialization.
  Future<AllNullableTypes?> echoAsyncNullableAllNullableTypes(
      AllNullableTypes? everything) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[everything]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as AllNullableTypes?);
    }
  }

  /// Returns passed in int asynchronously.
  Future<int?> echoAsyncNullableInt(int? anInt) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  /// Returns passed in double asynchronously.
  Future<double?> echoAsyncNullableDouble(double? aDouble) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as double?);
    }
  }

  /// Returns the passed in boolean asynchronously.
  Future<bool?> echoAsyncNullableBool(bool? aBool) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aBool]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  /// Returns the passed string asynchronously.
  Future<String?> echoAsyncNullableString(String? aString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  /// Returns the passed in Uint8List asynchronously.
  Future<Uint8List?> echoAsyncNullableUint8List(Uint8List? aUint8List) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aUint8List]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?);
    }
  }

  /// Returns the passed in generic Object asynchronously.
  Future<Object?> echoAsyncNullableObject(Object? anObject) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anObject]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns the passed list, to test asynchronous serialization and deserialization.
  Future<List<Object?>?> echoAsyncNullableList(List<Object?>? aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  /// Returns the passed map, to test asynchronous serialization and deserialization.
  Future<Map<String?, Object?>?> echoAsyncNullableMap(
      Map<String?, Object?>? aMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>();
    }
  }

  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  Future<AnEnum?> echoAsyncNullableEnum(AnEnum? anEnum) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anEnum?.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?) == null
          ? null
          : AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  Future<void> callFlutterNoop() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterNoop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Object?> callFlutterThrowError() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterThrowError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  Future<void> callFlutterThrowErrorFromVoid() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterThrowErrorFromVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<AllTypes> callFlutterEchoAllTypes(AllTypes everything) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAllTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[everything]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllTypes?)!;
    }
  }

  Future<AllNullableTypes?> callFlutterEchoAllNullableTypes(
      AllNullableTypes? everything) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAllNullableTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[everything]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as AllNullableTypes?);
    }
  }

  Future<AllNullableTypes> callFlutterSendMultipleNullableTypes(
      bool? aNullableBool, int? aNullableInt, String? aNullableString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[aNullableBool, aNullableInt, aNullableString])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AllNullableTypes?)!;
    }
  }

  Future<bool> callFlutterEchoBool(bool aBool) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aBool]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<int> callFlutterEchoInt(int anInt) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<double> callFlutterEchoDouble(double aDouble) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  Future<String> callFlutterEchoString(String aString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<Uint8List> callFlutterEchoUint8List(Uint8List aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<List<Object?>> callFlutterEchoList(List<Object?> aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  Future<Map<String?, Object?>> callFlutterEchoMap(
      Map<String?, Object?> aMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }

  Future<AnEnum> callFlutterEchoEnum(AnEnum anEnum) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anEnum.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  Future<bool?> callFlutterEchoNullableBool(bool? aBool) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aBool]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  Future<int?> callFlutterEchoNullableInt(int? anInt) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anInt]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  Future<double?> callFlutterEchoNullableDouble(double? aDouble) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aDouble]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as double?);
    }
  }

  Future<String?> callFlutterEchoNullableString(String? aString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  Future<Uint8List?> callFlutterEchoNullableUint8List(Uint8List? aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?);
    }
  }

  Future<List<Object?>?> callFlutterEchoNullableList(
      List<Object?>? aList) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  Future<Map<String?, Object?>?> callFlutterEchoNullableMap(
      Map<String?, Object?>? aMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>();
    }
  }

  Future<AnEnum?> callFlutterEchoNullableEnum(AnEnum? anEnum) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anEnum?.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?) == null
          ? null
          : AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }
}

class _FlutterIntegrationCoreApiCodec extends StandardMessageCodec {
  const _FlutterIntegrationCoreApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AllClassesWrapper) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AllNullableTypes) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AllTypes) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is TestMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AllClassesWrapper.decode(readValue(buffer)!);
      case 129:
        return AllNullableTypes.decode(readValue(buffer)!);
      case 130:
        return AllTypes.decode(readValue(buffer)!);
      case 131:
        return TestMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// The core interface that the Dart platform_test code implements for host
/// integration tests to call into.
abstract class FlutterIntegrationCoreApi {
  static const MessageCodec<Object?> pigeonChannelCodec =
      _FlutterIntegrationCoreApiCodec();

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  void noop();

  /// Responds with an error from an async function returning a value.
  Object? throwError();

  /// Responds with an error from an async void function.
  void throwErrorFromVoid();

  /// Returns the passed object, to test serialization and deserialization.
  AllTypes echoAllTypes(AllTypes everything);

  /// Returns the passed object, to test serialization and deserialization.
  AllNullableTypes? echoAllNullableTypes(AllNullableTypes? everything);

  /// Returns passed in arguments of multiple types.
  ///
  /// Tests multiple-arity FlutterApi handling.
  AllNullableTypes sendMultipleNullableTypes(
      bool? aNullableBool, int? aNullableInt, String? aNullableString);

  /// Returns the passed boolean, to test serialization and deserialization.
  bool echoBool(bool aBool);

  /// Returns the passed int, to test serialization and deserialization.
  int echoInt(int anInt);

  /// Returns the passed double, to test serialization and deserialization.
  double echoDouble(double aDouble);

  /// Returns the passed string, to test serialization and deserialization.
  String echoString(String aString);

  /// Returns the passed byte list, to test serialization and deserialization.
  Uint8List echoUint8List(Uint8List aList);

  /// Returns the passed list, to test serialization and deserialization.
  List<Object?> echoList(List<Object?> aList);

  /// Returns the passed map, to test serialization and deserialization.
  Map<String?, Object?> echoMap(Map<String?, Object?> aMap);

  /// Returns the passed enum to test serialization and deserialization.
  AnEnum echoEnum(AnEnum anEnum);

  /// Returns the passed boolean, to test serialization and deserialization.
  bool? echoNullableBool(bool? aBool);

  /// Returns the passed int, to test serialization and deserialization.
  int? echoNullableInt(int? anInt);

  /// Returns the passed double, to test serialization and deserialization.
  double? echoNullableDouble(double? aDouble);

  /// Returns the passed string, to test serialization and deserialization.
  String? echoNullableString(String? aString);

  /// Returns the passed byte list, to test serialization and deserialization.
  Uint8List? echoNullableUint8List(Uint8List? aList);

  /// Returns the passed list, to test serialization and deserialization.
  List<Object?>? echoNullableList(List<Object?>? aList);

  /// Returns the passed map, to test serialization and deserialization.
  Map<String?, Object?>? echoNullableMap(Map<String?, Object?>? aMap);

  /// Returns the passed enum to test serialization and deserialization.
  AnEnum? echoNullableEnum(AnEnum? anEnum);

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  Future<void> noopAsync();

  /// Returns the passed in generic Object asynchronously.
  Future<String> echoAsyncString(String aString);

  static void setup(FlutterIntegrationCoreApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.noop',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.noop();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.throwError',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            final Object? output = api.throwError();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.throwErrorFromVoid',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.throwErrorFromVoid();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllTypes',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllTypes was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AllTypes? arg_everything = (args[0] as AllTypes?);
          assert(arg_everything != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllTypes was null, expected non-null AllTypes.');
          try {
            final AllTypes output = api.echoAllTypes(arg_everything!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllNullableTypes',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllNullableTypes was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AllNullableTypes? arg_everything =
              (args[0] as AllNullableTypes?);
          try {
            final AllNullableTypes? output =
                api.echoAllNullableTypes(arg_everything);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.sendMultipleNullableTypes',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.sendMultipleNullableTypes was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_aNullableBool = (args[0] as bool?);
          final int? arg_aNullableInt = (args[1] as int?);
          final String? arg_aNullableString = (args[2] as String?);
          try {
            final AllNullableTypes output = api.sendMultipleNullableTypes(
                arg_aNullableBool, arg_aNullableInt, arg_aNullableString);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoBool',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoBool was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_aBool = (args[0] as bool?);
          assert(arg_aBool != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoBool was null, expected non-null bool.');
          try {
            final bool output = api.echoBool(arg_aBool!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoInt',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoInt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_anInt = (args[0] as int?);
          assert(arg_anInt != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoInt was null, expected non-null int.');
          try {
            final int output = api.echoInt(arg_anInt!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoDouble',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoDouble was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_aDouble = (args[0] as double?);
          assert(arg_aDouble != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoDouble was null, expected non-null double.');
          try {
            final double output = api.echoDouble(arg_aDouble!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoString',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoString was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_aString = (args[0] as String?);
          assert(arg_aString != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoString was null, expected non-null String.');
          try {
            final String output = api.echoString(arg_aString!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoUint8List',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoUint8List was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_aList = (args[0] as Uint8List?);
          assert(arg_aList != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoUint8List was null, expected non-null Uint8List.');
          try {
            final Uint8List output = api.echoUint8List(arg_aList!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoList',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoList was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<Object?>? arg_aList =
              (args[0] as List<Object?>?)?.cast<Object?>();
          assert(arg_aList != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoList was null, expected non-null List<Object?>.');
          try {
            final List<Object?> output = api.echoList(arg_aList!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoMap',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoMap was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_aMap =
              (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          assert(arg_aMap != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoMap was null, expected non-null Map<String?, Object?>.');
          try {
            final Map<String?, Object?> output = api.echoMap(arg_aMap!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoEnum',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoEnum was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AnEnum? arg_anEnum =
              args[0] == null ? null : AnEnum.values[args[0]! as int];
          assert(arg_anEnum != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoEnum was null, expected non-null AnEnum.');
          try {
            final AnEnum output = api.echoEnum(arg_anEnum!);
            return wrapResponse(result: output.index);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableBool',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableBool was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_aBool = (args[0] as bool?);
          try {
            final bool? output = api.echoNullableBool(arg_aBool);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableInt',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableInt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_anInt = (args[0] as int?);
          try {
            final int? output = api.echoNullableInt(arg_anInt);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableDouble',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableDouble was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_aDouble = (args[0] as double?);
          try {
            final double? output = api.echoNullableDouble(arg_aDouble);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableString',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableString was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_aString = (args[0] as String?);
          try {
            final String? output = api.echoNullableString(arg_aString);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableUint8List',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableUint8List was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_aList = (args[0] as Uint8List?);
          try {
            final Uint8List? output = api.echoNullableUint8List(arg_aList);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableList',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableList was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<Object?>? arg_aList =
              (args[0] as List<Object?>?)?.cast<Object?>();
          try {
            final List<Object?>? output = api.echoNullableList(arg_aList);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableMap',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableMap was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_aMap =
              (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          try {
            final Map<String?, Object?>? output = api.echoNullableMap(arg_aMap);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableEnum',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableEnum was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AnEnum? arg_anEnum =
              args[0] == null ? null : AnEnum.values[args[0]! as int];
          try {
            final AnEnum? output = api.echoNullableEnum(arg_anEnum);
            return wrapResponse(result: output?.index);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.noopAsync',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            await api.noopAsync();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAsyncString',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAsyncString was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_aString = (args[0] as String?);
          assert(arg_aString != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAsyncString was null, expected non-null String.');
          try {
            final String output = await api.echoAsyncString(arg_aString!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

/// An API that can be implemented for minimal, compile-only tests.
class HostTrivialApi {
  /// Constructor for [HostTrivialApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostTrivialApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      StandardMessageCodec();

  Future<void> noop() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostTrivialApi.noop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// A simple API implemented in some unit tests.
class HostSmallApi {
  /// Constructor for [HostSmallApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostSmallApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      StandardMessageCodec();

  Future<String> echo(String aString) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.echo';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<void> voidVoid() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.voidVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterSmallApiCodec extends StandardMessageCodec {
  const _FlutterSmallApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is TestMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return TestMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// A simple API called in some unit tests.
abstract class FlutterSmallApi {
  static const MessageCodec<Object?> pigeonChannelCodec =
      _FlutterSmallApiCodec();

  TestMessage echoWrappedList(TestMessage msg);

  String echoString(String aString);

  static void setup(FlutterSmallApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoWrappedList',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoWrappedList was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TestMessage? arg_msg = (args[0] as TestMessage?);
          assert(arg_msg != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoWrappedList was null, expected non-null TestMessage.');
          try {
            final TestMessage output = api.echoWrappedList(arg_msg!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoString',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoString was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_aString = (args[0] as String?);
          assert(arg_aString != null,
              'Argument for dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoString was null, expected non-null String.');
          try {
            final String output = api.echoString(arg_aString!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

/// The core interface that each host language plugin must implement in
/// platform_test integration tests.
class ProxyIntegrationCoreApi extends ProxyApiSuperClass
    implements ProxyApiInterface {
  ProxyIntegrationCoreApi({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.aBool,
    required this.anInt,
    required this.aDouble,
    required this.aString,
    required this.aUint8List,
    required this.aList,
    required this.aMap,
    required this.anEnum,
    this.aNullableBool,
    this.aNullableInt,
    this.aNullableDouble,
    this.aNullableString,
    this.aNullableUint8List,
    this.aNullableList,
    this.aNullableMap,
    this.aNullableEnum,
    this.anInterfaceMethod,
    this.flutterNoop,
    this.flutterThrowError,
    this.flutterThrowErrorFromVoid,
    this.flutterEchoBool,
    this.flutterEchoInt,
    this.flutterEchoDouble,
    this.flutterEchoString,
    this.flutterEchoUint8List,
    this.flutterEchoList,
    this.flutterEchoProxyApiList,
    this.flutterEchoMap,
    this.flutterEchoProxyApiMap,
    this.flutterEchoEnum,
    this.flutterEchoNullableBool,
    this.flutterEchoNullableInt,
    this.flutterEchoNullableDouble,
    this.flutterEchoNullableString,
    this.flutterEchoNullableUint8List,
    this.flutterEchoNullableList,
    this.flutterEchoNullableMap,
    this.flutterEchoNullableEnum,
    this.callFlutterNoopAsync,
    this.callFlutterEchoAsyncString,
    required bool boolParam,
    required int intParam,
    required double doubleParam,
    required String stringParam,
    required Uint8List aUint8ListParam,
    required List<Object?> listParam,
    required Map<String?, Object?> mapParam,
    required AnEnum enumParam,
    bool? nullableBoolParam,
    int? nullableIntParam,
    double? nullableDoubleParam,
    String? nullableStringParam,
    Uint8List? nullableUint8ListParam,
    List<Object?>? nullableListParam,
    Map<String?, Object?>? nullableMapParam,
    AnEnum? nullableEnumParam,
  }) : super.pigeon_detached() {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.pigeon_defaultConstructor';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    __pigeon_channel.send(<Object?>[
      pigeon_instanceManager.addDartCreatedInstance(this),
      aBool,
      anInt,
      aDouble,
      aString,
      aUint8List,
      aList,
      aMap,
      anEnum.index,
      aNullableBool,
      aNullableInt,
      aNullableDouble,
      aNullableString,
      aNullableUint8List,
      aNullableList,
      aNullableMap,
      aNullableEnum?.index,
      boolParam,
      intParam,
      doubleParam,
      stringParam,
      aUint8ListParam,
      listParam,
      mapParam,
      enumParam.index,
      nullableBoolParam,
      nullableIntParam,
      nullableDoubleParam,
      nullableStringParam,
      nullableUint8ListParam,
      nullableListParam,
      nullableMapParam,
      nullableEnumParam?.index,
    ]).then<void>((Object? value) {
      final List<Object?>? __pigeon_replyList = value as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: (__pigeon_replyList[0]! as String),
          message: (__pigeon_replyList[1] as String?),
          details: __pigeon_replyList[2],
        );
      }
    });
  }

  /// Constructs ProxyIntegrationCoreApi without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies.
  ProxyIntegrationCoreApi.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.aBool,
    required this.anInt,
    required this.aDouble,
    required this.aString,
    required this.aUint8List,
    required this.aList,
    required this.aMap,
    required this.anEnum,
    this.aNullableBool,
    this.aNullableInt,
    this.aNullableDouble,
    this.aNullableString,
    this.aNullableUint8List,
    this.aNullableList,
    this.aNullableMap,
    this.aNullableEnum,
    this.anInterfaceMethod,
    this.flutterNoop,
    this.flutterThrowError,
    this.flutterThrowErrorFromVoid,
    this.flutterEchoBool,
    this.flutterEchoInt,
    this.flutterEchoDouble,
    this.flutterEchoString,
    this.flutterEchoUint8List,
    this.flutterEchoList,
    this.flutterEchoProxyApiList,
    this.flutterEchoMap,
    this.flutterEchoProxyApiMap,
    this.flutterEchoEnum,
    this.flutterEchoNullableBool,
    this.flutterEchoNullableInt,
    this.flutterEchoNullableDouble,
    this.flutterEchoNullableString,
    this.flutterEchoNullableUint8List,
    this.flutterEchoNullableList,
    this.flutterEchoNullableMap,
    this.flutterEchoNullableEnum,
    this.callFlutterNoopAsync,
    this.callFlutterEchoAsyncString,
  }) : super.pigeon_detached();

  late final _Pigeon_ProxyApiBaseCodec __pigeon_codecProxyIntegrationCoreApi =
      _Pigeon_ProxyApiBaseCodec(pigeon_instanceManager);

  final bool aBool;

  final int anInt;

  final double aDouble;

  final String aString;

  final Uint8List aUint8List;

  final List<Object?> aList;

  final Map<String?, Object?> aMap;

  final AnEnum anEnum;

  final bool? aNullableBool;

  final int? aNullableInt;

  final double? aNullableDouble;

  final String? aNullableString;

  final Uint8List? aNullableUint8List;

  final List<Object?>? aNullableList;

  final Map<String?, Object?>? aNullableMap;

  final AnEnum? aNullableEnum;

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  final void Function(ProxyIntegrationCoreApi pigeon_instance)? flutterNoop;

  /// Responds with an error from an async function returning a value.
  final Object? Function(ProxyIntegrationCoreApi pigeon_instance)?
      flutterThrowError;

  /// Responds with an error from an async void function.
  final void Function(ProxyIntegrationCoreApi pigeon_instance)?
      flutterThrowErrorFromVoid;

  /// Returns the passed boolean, to test serialization and deserialization.
  final bool Function(
    ProxyIntegrationCoreApi pigeon_instance,
    bool aBool,
  )? flutterEchoBool;

  /// Returns the passed int, to test serialization and deserialization.
  final int Function(
    ProxyIntegrationCoreApi pigeon_instance,
    int anInt,
  )? flutterEchoInt;

  /// Returns the passed double, to test serialization and deserialization.
  final double Function(
    ProxyIntegrationCoreApi pigeon_instance,
    double aDouble,
  )? flutterEchoDouble;

  /// Returns the passed string, to test serialization and deserialization.
  final String Function(
    ProxyIntegrationCoreApi pigeon_instance,
    String aString,
  )? flutterEchoString;

  /// Returns the passed byte list, to test serialization and deserialization.
  final Uint8List Function(
    ProxyIntegrationCoreApi pigeon_instance,
    Uint8List aList,
  )? flutterEchoUint8List;

  /// Returns the passed list, to test serialization and deserialization.
  final List<Object?> Function(
    ProxyIntegrationCoreApi pigeon_instance,
    List<Object?> aList,
  )? flutterEchoList;

  /// Returns the passed list with ProxyApis, to test serialization and
  /// deserialization.
  final List<ProxyIntegrationCoreApi?> Function(
    ProxyIntegrationCoreApi pigeon_instance,
    List<ProxyIntegrationCoreApi?> aList,
  )? flutterEchoProxyApiList;

  /// Returns the passed map, to test serialization and deserialization.
  final Map<String?, Object?> Function(
    ProxyIntegrationCoreApi pigeon_instance,
    Map<String?, Object?> aMap,
  )? flutterEchoMap;

  /// Returns the passed map with ProxyApis, to test serialization and
  /// deserialization.
  final Map<String?, ProxyIntegrationCoreApi?> Function(
    ProxyIntegrationCoreApi pigeon_instance,
    Map<String?, ProxyIntegrationCoreApi?> aMap,
  )? flutterEchoProxyApiMap;

  /// Returns the passed enum to test serialization and deserialization.
  final AnEnum Function(
    ProxyIntegrationCoreApi pigeon_instance,
    AnEnum anEnum,
  )? flutterEchoEnum;

  /// Returns the passed boolean, to test serialization and deserialization.
  final bool? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    bool? aBool,
  )? flutterEchoNullableBool;

  /// Returns the passed int, to test serialization and deserialization.
  final int? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    int? anInt,
  )? flutterEchoNullableInt;

  /// Returns the passed double, to test serialization and deserialization.
  final double? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    double? aDouble,
  )? flutterEchoNullableDouble;

  /// Returns the passed string, to test serialization and deserialization.
  final String? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    String? aString,
  )? flutterEchoNullableString;

  /// Returns the passed byte list, to test serialization and deserialization.
  final Uint8List? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    Uint8List? aList,
  )? flutterEchoNullableUint8List;

  /// Returns the passed list, to test serialization and deserialization.
  final List<Object?>? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    List<Object?>? aList,
  )? flutterEchoNullableList;

  /// Returns the passed map, to test serialization and deserialization.
  final Map<String?, Object?>? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    Map<String?, Object?>? aMap,
  )? flutterEchoNullableMap;

  /// Returns the passed enum to test serialization and deserialization.
  final AnEnum? Function(
    ProxyIntegrationCoreApi pigeon_instance,
    AnEnum? anEnum,
  )? flutterEchoNullableEnum;

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  final Future<void> Function(ProxyIntegrationCoreApi pigeon_instance)?
      callFlutterNoopAsync;

  /// Returns the passed in generic Object asynchronously.
  final Future<String> Function(
    ProxyIntegrationCoreApi pigeon_instance,
    String aString,
  )? callFlutterEchoAsyncString;

  @override
  final void Function(ProxyApiInterface instance)? anInterfaceMethod;

  late final ProxyApiSuperClass attachedField = __pigeon_attachedField();

  static final ProxyApiSuperClass staticAttachedField =
      __pigeon_staticAttachedField();

  static void pigeon_setUpMessageHandlers({
    BinaryMessenger? pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
    ProxyIntegrationCoreApi Function(
      bool aBool,
      int anInt,
      double aDouble,
      String aString,
      Uint8List aUint8List,
      List<Object?> aList,
      Map<String?, Object?> aMap,
      AnEnum anEnum,
      bool? aNullableBool,
      int? aNullableInt,
      double? aNullableDouble,
      String? aNullableString,
      Uint8List? aNullableUint8List,
      List<Object?>? aNullableList,
      Map<String?, Object?>? aNullableMap,
      AnEnum? aNullableEnum,
    )? pigeon_detached,
    void Function(ProxyIntegrationCoreApi pigeon_instance)? flutterNoop,
    Object? Function(ProxyIntegrationCoreApi pigeon_instance)?
        flutterThrowError,
    void Function(ProxyIntegrationCoreApi pigeon_instance)?
        flutterThrowErrorFromVoid,
    bool Function(
      ProxyIntegrationCoreApi pigeon_instance,
      bool aBool,
    )? flutterEchoBool,
    int Function(
      ProxyIntegrationCoreApi pigeon_instance,
      int anInt,
    )? flutterEchoInt,
    double Function(
      ProxyIntegrationCoreApi pigeon_instance,
      double aDouble,
    )? flutterEchoDouble,
    String Function(
      ProxyIntegrationCoreApi pigeon_instance,
      String aString,
    )? flutterEchoString,
    Uint8List Function(
      ProxyIntegrationCoreApi pigeon_instance,
      Uint8List aList,
    )? flutterEchoUint8List,
    List<Object?> Function(
      ProxyIntegrationCoreApi pigeon_instance,
      List<Object?> aList,
    )? flutterEchoList,
    List<ProxyIntegrationCoreApi?> Function(
      ProxyIntegrationCoreApi pigeon_instance,
      List<ProxyIntegrationCoreApi?> aList,
    )? flutterEchoProxyApiList,
    Map<String?, Object?> Function(
      ProxyIntegrationCoreApi pigeon_instance,
      Map<String?, Object?> aMap,
    )? flutterEchoMap,
    Map<String?, ProxyIntegrationCoreApi?> Function(
      ProxyIntegrationCoreApi pigeon_instance,
      Map<String?, ProxyIntegrationCoreApi?> aMap,
    )? flutterEchoProxyApiMap,
    AnEnum Function(
      ProxyIntegrationCoreApi pigeon_instance,
      AnEnum anEnum,
    )? flutterEchoEnum,
    bool? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      bool? aBool,
    )? flutterEchoNullableBool,
    int? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      int? anInt,
    )? flutterEchoNullableInt,
    double? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      double? aDouble,
    )? flutterEchoNullableDouble,
    String? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      String? aString,
    )? flutterEchoNullableString,
    Uint8List? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      Uint8List? aList,
    )? flutterEchoNullableUint8List,
    List<Object?>? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      List<Object?>? aList,
    )? flutterEchoNullableList,
    Map<String?, Object?>? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      Map<String?, Object?>? aMap,
    )? flutterEchoNullableMap,
    AnEnum? Function(
      ProxyIntegrationCoreApi pigeon_instance,
      AnEnum? anEnum,
    )? flutterEchoNullableEnum,
    Future<void> Function(ProxyIntegrationCoreApi pigeon_instance)?
        callFlutterNoopAsync,
    Future<String> Function(
      ProxyIntegrationCoreApi pigeon_instance,
      String aString,
    )? callFlutterEchoAsyncString,
  }) {
    final _Pigeon_ProxyApiBaseCodec pigeonChannelCodec =
        _Pigeon_ProxyApiBaseCodec(
            pigeon_instanceManager ?? Pigeon_InstanceManager.instance);
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.pigeon_detached';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final int? instanceIdentifier = (args[0] as int?);
        assert(
          instanceIdentifier != null,
          'Argument for $__pigeon_channelName was null, expected non-null int.',
        );
        final bool? arg_aBool = (args[1] as bool?);
        assert(
          arg_aBool != null,
          'Argument for $__pigeon_channelName was null, expected non-null bool.',
        );
        final int? arg_anInt = (args[2] as int?);
        assert(
          arg_anInt != null,
          'Argument for $__pigeon_channelName was null, expected non-null int.',
        );
        final double? arg_aDouble = (args[3] as double?);
        assert(
          arg_aDouble != null,
          'Argument for $__pigeon_channelName was null, expected non-null double.',
        );
        final String? arg_aString = (args[4] as String?);
        assert(
          arg_aString != null,
          'Argument for $__pigeon_channelName was null, expected non-null String.',
        );
        final Uint8List? arg_aUint8List = (args[5] as Uint8List?);
        assert(
          arg_aUint8List != null,
          'Argument for $__pigeon_channelName was null, expected non-null Uint8List.',
        );
        final List<Object?>? arg_aList =
            (args[6] as List<Object?>?)?.cast<Object?>();
        assert(
          arg_aList != null,
          'Argument for $__pigeon_channelName was null, expected non-null List<Object?>.',
        );
        final Map<String?, Object?>? arg_aMap =
            (args[7] as Map<Object?, Object?>?)?.cast<String?, Object?>();
        assert(
          arg_aMap != null,
          'Argument for $__pigeon_channelName was null, expected non-null Map<String?, Object?>.',
        );
        final AnEnum? arg_anEnum =
            args[8] == null ? null : AnEnum.values[args[8]! as int];
        assert(
          arg_anEnum != null,
          'Argument for $__pigeon_channelName was null, expected non-null AnEnum.',
        );
        final bool? arg_aNullableBool = (args[9] as bool?);
        final int? arg_aNullableInt = (args[10] as int?);
        final double? arg_aNullableDouble = (args[11] as double?);
        final String? arg_aNullableString = (args[12] as String?);
        final Uint8List? arg_aNullableUint8List = (args[13] as Uint8List?);
        final List<Object?>? arg_aNullableList =
            (args[14] as List<Object?>?)?.cast<Object?>();
        final Map<String?, Object?>? arg_aNullableMap =
            (args[15] as Map<Object?, Object?>?)?.cast<String?, Object?>();
        final AnEnum? arg_aNullableEnum =
            args[16] == null ? null : AnEnum.values[args[16]! as int];
        (pigeon_instanceManager ?? Pigeon_InstanceManager.instance)
            .addHostCreatedInstance(
          pigeon_detached?.call(
                arg_aBool!,
                arg_anInt!,
                arg_aDouble!,
                arg_aString!,
                arg_aUint8List!,
                arg_aList!,
                arg_aMap!,
                arg_anEnum!,
                arg_aNullableBool,
                arg_aNullableInt,
                arg_aNullableDouble,
                arg_aNullableString,
                arg_aNullableUint8List,
                arg_aNullableList,
                arg_aNullableMap,
                arg_aNullableEnum,
              ) ??
              ProxyIntegrationCoreApi.pigeon_detached(
                pigeon_binaryMessenger: pigeon_binaryMessenger,
                pigeon_instanceManager: pigeon_instanceManager,
                aBool: arg_aBool!,
                anInt: arg_anInt!,
                aDouble: arg_aDouble!,
                aString: arg_aString!,
                aUint8List: arg_aUint8List!,
                aList: arg_aList!,
                aMap: arg_aMap!,
                anEnum: arg_anEnum!,
                aNullableBool: arg_aNullableBool,
                aNullableInt: arg_aNullableInt,
                aNullableDouble: arg_aNullableDouble,
                aNullableString: arg_aNullableString,
                aNullableUint8List: arg_aNullableUint8List,
                aNullableList: arg_aNullableList,
                aNullableMap: arg_aNullableMap,
                aNullableEnum: arg_aNullableEnum,
              ),
          instanceIdentifier!,
        );
        return;
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterNoop';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        try {
          (flutterNoop ?? instance!.flutterNoop)?.call(instance!);
          return wrapResponse(empty: true);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterThrowError';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        try {
          final Object? output =
              (flutterThrowError ?? instance!.flutterThrowError)
                  ?.call(instance!);
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterThrowErrorFromVoid';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        try {
          (flutterThrowErrorFromVoid ?? instance!.flutterThrowErrorFromVoid)
              ?.call(instance!);
          return wrapResponse(empty: true);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoBool';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final bool? arg_aBool = (args[1] as bool?);
        assert(
          arg_aBool != null,
          'Argument for $__pigeon_channelName was null, expected non-null bool.',
        );
        try {
          final bool? output =
              (flutterEchoBool ?? instance!.flutterEchoBool)?.call(
            instance!,
            arg_aBool!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoInt';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final int? arg_anInt = (args[1] as int?);
        assert(
          arg_anInt != null,
          'Argument for $__pigeon_channelName was null, expected non-null int.',
        );
        try {
          final int? output =
              (flutterEchoInt ?? instance!.flutterEchoInt)?.call(
            instance!,
            arg_anInt!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoDouble';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final double? arg_aDouble = (args[1] as double?);
        assert(
          arg_aDouble != null,
          'Argument for $__pigeon_channelName was null, expected non-null double.',
        );
        try {
          final double? output =
              (flutterEchoDouble ?? instance!.flutterEchoDouble)?.call(
            instance!,
            arg_aDouble!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoString';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final String? arg_aString = (args[1] as String?);
        assert(
          arg_aString != null,
          'Argument for $__pigeon_channelName was null, expected non-null String.',
        );
        try {
          final String? output =
              (flutterEchoString ?? instance!.flutterEchoString)?.call(
            instance!,
            arg_aString!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoUint8List';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final Uint8List? arg_aList = (args[1] as Uint8List?);
        assert(
          arg_aList != null,
          'Argument for $__pigeon_channelName was null, expected non-null Uint8List.',
        );
        try {
          final Uint8List? output =
              (flutterEchoUint8List ?? instance!.flutterEchoUint8List)?.call(
            instance!,
            arg_aList!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoList';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final List<Object?>? arg_aList =
            (args[1] as List<Object?>?)?.cast<Object?>();
        assert(
          arg_aList != null,
          'Argument for $__pigeon_channelName was null, expected non-null List<Object?>.',
        );
        try {
          final List<Object?>? output =
              (flutterEchoList ?? instance!.flutterEchoList)?.call(
            instance!,
            arg_aList!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoProxyApiList';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final List<ProxyIntegrationCoreApi?>? arg_aList =
            (args[1] as List<Object?>?)?.cast<ProxyIntegrationCoreApi?>();
        assert(
          arg_aList != null,
          'Argument for $__pigeon_channelName was null, expected non-null List<ProxyIntegrationCoreApi?>.',
        );
        try {
          final List<ProxyIntegrationCoreApi?>? output =
              (flutterEchoProxyApiList ?? instance!.flutterEchoProxyApiList)
                  ?.call(
            instance!,
            arg_aList!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoMap';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final Map<String?, Object?>? arg_aMap =
            (args[1] as Map<Object?, Object?>?)?.cast<String?, Object?>();
        assert(
          arg_aMap != null,
          'Argument for $__pigeon_channelName was null, expected non-null Map<String?, Object?>.',
        );
        try {
          final Map<String?, Object?>? output =
              (flutterEchoMap ?? instance!.flutterEchoMap)?.call(
            instance!,
            arg_aMap!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoProxyApiMap';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final Map<String?, ProxyIntegrationCoreApi?>? arg_aMap =
            (args[1] as Map<Object?, Object?>?)
                ?.cast<String?, ProxyIntegrationCoreApi?>();
        assert(
          arg_aMap != null,
          'Argument for $__pigeon_channelName was null, expected non-null Map<String?, ProxyIntegrationCoreApi?>.',
        );
        try {
          final Map<String?, ProxyIntegrationCoreApi?>? output =
              (flutterEchoProxyApiMap ?? instance!.flutterEchoProxyApiMap)
                  ?.call(
            instance!,
            arg_aMap!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoEnum';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final AnEnum? arg_anEnum =
            args[1] == null ? null : AnEnum.values[args[1]! as int];
        assert(
          arg_anEnum != null,
          'Argument for $__pigeon_channelName was null, expected non-null AnEnum.',
        );
        try {
          final AnEnum? output =
              (flutterEchoEnum ?? instance!.flutterEchoEnum)?.call(
            instance!,
            arg_anEnum!,
          );
          return wrapResponse(result: output?.index);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableBool';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final bool? arg_aBool = (args[1] as bool?);
        try {
          final bool? output =
              (flutterEchoNullableBool ?? instance!.flutterEchoNullableBool)
                  ?.call(
            instance!,
            arg_aBool,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableInt';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final int? arg_anInt = (args[1] as int?);
        try {
          final int? output =
              (flutterEchoNullableInt ?? instance!.flutterEchoNullableInt)
                  ?.call(
            instance!,
            arg_anInt,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableDouble';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final double? arg_aDouble = (args[1] as double?);
        try {
          final double? output =
              (flutterEchoNullableDouble ?? instance!.flutterEchoNullableDouble)
                  ?.call(
            instance!,
            arg_aDouble,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableString';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final String? arg_aString = (args[1] as String?);
        try {
          final String? output =
              (flutterEchoNullableString ?? instance!.flutterEchoNullableString)
                  ?.call(
            instance!,
            arg_aString,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableUint8List';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final Uint8List? arg_aList = (args[1] as Uint8List?);
        try {
          final Uint8List? output = (flutterEchoNullableUint8List ??
                  instance!.flutterEchoNullableUint8List)
              ?.call(
            instance!,
            arg_aList,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableList';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final List<Object?>? arg_aList =
            (args[1] as List<Object?>?)?.cast<Object?>();
        try {
          final List<Object?>? output =
              (flutterEchoNullableList ?? instance!.flutterEchoNullableList)
                  ?.call(
            instance!,
            arg_aList,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableMap';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final Map<String?, Object?>? arg_aMap =
            (args[1] as Map<Object?, Object?>?)?.cast<String?, Object?>();
        try {
          final Map<String?, Object?>? output =
              (flutterEchoNullableMap ?? instance!.flutterEchoNullableMap)
                  ?.call(
            instance!,
            arg_aMap,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.flutterEchoNullableEnum';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final AnEnum? arg_anEnum =
            args[1] == null ? null : AnEnum.values[args[1]! as int];
        try {
          final AnEnum? output =
              (flutterEchoNullableEnum ?? instance!.flutterEchoNullableEnum)
                  ?.call(
            instance!,
            arg_anEnum,
          );
          return wrapResponse(result: output?.index);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterNoopAsync';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        try {
          await (callFlutterNoopAsync ?? instance!.callFlutterNoopAsync)
              ?.call(instance!);
          return wrapResponse(empty: true);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoAsyncString';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyIntegrationCoreApi? instance =
            (args[0] as ProxyIntegrationCoreApi?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyIntegrationCoreApi.',
        );
        final String? arg_aString = (args[1] as String?);
        assert(
          arg_aString != null,
          'Argument for $__pigeon_channelName was null, expected non-null String.',
        );
        try {
          final String? output = await (callFlutterEchoAsyncString ??
                  instance!.callFlutterEchoAsyncString)
              ?.call(
            instance!,
            arg_aString!,
          );
          return wrapResponse(result: output);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
  }

  ProxyApiSuperClass __pigeon_attachedField() {
    final ProxyApiSuperClass __pigeon_instance =
        ProxyApiSuperClass.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.attachedField';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    __pigeon_channel.send(<Object?>[
      this,
      pigeon_instanceManager.addDartCreatedInstance(__pigeon_instance),
    ]).then<void>((Object? value) {
      final List<Object?>? __pigeon_replyList = value as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: (__pigeon_replyList[0]! as String),
          message: (__pigeon_replyList[1] as String?),
          details: __pigeon_replyList[2],
        );
      }
    });
    return __pigeon_instance;
  }

  static ProxyApiSuperClass __pigeon_staticAttachedField() {
    final ProxyApiSuperClass __pigeon_instance =
        ProxyApiSuperClass.pigeon_detached();
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.staticAttachedField';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      _Pigeon_ProxyApiBaseCodec(Pigeon_InstanceManager.instance),
    );
    __pigeon_channel.send(<Object?>[
      Pigeon_InstanceManager.instance.addDartCreatedInstance(__pigeon_instance)
    ]).then<void>((Object? value) {
      final List<Object?>? __pigeon_replyList = value as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: (__pigeon_replyList[0]! as String),
          message: (__pigeon_replyList[1] as String?),
          details: __pigeon_replyList[2],
        );
      }
    });
    return __pigeon_instance;
  }

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  Future<void> noop() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.noop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns an error, to test error handling.
  Future<Object?> throwError() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.throwError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns an error from a void function, to test error handling.
  Future<void> throwErrorFromVoid() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.throwErrorFromVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns a Flutter error, to test error handling.
  Future<Object?> throwFlutterError() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.throwFlutterError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns passed in int.
  Future<int> echoInt(int anInt) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anInt,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  /// Returns passed in double.
  Future<double> echoDouble(double aDouble) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aDouble,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  /// Returns the passed in boolean.
  Future<bool> echoBool(bool aBool) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aBool,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  /// Returns the passed in string.
  Future<String> echoString(String aString) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aString,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  /// Returns the passed in Uint8List.
  Future<Uint8List> echoUint8List(Uint8List aUint8List) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aUint8List,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  /// Returns the passed in generic Object.
  Future<Object> echoObject(Object anObject) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anObject,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return __pigeon_replyList[0]!;
    }
  }

  /// Returns the passed list, to test serialization and deserialization.
  Future<List<Object?>> echoList(List<Object?> aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  /// Returns the passed list with ProxyApis, to test serialization and
  /// deserialization.
  Future<List<ProxyIntegrationCoreApi?>> echoProxyApiList(
      List<ProxyIntegrationCoreApi?> aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoProxyApiList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!
          .cast<ProxyIntegrationCoreApi?>();
    }
  }

  /// Returns the passed map, to test serialization and deserialization.
  Future<Map<String?, Object?>> echoMap(Map<String?, Object?> aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }

  /// Returns the passed map with ProxyApis, to test serialization and
  /// deserialization.
  Future<Map<String?, ProxyIntegrationCoreApi?>> echoProxyApiMap(
      Map<String?, ProxyIntegrationCoreApi?> aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoProxyApiMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, ProxyIntegrationCoreApi?>();
    }
  }

  /// Returns the passed enum to test serialization and deserialization.
  Future<AnEnum> echoEnum(AnEnum anEnum) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anEnum.index,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Returns passed in int.
  Future<int?> echoNullableInt(int? aNullableInt) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableInt,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  /// Returns passed in double.
  Future<double?> echoNullableDouble(double? aNullableDouble) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableDouble,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as double?);
    }
  }

  /// Returns the passed in boolean.
  Future<bool?> echoNullableBool(bool? aNullableBool) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableBool,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  /// Returns the passed in string.
  Future<String?> echoNullableString(String? aNullableString) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableString,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  /// Returns the passed in Uint8List.
  Future<Uint8List?> echoNullableUint8List(
      Uint8List? aNullableUint8List) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableUint8List,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?);
    }
  }

  /// Returns the passed in generic Object.
  Future<Object?> echoNullableObject(Object? aNullableObject) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableObject,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns the passed list, to test serialization and deserialization.
  Future<List<Object?>?> echoNullableList(List<Object?>? aNullableList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  /// Returns the passed map, to test serialization and deserialization.
  Future<Map<String?, Object?>?> echoNullableMap(
      Map<String?, Object?>? aNullableMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aNullableMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>();
    }
  }

  Future<AnEnum?> echoNullableEnum(AnEnum? anEnum) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoNullableEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anEnum?.index,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?) == null
          ? null
          : AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  Future<void> noopAsync() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.noopAsync';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns passed in int asynchronously.
  Future<int> echoAsyncInt(int anInt) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anInt,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  /// Returns passed in double asynchronously.
  Future<double> echoAsyncDouble(double aDouble) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aDouble,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  /// Returns the passed in boolean asynchronously.
  Future<bool> echoAsyncBool(bool aBool) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aBool,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  /// Returns the passed string asynchronously.
  Future<String> echoAsyncString(String aString) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aString,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  /// Returns the passed in Uint8List asynchronously.
  Future<Uint8List> echoAsyncUint8List(Uint8List aUint8List) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aUint8List,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  /// Returns the passed in generic Object asynchronously.
  Future<Object> echoAsyncObject(Object anObject) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anObject,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return __pigeon_replyList[0]!;
    }
  }

  /// Returns the passed list, to test asynchronous serialization and deserialization.
  Future<List<Object?>> echoAsyncList(List<Object?> aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  /// Returns the passed map, to test asynchronous serialization and deserialization.
  Future<Map<String?, Object?>> echoAsyncMap(Map<String?, Object?> aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }

  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  Future<AnEnum> echoAsyncEnum(AnEnum anEnum) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anEnum.index,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Responds with an error from an async function returning a value.
  Future<Object?> throwAsyncError() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.throwAsyncError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Responds with an error from an async void function.
  Future<void> throwAsyncErrorFromVoid() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.throwAsyncErrorFromVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Responds with a Flutter error from an async function returning a value.
  Future<Object?> throwAsyncFlutterError() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.throwAsyncFlutterError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns passed in int asynchronously.
  Future<int?> echoAsyncNullableInt(int? anInt) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anInt,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  /// Returns passed in double asynchronously.
  Future<double?> echoAsyncNullableDouble(double? aDouble) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aDouble,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as double?);
    }
  }

  /// Returns the passed in boolean asynchronously.
  Future<bool?> echoAsyncNullableBool(bool? aBool) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aBool,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  /// Returns the passed string asynchronously.
  Future<String?> echoAsyncNullableString(String? aString) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aString,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  /// Returns the passed in Uint8List asynchronously.
  Future<Uint8List?> echoAsyncNullableUint8List(Uint8List? aUint8List) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aUint8List,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?);
    }
  }

  /// Returns the passed in generic Object asynchronously.
  Future<Object?> echoAsyncNullableObject(Object? anObject) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableObject';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anObject,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  /// Returns the passed list, to test asynchronous serialization and deserialization.
  Future<List<Object?>?> echoAsyncNullableList(List<Object?>? aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  /// Returns the passed map, to test asynchronous serialization and deserialization.
  Future<Map<String?, Object?>?> echoAsyncNullableMap(
      Map<String?, Object?>? aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>();
    }
  }

  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  Future<AnEnum?> echoAsyncNullableEnum(AnEnum? anEnum) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoAsyncNullableEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anEnum?.index,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?) == null
          ? null
          : AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  static Future<void> staticNoop({
    BinaryMessenger? pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
  }) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.staticNoop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      _Pigeon_ProxyApiBaseCodec(
          pigeon_instanceManager ?? Pigeon_InstanceManager.instance),
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  static Future<String> echoStaticString(
    String aString, {
    BinaryMessenger? pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
  }) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.echoStaticString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      _Pigeon_ProxyApiBaseCodec(
          pigeon_instanceManager ?? Pigeon_InstanceManager.instance),
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[aString]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  static Future<void> staticAsyncNoop({
    BinaryMessenger? pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
  }) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.staticAsyncNoop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      _Pigeon_ProxyApiBaseCodec(
          pigeon_instanceManager ?? Pigeon_InstanceManager.instance),
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> callFlutterNoop() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterNoop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Object?> callFlutterThrowError() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterThrowError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return __pigeon_replyList[0];
    }
  }

  Future<void> callFlutterThrowErrorFromVoid() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterThrowErrorFromVoid';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> callFlutterEchoBool(bool aBool) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aBool,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<int> callFlutterEchoInt(int anInt) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anInt,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<double> callFlutterEchoDouble(double aDouble) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aDouble,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as double?)!;
    }
  }

  Future<String> callFlutterEchoString(String aString) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aString,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<Uint8List> callFlutterEchoUint8List(Uint8List aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<List<Object?>> callFlutterEchoList(List<Object?> aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  Future<List<ProxyIntegrationCoreApi?>> callFlutterEchoProxyApiList(
      List<ProxyIntegrationCoreApi?> aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoProxyApiList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!
          .cast<ProxyIntegrationCoreApi?>();
    }
  }

  Future<Map<String?, Object?>> callFlutterEchoMap(
      Map<String?, Object?> aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, Object?>();
    }
  }

  Future<Map<String?, ProxyIntegrationCoreApi?>> callFlutterEchoProxyApiMap(
      Map<String?, ProxyIntegrationCoreApi?> aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoProxyApiMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)!
          .cast<String?, ProxyIntegrationCoreApi?>();
    }
  }

  Future<AnEnum> callFlutterEchoEnum(AnEnum anEnum) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anEnum.index,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  Future<bool?> callFlutterEchoNullableBool(bool? aBool) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableBool';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aBool,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  Future<int?> callFlutterEchoNullableInt(int? anInt) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableInt';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anInt,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?);
    }
  }

  Future<double?> callFlutterEchoNullableDouble(double? aDouble) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableDouble';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aDouble,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as double?);
    }
  }

  Future<String?> callFlutterEchoNullableString(String? aString) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableString';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aString,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as String?);
    }
  }

  Future<Uint8List?> callFlutterEchoNullableUint8List(Uint8List? aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableUint8List';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?);
    }
  }

  Future<List<Object?>?> callFlutterEchoNullableList(
      List<Object?>? aList) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableList';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aList,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  Future<Map<String?, Object?>?> callFlutterEchoNullableMap(
      Map<String?, Object?>? aMap) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableMap';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      aMap,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>();
    }
  }

  Future<AnEnum?> callFlutterEchoNullableEnum(AnEnum? anEnum) async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyIntegrationCoreApi.callFlutterEchoNullableEnum';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyIntegrationCoreApi,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[
      this,
      anEnum?.index,
    ]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as int?) == null
          ? null
          : AnEnum.values[__pigeon_replyList[0]! as int];
    }
  }

  @override
  ProxyIntegrationCoreApi pigeon_copy() {
    return ProxyIntegrationCoreApi.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      aBool: aBool,
      anInt: anInt,
      aDouble: aDouble,
      aString: aString,
      aUint8List: aUint8List,
      aList: aList,
      aMap: aMap,
      anEnum: anEnum,
      aNullableBool: aNullableBool,
      aNullableInt: aNullableInt,
      aNullableDouble: aNullableDouble,
      aNullableString: aNullableString,
      aNullableUint8List: aNullableUint8List,
      aNullableList: aNullableList,
      aNullableMap: aNullableMap,
      aNullableEnum: aNullableEnum,
      anInterfaceMethod: anInterfaceMethod,
      flutterNoop: flutterNoop,
      flutterThrowError: flutterThrowError,
      flutterThrowErrorFromVoid: flutterThrowErrorFromVoid,
      flutterEchoBool: flutterEchoBool,
      flutterEchoInt: flutterEchoInt,
      flutterEchoDouble: flutterEchoDouble,
      flutterEchoString: flutterEchoString,
      flutterEchoUint8List: flutterEchoUint8List,
      flutterEchoList: flutterEchoList,
      flutterEchoProxyApiList: flutterEchoProxyApiList,
      flutterEchoMap: flutterEchoMap,
      flutterEchoProxyApiMap: flutterEchoProxyApiMap,
      flutterEchoEnum: flutterEchoEnum,
      flutterEchoNullableBool: flutterEchoNullableBool,
      flutterEchoNullableInt: flutterEchoNullableInt,
      flutterEchoNullableDouble: flutterEchoNullableDouble,
      flutterEchoNullableString: flutterEchoNullableString,
      flutterEchoNullableUint8List: flutterEchoNullableUint8List,
      flutterEchoNullableList: flutterEchoNullableList,
      flutterEchoNullableMap: flutterEchoNullableMap,
      flutterEchoNullableEnum: flutterEchoNullableEnum,
      callFlutterNoopAsync: callFlutterNoopAsync,
      callFlutterEchoAsyncString: callFlutterEchoAsyncString,
    );
  }
}

/// ProxyApi to serve as a super class to the core ProxyApi interface.
class ProxyApiSuperClass implements Pigeon_Copyable {
  /// Constructs ProxyApiSuperClass without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies.
  ProxyApiSuperClass.pigeon_detached({
    this.pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
  }) : pigeon_instanceManager =
            pigeon_instanceManager ?? Pigeon_InstanceManager.instance;

  late final _Pigeon_ProxyApiBaseCodec __pigeon_codecProxyApiSuperClass =
      _Pigeon_ProxyApiBaseCodec(pigeon_instanceManager);

  /// Sends and receives binary data across the Flutter platform barrier.
  ///
  /// If it is null, the default BinaryMessenger will be used, which routes to
  /// the host platform.
  final BinaryMessenger? pigeon_binaryMessenger;

  /// Maintains instances stored to communicate with native language objects.
  final Pigeon_InstanceManager pigeon_instanceManager;

  static void pigeon_setUpMessageHandlers({
    BinaryMessenger? pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
    ProxyApiSuperClass Function()? pigeon_detached,
  }) {
    final _Pigeon_ProxyApiBaseCodec pigeonChannelCodec =
        _Pigeon_ProxyApiBaseCodec(
            pigeon_instanceManager ?? Pigeon_InstanceManager.instance);
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyApiSuperClass.pigeon_detached';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final int? instanceIdentifier = (args[0] as int?);
        assert(
          instanceIdentifier != null,
          'Argument for $__pigeon_channelName was null, expected non-null int.',
        );
        (pigeon_instanceManager ?? Pigeon_InstanceManager.instance)
            .addHostCreatedInstance(
          pigeon_detached?.call() ??
              ProxyApiSuperClass.pigeon_detached(
                pigeon_binaryMessenger: pigeon_binaryMessenger,
                pigeon_instanceManager: pigeon_instanceManager,
              ),
          instanceIdentifier!,
        );
        return;
      });
    }
  }

  Future<void> aSuperMethod() async {
    const String __pigeon_channelName =
        r'dev.flutter.pigeon.pigeon_integration_tests.ProxyApiSuperClass.aSuperMethod';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      __pigeon_codecProxyApiSuperClass,
      binaryMessenger: pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        (await __pigeon_channel.send(<Object?>[this]) as List<Object?>?);
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: (__pigeon_replyList[0]! as String),
        message: (__pigeon_replyList[1] as String?),
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  ProxyApiSuperClass pigeon_copy() {
    return ProxyApiSuperClass.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// ProxyApi to serve as an interface to the core ProxyApi interface.
class ProxyApiInterface implements Pigeon_Copyable {
  /// Constructs ProxyApiInterface without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies.
  ProxyApiInterface.pigeon_detached({
    this.pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
    this.anInterfaceMethod,
  }) : pigeon_instanceManager =
            pigeon_instanceManager ?? Pigeon_InstanceManager.instance;

  /// Sends and receives binary data across the Flutter platform barrier.
  ///
  /// If it is null, the default BinaryMessenger will be used, which routes to
  /// the host platform.
  final BinaryMessenger? pigeon_binaryMessenger;

  /// Maintains instances stored to communicate with native language objects.
  final Pigeon_InstanceManager pigeon_instanceManager;

  final void Function(ProxyApiInterface pigeon_instance)? anInterfaceMethod;

  static void pigeon_setUpMessageHandlers({
    BinaryMessenger? pigeon_binaryMessenger,
    Pigeon_InstanceManager? pigeon_instanceManager,
    ProxyApiInterface Function()? pigeon_detached,
    void Function(ProxyApiInterface pigeon_instance)? anInterfaceMethod,
  }) {
    final _Pigeon_ProxyApiBaseCodec pigeonChannelCodec =
        _Pigeon_ProxyApiBaseCodec(
            pigeon_instanceManager ?? Pigeon_InstanceManager.instance);
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyApiInterface.pigeon_detached';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final int? instanceIdentifier = (args[0] as int?);
        assert(
          instanceIdentifier != null,
          'Argument for $__pigeon_channelName was null, expected non-null int.',
        );
        (pigeon_instanceManager ?? Pigeon_InstanceManager.instance)
            .addHostCreatedInstance(
          pigeon_detached?.call() ??
              ProxyApiInterface.pigeon_detached(
                pigeon_binaryMessenger: pigeon_binaryMessenger,
                pigeon_instanceManager: pigeon_instanceManager,
              ),
          instanceIdentifier!,
        );
        return;
      });
    }
    {
      const String __pigeon_channelName =
          r'dev.flutter.pigeon.pigeon_integration_tests.ProxyApiInterface.anInterfaceMethod';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: pigeon_binaryMessenger,
      );
      __pigeon_channel.setMessageHandler((Object? message) async {
        assert(
          message != null,
          'Argument for $__pigeon_channelName was null.',
        );
        final List<Object?> args = (message as List<Object?>?)!;
        final ProxyApiInterface? instance = (args[0] as ProxyApiInterface?);
        assert(
          instance != null,
          'Argument for $__pigeon_channelName was null, expected non-null ProxyApiInterface.',
        );
        try {
          (anInterfaceMethod ?? instance!.anInterfaceMethod)?.call(instance!);
          return wrapResponse(empty: true);
        } on PlatformException catch (e) {
          return wrapResponse(error: e);
        } catch (e) {
          return wrapResponse(
            error: PlatformException(code: 'error', message: e.toString()),
          );
        }
      });
    }
  }

  @override
  ProxyApiInterface pigeon_copy() {
    return ProxyApiInterface.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      anInterfaceMethod: anInterfaceMethod,
    );
  }
}
