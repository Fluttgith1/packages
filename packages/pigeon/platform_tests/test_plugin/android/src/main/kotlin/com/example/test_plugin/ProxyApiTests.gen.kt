// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.test_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class ProxyApiTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * <p>Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * <p>When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * <p>Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener` is made with the instance's identifier. However, if the strong reference
 * is removed and then the identifier is retrieved with the intention to pass the identifier to Dart
 * (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance is
 * recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate", "unused")
class PigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager. */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  init {
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val clearFinalizedWeakReferencesInterval: Long = 3000
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     *
     * @param finalizationListener the listener for garbage collected weak references.
     * @return a new `PigeonInstanceManager`.
     */
    fun create(finalizationListener: PigeonFinalizationListener): PigeonInstanceManager {
      return PigeonInstanceManager(finalizationListener)
    }

    /**
     * Instantiate a new manager with an `PigeonInstanceManager`.
     *
     * @param api handles removing garbage collected weak references.
     * @return a new `PigeonInstanceManager`.
     */
    fun create(api: PigeonInstanceManagerApi): PigeonInstanceManager {
      val instanceManager =
          create(
              object : PigeonFinalizationListener {
                override fun onFinalize(identifier: Long) {
                  api.removeStrongReference(identifier) {
                    if (it.isFailure) {
                      Log.e(
                          tag,
                          "Failed to remove Dart strong reference with identifier: $identifier")
                    }
                  }
                }
              })
      PigeonInstanceManagerApi.setUpMessageHandlers(api.binaryMessenger, instanceManager)
      return instanceManager
    }
  }

  /**
   * Removes `identifier` and its associated strongly referenced instance, if present, from the
   * manager.
   *
   * @param identifier the identifier paired to an instance.
   * @param <T> the expected return type.
   * @return the removed instance if the manager contains the given identifier, otherwise `null` if
   *   the manager doesn't contain the value. </T>
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance.
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `PigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   *
   * @param instance an instance that may be stored in the manager.
   * @return the identifier associated with `instance` if the manager contains the value, otherwise
   *   `null` if the manager doesn't contain the value.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This allows
   * two objects that are equivalent (e.g. the `equals` method returns true and their hashcodes are
   * equal) to both be added.
   *
   * @param instance the instance to be stored.
   * @param identifier the identifier to be paired with instance. This value must be >= 0 and
   *   unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new instance that was instantiated from the host platform.
   *
   * @param instance the instance to be stored. This must be unique to all other added instances.
   * @return the unique identifier (>= 0) stored with instance.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) {
      "Instance of ${instance.javaClass} has already been added."
    }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /**
   * Retrieves the instance associated with identifier.
   *
   * @param identifier the identifier associated with an instance.
   * @param <T> the expected return type.
   * @return the instance associated with `identifier` if the manager contains the value, otherwise
   *   `null` if the manager doesn't contain the value. </T>
   */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /**
   * Returns whether this manager contains the given `instance`.
   *
   * @param instance the instance whose presence in this manager is to be tested.
   * @return whether this manager contains the given `instance`.
   */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stop the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } !=
        null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
          tag,
          "The manager was used after calls to the PigeonFinalizationListener have been stopped.")
    }
  }
}

/** Generated API for managing the Dart and native `PigeonInstanceManager`s. */
class PigeonInstanceManagerApi(internal val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by PigeonInstanceManagerApi. */
    private val codec: MessageCodec<Any?> by lazy { StandardMessageCodec() }

    /**
     * Sets up an instance of `PigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        instanceManager: PigeonInstanceManager
    ) {
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.pigeon_integration_tests.PigeonInstanceManagerApi.removeStrongReference",
                codec)
        channel.setMessageHandler { message, reply ->
          val identifier = message as Number
          val wrapped: List<Any?> =
              try {
                instanceManager.remove<Any?>(identifier.toLong())
                listOf<Any?>(null)
              } catch (exception: Throwable) {
                wrapError(exception)
              }
          reply.reply(wrapped)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.pigeon_integration_tests.PigeonInstanceManagerApi.clear",
                codec)
        channel.setMessageHandler { _, reply ->
          val wrapped: List<Any?> =
              try {
                instanceManager.clear()
                listOf<Any?>(null)
              } catch (exception: Throwable) {
                wrapError(exception)
              }
          reply.reply(wrapped)
        }
      }
    }
  }

  fun removeStrongReference(identifier: Long, callback: (Result<Unit>) -> Unit) {
    val channelName =
        "dev.flutter.pigeon.pigeon_integration_tests.PigeonInstanceManagerApi.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(identifier) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(
              Result.failure(
                  ProxyApiTestsError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}

abstract class PigeonProxyApiBaseCodec(
    val binaryMessenger: BinaryMessenger,
    val instanceManager: PigeonInstanceManager
) : StandardMessageCodec() {
  /**
   * An implementation of [PigeonApiProxyApiTestClass] used to add a new Dart instance of
   * `ProxyApiTestClass` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiProxyApiTestClass(): PigeonApiProxyApiTestClass

  /**
   * An implementation of [PigeonApiProxyApiSuperClass] used to add a new Dart instance of
   * `ProxyApiSuperClass` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiProxyApiSuperClass(): PigeonApiProxyApiSuperClass

  /**
   * An implementation of [PigeonApiProxyApiInterface] used to add a new Dart instance of
   * `ProxyApiInterface` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiProxyApiInterface(): PigeonApiProxyApiInterface

  fun setUpMessageHandlers() {
    PigeonApiProxyApiTestClass.setUpMessageHandlers(
        binaryMessenger, getPigeonApiProxyApiTestClass())
    PigeonApiProxyApiSuperClass.setUpMessageHandlers(
        binaryMessenger, getPigeonApiProxyApiSuperClass())
  }

  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return instanceManager.getInstance(
            readValue(buffer).let { if (it is Int) it.toLong() else it as Long })
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is ProxyApiTestClass) {
      getPigeonApiProxyApiTestClass().pigeon_newInstance(value) {}
    } else if (value is ProxyApiSuperClass) {
      getPigeonApiProxyApiSuperClass().pigeon_newInstance(value) {}
    } else if (value is ProxyApiInterface) {
      getPigeonApiProxyApiInterface().pigeon_newInstance(value) {}
    }

    when {
      instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, instanceManager.getIdentifierForStrongReference(value))
      }
      else -> super.writeValue(stream, value)
    }
  }
}

enum class ProxyApiTestEnum(val raw: Int) {
  ONE(0),
  TWO(1),
  THREE(2);

  companion object {
    fun ofRaw(raw: Int): ProxyApiTestEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
/**
 * The core ProxyApi test class that each supported host language must implement in platform_tests
 * integration tests.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiProxyApiTestClass(val codec: PigeonProxyApiBaseCodec) {}
/** ProxyApi to serve as a super class to the core ProxyApi class. */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiProxyApiSuperClass(val codec: PigeonProxyApiBaseCodec) {}
/** ProxyApi to serve as an interface to the core ProxyApi class. */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiProxyApiInterface(val codec: PigeonProxyApiBaseCodec) {}
