// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "core_tests.gen.h"

struct _CoreTestsPigeonTestAllTypes {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  uint8_t* a_byte_array;
  size_t a_byte_array_length;
  int32_t* a4_byte_array;
  size_t a4_byte_array_length;
  int64_t* a8_byte_array;
  size_t a8_byte_array_length;
  double* a_float_array;
  size_t a_float_array_length;
  CoreTestsPigeonTestAnEnum an_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* map;
};

G_DEFINE_TYPE(CoreTestsPigeonTestAllTypes, core_tests_pigeon_test_all_types,
              G_TYPE_OBJECT)

static void core_tests_pigeon_test_all_types_dispose(GObject* object) {
  CoreTestsPigeonTestAllTypes* self = CORE_TESTS_PIGEON_TEST_ALL_TYPES(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_pigeon_test_all_types_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_all_types_init(
    CoreTestsPigeonTestAllTypes* self) {}

static void core_tests_pigeon_test_all_types_class_init(
    CoreTestsPigeonTestAllTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_pigeon_test_all_types_dispose;
}

CoreTestsPigeonTestAllTypes* core_tests_pigeon_test_all_types_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    const uint8_t* a_byte_array, size_t a_byte_array_length,
    const int32_t* a4_byte_array, size_t a4_byte_array_length,
    const int64_t* a8_byte_array, size_t a8_byte_array_length,
    const double* a_float_array, size_t a_float_array_length,
    CoreTestsPigeonTestAnEnum an_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* map) {
  CoreTestsPigeonTestAllTypes* self = CORE_TESTS_PIGEON_TEST_ALL_TYPES(
      g_object_new(core_tests_pigeon_test_all_types_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->a_byte_array = static_cast<uint8_t*>(
      memcpy(malloc(a_byte_array_length), a_byte_array, a_byte_array_length));
  self->a_byte_array_length = a_byte_array_length;
  self->a4_byte_array = static_cast<int32_t*>(
      memcpy(malloc(sizeof(int32_t) * a4_byte_array_length), a4_byte_array,
             sizeof(int32_t) * a4_byte_array_length));
  self->a4_byte_array_length = a4_byte_array_length;
  self->a8_byte_array = static_cast<int64_t*>(
      memcpy(malloc(sizeof(int64_t) * a8_byte_array_length), a8_byte_array,
             sizeof(int64_t) * a8_byte_array_length));
  self->a8_byte_array_length = a8_byte_array_length;
  self->a_float_array = static_cast<double*>(
      memcpy(malloc(sizeof(double) * a_float_array_length), a_float_array,
             sizeof(double) * a_float_array_length));
  self->a_float_array_length = a_float_array_length;
  self->an_enum = an_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->map = fl_value_ref(map);
  return self;
}

gboolean core_tests_pigeon_test_all_types_get_a_bool(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), FALSE);
  return self->a_bool;
}

int64_t core_tests_pigeon_test_all_types_get_an_int(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), 0);
  return self->an_int;
}

int64_t core_tests_pigeon_test_all_types_get_an_int64(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), 0);
  return self->an_int64;
}

double core_tests_pigeon_test_all_types_get_a_double(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), 0.0);
  return self->a_double;
}

const uint8_t* core_tests_pigeon_test_all_types_get_a_byte_array(
    CoreTestsPigeonTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a_byte_array_length;
  return self->a_byte_array;
}

const int32_t* core_tests_pigeon_test_all_types_get_a4_byte_array(
    CoreTestsPigeonTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a4_byte_array_length;
  return self->a4_byte_array;
}

const int64_t* core_tests_pigeon_test_all_types_get_a8_byte_array(
    CoreTestsPigeonTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a8_byte_array_length;
  return self->a8_byte_array;
}

const double* core_tests_pigeon_test_all_types_get_a_float_array(
    CoreTestsPigeonTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a_float_array_length;
  return self->a_float_array;
}

CoreTestsPigeonTestAnEnum core_tests_pigeon_test_all_types_get_an_enum(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self),
                       static_cast<CoreTestsPigeonTestAnEnum>(0));
  return self->an_enum;
}

const gchar* core_tests_pigeon_test_all_types_get_a_string(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->a_string;
}

FlValue* core_tests_pigeon_test_all_types_get_an_object(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->an_object;
}

FlValue* core_tests_pigeon_test_all_types_get_list(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list;
}

FlValue* core_tests_pigeon_test_all_types_get_string_list(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->string_list;
}

FlValue* core_tests_pigeon_test_all_types_get_int_list(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->int_list;
}

FlValue* core_tests_pigeon_test_all_types_get_double_list(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->double_list;
}

FlValue* core_tests_pigeon_test_all_types_get_bool_list(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->bool_list;
}

FlValue* core_tests_pigeon_test_all_types_get_map(
    CoreTestsPigeonTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map;
}

static FlValue* core_tests_pigeon_test_all_types_to_list(
    CoreTestsPigeonTestAllTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values,
      fl_value_new_uint8_list(self->a_byte_array, self->a_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_int32_list(self->a4_byte_array, self->a4_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_int64_list(self->a8_byte_array, self->a8_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_float_list(self->a_float_array, self->a_float_array_length));
  fl_value_append_take(values,
                       fl_value_new_custom(134, fl_value_new_int(self->an_enum),
                                           (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  return values;
}

static CoreTestsPigeonTestAllTypes*
core_tests_pigeon_test_all_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_byte_array = fl_value_get_uint8_list(value4);
  size_t a_byte_array_length = fl_value_get_length(value4);
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a4_byte_array = fl_value_get_int32_list(value5);
  size_t a4_byte_array_length = fl_value_get_length(value5);
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a8_byte_array = fl_value_get_int64_list(value6);
  size_t a8_byte_array_length = fl_value_get_length(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_float_array = fl_value_get_float_list(value7);
  size_t a_float_array_length = fl_value_get_length(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsPigeonTestAnEnum an_enum = static_cast<CoreTestsPigeonTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value8)))));
  FlValue* value9 = fl_value_get_list_value(values, 9);
  const gchar* a_string = fl_value_get_string(value9);
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* an_object = value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* list = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* string_list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* int_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* double_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* bool_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* map = value16;
  return core_tests_pigeon_test_all_types_new(
      a_bool, an_int, an_int64, a_double, a_byte_array, a_byte_array_length,
      a4_byte_array, a4_byte_array_length, a8_byte_array, a8_byte_array_length,
      a_float_array, a_float_array_length, an_enum, a_string, an_object, list,
      string_list, int_list, double_list, bool_list, map);
}

struct _CoreTestsPigeonTestAllNullableTypes {
  GObject parent_instance;

  gboolean* a_nullable_bool;
  int64_t* a_nullable_int;
  int64_t* a_nullable_int64;
  double* a_nullable_double;
  uint8_t* a_nullable_byte_array;
  size_t a_nullable_byte_array_length;
  int32_t* a_nullable4_byte_array;
  size_t a_nullable4_byte_array_length;
  int64_t* a_nullable8_byte_array;
  size_t a_nullable8_byte_array_length;
  double* a_nullable_float_array;
  size_t a_nullable_float_array_length;
  FlValue* nullable_nested_list;
  FlValue* nullable_map_with_annotations;
  FlValue* nullable_map_with_object;
  CoreTestsPigeonTestAnEnum* a_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
  CoreTestsPigeonTestAllNullableTypes* all_nullable_types;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* nested_class_list;
  FlValue* map;
};

G_DEFINE_TYPE(CoreTestsPigeonTestAllNullableTypes,
              core_tests_pigeon_test_all_nullable_types, G_TYPE_OBJECT)

static void core_tests_pigeon_test_all_nullable_types_dispose(GObject* object) {
  CoreTestsPigeonTestAllNullableTypes* self =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(object);
  g_clear_pointer(&self->a_nullable_bool, g_free);
  g_clear_pointer(&self->a_nullable_int, g_free);
  g_clear_pointer(&self->a_nullable_int64, g_free);
  g_clear_pointer(&self->a_nullable_double, g_free);
  g_clear_pointer(&self->nullable_nested_list, fl_value_unref);
  g_clear_pointer(&self->nullable_map_with_annotations, fl_value_unref);
  g_clear_pointer(&self->nullable_map_with_object, fl_value_unref);
  g_clear_pointer(&self->a_nullable_enum, g_free);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  g_clear_object(&self->all_nullable_types);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->nested_class_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_pigeon_test_all_nullable_types_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_all_nullable_types_init(
    CoreTestsPigeonTestAllNullableTypes* self) {}

static void core_tests_pigeon_test_all_nullable_types_class_init(
    CoreTestsPigeonTestAllNullableTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_all_nullable_types_dispose;
}

CoreTestsPigeonTestAllNullableTypes*
core_tests_pigeon_test_all_nullable_types_new(
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    int64_t* a_nullable_int64, double* a_nullable_double,
    const uint8_t* a_nullable_byte_array, size_t a_nullable_byte_array_length,
    const int32_t* a_nullable4_byte_array, size_t a_nullable4_byte_array_length,
    const int64_t* a_nullable8_byte_array, size_t a_nullable8_byte_array_length,
    const double* a_nullable_float_array, size_t a_nullable_float_array_length,
    FlValue* nullable_nested_list, FlValue* nullable_map_with_annotations,
    FlValue* nullable_map_with_object,
    CoreTestsPigeonTestAnEnum* a_nullable_enum, const gchar* a_nullable_string,
    FlValue* a_nullable_object,
    CoreTestsPigeonTestAllNullableTypes* all_nullable_types, FlValue* list,
    FlValue* string_list, FlValue* int_list, FlValue* double_list,
    FlValue* bool_list, FlValue* nested_class_list, FlValue* map) {
  CoreTestsPigeonTestAllNullableTypes* self =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(g_object_new(
          core_tests_pigeon_test_all_nullable_types_get_type(), nullptr));
  if (a_nullable_bool != nullptr) {
    self->a_nullable_bool = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    *self->a_nullable_bool = *a_nullable_bool;
  } else {
    self->a_nullable_bool = nullptr;
  }
  if (a_nullable_int != nullptr) {
    self->a_nullable_int = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int = *a_nullable_int;
  } else {
    self->a_nullable_int = nullptr;
  }
  if (a_nullable_int64 != nullptr) {
    self->a_nullable_int64 = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int64 = *a_nullable_int64;
  } else {
    self->a_nullable_int64 = nullptr;
  }
  if (a_nullable_double != nullptr) {
    self->a_nullable_double = static_cast<double*>(malloc(sizeof(double)));
    *self->a_nullable_double = *a_nullable_double;
  } else {
    self->a_nullable_double = nullptr;
  }
  self->a_nullable_byte_array = static_cast<uint8_t*>(
      memcpy(malloc(a_nullable_byte_array_length), a_nullable_byte_array,
             a_nullable_byte_array_length));
  self->a_nullable_byte_array_length = a_nullable_byte_array_length;
  self->a_nullable4_byte_array = static_cast<int32_t*>(memcpy(
      malloc(sizeof(int32_t) * a_nullable4_byte_array_length),
      a_nullable4_byte_array, sizeof(int32_t) * a_nullable4_byte_array_length));
  self->a_nullable4_byte_array_length = a_nullable4_byte_array_length;
  self->a_nullable8_byte_array = static_cast<int64_t*>(memcpy(
      malloc(sizeof(int64_t) * a_nullable8_byte_array_length),
      a_nullable8_byte_array, sizeof(int64_t) * a_nullable8_byte_array_length));
  self->a_nullable8_byte_array_length = a_nullable8_byte_array_length;
  self->a_nullable_float_array = static_cast<double*>(memcpy(
      malloc(sizeof(double) * a_nullable_float_array_length),
      a_nullable_float_array, sizeof(double) * a_nullable_float_array_length));
  self->a_nullable_float_array_length = a_nullable_float_array_length;
  self->nullable_nested_list = fl_value_ref(nullable_nested_list);
  self->nullable_map_with_annotations =
      fl_value_ref(nullable_map_with_annotations);
  self->nullable_map_with_object = fl_value_ref(nullable_map_with_object);
  if (a_nullable_enum != nullptr) {
    self->a_nullable_enum = static_cast<CoreTestsPigeonTestAnEnum*>(
        malloc(sizeof(CoreTestsPigeonTestAnEnum)));
    *self->a_nullable_enum = *a_nullable_enum;
  } else {
    self->a_nullable_enum = nullptr;
  }
  self->a_nullable_string = g_strdup(a_nullable_string);
  self->a_nullable_object = fl_value_ref(a_nullable_object);
  self->all_nullable_types = CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
      g_object_ref(all_nullable_types));
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->nested_class_list = fl_value_ref(nested_class_list);
  self->map = fl_value_ref(map);
  return self;
}

gboolean* core_tests_pigeon_test_all_nullable_types_get_a_nullable_bool(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_bool;
}

int64_t* core_tests_pigeon_test_all_nullable_types_get_a_nullable_int(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_int;
}

int64_t* core_tests_pigeon_test_all_nullable_types_get_a_nullable_int64(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_int64;
}

double* core_tests_pigeon_test_all_nullable_types_get_a_nullable_double(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_double;
}

const uint8_t*
core_tests_pigeon_test_all_nullable_types_get_a_nullable_byte_array(
    CoreTestsPigeonTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable_byte_array_length;
  return self->a_nullable_byte_array;
}

const int32_t*
core_tests_pigeon_test_all_nullable_types_get_a_nullable4_byte_array(
    CoreTestsPigeonTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable4_byte_array_length;
  return self->a_nullable4_byte_array;
}

const int64_t*
core_tests_pigeon_test_all_nullable_types_get_a_nullable8_byte_array(
    CoreTestsPigeonTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable8_byte_array_length;
  return self->a_nullable8_byte_array;
}

const double*
core_tests_pigeon_test_all_nullable_types_get_a_nullable_float_array(
    CoreTestsPigeonTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable_float_array_length;
  return self->a_nullable_float_array;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_nullable_nested_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->nullable_nested_list;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_get_nullable_map_with_annotations(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->nullable_map_with_annotations;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_nullable_map_with_object(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->nullable_map_with_object;
}

CoreTestsPigeonTestAnEnum*
core_tests_pigeon_test_all_nullable_types_get_a_nullable_enum(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_enum;
}

const gchar* core_tests_pigeon_test_all_nullable_types_get_a_nullable_string(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_string;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_a_nullable_object(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_object;
}

CoreTestsPigeonTestAllNullableTypes*
core_tests_pigeon_test_all_nullable_types_get_all_nullable_types(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->all_nullable_types;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_string_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->string_list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_int_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->int_list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_double_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->double_list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_bool_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->bool_list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_nested_class_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->nested_class_list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_get_map(
    CoreTestsPigeonTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map;
}

static FlValue* core_tests_pigeon_test_all_nullable_types_to_list(
    CoreTestsPigeonTestAllNullableTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_nullable_bool != nullptr
                                   ? fl_value_new_bool(*self->a_nullable_bool)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int64 != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int64)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_double != nullptr
                           ? fl_value_new_float(*self->a_nullable_double)
                           : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_byte_array != nullptr
                  ? fl_value_new_uint8_list(self->a_nullable_byte_array,
                                            self->a_nullable_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable4_byte_array != nullptr
                  ? fl_value_new_int32_list(self->a_nullable4_byte_array,
                                            self->a_nullable4_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable8_byte_array != nullptr
                  ? fl_value_new_int64_list(self->a_nullable8_byte_array,
                                            self->a_nullable8_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_float_array != nullptr
                  ? fl_value_new_float_list(self->a_nullable_float_array,
                                            self->a_nullable_float_array_length)
                  : fl_value_new_null());
  fl_value_append_take(values, self->nullable_nested_list != nullptr
                                   ? fl_value_ref(self->nullable_nested_list)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->nullable_map_with_annotations != nullptr
                           ? fl_value_ref(self->nullable_map_with_annotations)
                           : fl_value_new_null());
  fl_value_append_take(values,
                       self->nullable_map_with_object != nullptr
                           ? fl_value_ref(self->nullable_map_with_object)
                           : fl_value_new_null());
  fl_value_append_take(
      values,
      self->a_nullable_enum != nullptr
          ? fl_value_new_custom(134, fl_value_new_int(*self->a_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_string != nullptr
                           ? fl_value_new_string(self->a_nullable_string)
                           : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_object != nullptr
                                   ? fl_value_ref(self->a_nullable_object)
                                   : fl_value_new_null());
  fl_value_append_take(
      values,
      self->all_nullable_types != nullptr
          ? fl_value_new_custom_object(130, G_OBJECT(self->all_nullable_types))
          : fl_value_new_null());
  fl_value_append_take(values, self->list != nullptr ? fl_value_ref(self->list)
                                                     : fl_value_new_null());
  fl_value_append_take(values, self->string_list != nullptr
                                   ? fl_value_ref(self->string_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_list != nullptr
                                   ? fl_value_ref(self->int_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->double_list != nullptr
                                   ? fl_value_ref(self->double_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->bool_list != nullptr
                                   ? fl_value_ref(self->bool_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->nested_class_list != nullptr
                                   ? fl_value_ref(self->nested_class_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map != nullptr ? fl_value_ref(self->map)
                                                    : fl_value_new_null());
  return values;
}

static CoreTestsPigeonTestAllNullableTypes*
core_tests_pigeon_test_all_nullable_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t* a_nullable_int64 = nullptr;
  int64_t a_nullable_int64_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    a_nullable_int64_value = fl_value_get_int(value2);
    a_nullable_int64 = &a_nullable_int64_value;
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value3);
    a_nullable_double = &a_nullable_double_value;
  }
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_nullable_byte_array =
      fl_value_get_type(value4) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_uint8_list(value4);
  size_t a_nullable_byte_array_length = fl_value_get_length(value4);
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a_nullable4_byte_array =
      fl_value_get_type(value5) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_int32_list(value5);
  size_t a_nullable4_byte_array_length = fl_value_get_length(value5);
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a_nullable8_byte_array =
      fl_value_get_type(value6) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_int64_list(value6);
  size_t a_nullable8_byte_array_length = fl_value_get_length(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_nullable_float_array =
      fl_value_get_type(value7) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_float_list(value7);
  size_t a_nullable_float_array_length = fl_value_get_length(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  FlValue* nullable_nested_list =
      fl_value_get_type(value8) == FL_VALUE_TYPE_NULL ? nullptr : value8;
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* nullable_map_with_annotations =
      fl_value_get_type(value9) == FL_VALUE_TYPE_NULL ? nullptr : value9;
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* nullable_map_with_object =
      fl_value_get_type(value10) == FL_VALUE_TYPE_NULL ? nullptr : value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  CoreTestsPigeonTestAnEnum* a_nullable_enum = nullptr;
  CoreTestsPigeonTestAnEnum a_nullable_enum_value;
  if (fl_value_get_type(value11) != FL_VALUE_TYPE_NULL) {
    a_nullable_enum_value = static_cast<CoreTestsPigeonTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value11)))));
    a_nullable_enum = &a_nullable_enum_value;
  }
  FlValue* value12 = fl_value_get_list_value(values, 12);
  const gchar* a_nullable_string =
      fl_value_get_type(value12) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_string(value12);
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* a_nullable_object =
      fl_value_get_type(value13) == FL_VALUE_TYPE_NULL ? nullptr : value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  CoreTestsPigeonTestAllNullableTypes* all_nullable_types =
      fl_value_get_type(value14) == FL_VALUE_TYPE_NULL
          ? nullptr
          : CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
                fl_value_get_custom_value_object(value14));
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* list =
      fl_value_get_type(value15) == FL_VALUE_TYPE_NULL ? nullptr : value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* string_list =
      fl_value_get_type(value16) == FL_VALUE_TYPE_NULL ? nullptr : value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* int_list =
      fl_value_get_type(value17) == FL_VALUE_TYPE_NULL ? nullptr : value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* double_list =
      fl_value_get_type(value18) == FL_VALUE_TYPE_NULL ? nullptr : value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* bool_list =
      fl_value_get_type(value19) == FL_VALUE_TYPE_NULL ? nullptr : value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* nested_class_list =
      fl_value_get_type(value20) == FL_VALUE_TYPE_NULL ? nullptr : value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map =
      fl_value_get_type(value21) == FL_VALUE_TYPE_NULL ? nullptr : value21;
  return core_tests_pigeon_test_all_nullable_types_new(
      a_nullable_bool, a_nullable_int, a_nullable_int64, a_nullable_double,
      a_nullable_byte_array, a_nullable_byte_array_length,
      a_nullable4_byte_array, a_nullable4_byte_array_length,
      a_nullable8_byte_array, a_nullable8_byte_array_length,
      a_nullable_float_array, a_nullable_float_array_length,
      nullable_nested_list, nullable_map_with_annotations,
      nullable_map_with_object, a_nullable_enum, a_nullable_string,
      a_nullable_object, all_nullable_types, list, string_list, int_list,
      double_list, bool_list, nested_class_list, map);
}

struct _CoreTestsPigeonTestAllNullableTypesWithoutRecursion {
  GObject parent_instance;

  gboolean* a_nullable_bool;
  int64_t* a_nullable_int;
  int64_t* a_nullable_int64;
  double* a_nullable_double;
  uint8_t* a_nullable_byte_array;
  size_t a_nullable_byte_array_length;
  int32_t* a_nullable4_byte_array;
  size_t a_nullable4_byte_array_length;
  int64_t* a_nullable8_byte_array;
  size_t a_nullable8_byte_array_length;
  double* a_nullable_float_array;
  size_t a_nullable_float_array_length;
  FlValue* nullable_nested_list;
  FlValue* nullable_map_with_annotations;
  FlValue* nullable_map_with_object;
  CoreTestsPigeonTestAnEnum* a_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* map;
};

G_DEFINE_TYPE(CoreTestsPigeonTestAllNullableTypesWithoutRecursion,
              core_tests_pigeon_test_all_nullable_types_without_recursion,
              G_TYPE_OBJECT)

static void core_tests_pigeon_test_all_nullable_types_without_recursion_dispose(
    GObject* object) {
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(object);
  g_clear_pointer(&self->a_nullable_bool, g_free);
  g_clear_pointer(&self->a_nullable_int, g_free);
  g_clear_pointer(&self->a_nullable_int64, g_free);
  g_clear_pointer(&self->a_nullable_double, g_free);
  g_clear_pointer(&self->nullable_nested_list, fl_value_unref);
  g_clear_pointer(&self->nullable_map_with_annotations, fl_value_unref);
  g_clear_pointer(&self->nullable_map_with_object, fl_value_unref);
  g_clear_pointer(&self->a_nullable_enum, g_free);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_all_nullable_types_without_recursion_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_all_nullable_types_without_recursion_init(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {}

static void
core_tests_pigeon_test_all_nullable_types_without_recursion_class_init(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursionClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_all_nullable_types_without_recursion_dispose;
}

CoreTestsPigeonTestAllNullableTypesWithoutRecursion*
core_tests_pigeon_test_all_nullable_types_without_recursion_new(
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    int64_t* a_nullable_int64, double* a_nullable_double,
    const uint8_t* a_nullable_byte_array, size_t a_nullable_byte_array_length,
    const int32_t* a_nullable4_byte_array, size_t a_nullable4_byte_array_length,
    const int64_t* a_nullable8_byte_array, size_t a_nullable8_byte_array_length,
    const double* a_nullable_float_array, size_t a_nullable_float_array_length,
    FlValue* nullable_nested_list, FlValue* nullable_map_with_annotations,
    FlValue* nullable_map_with_object,
    CoreTestsPigeonTestAnEnum* a_nullable_enum, const gchar* a_nullable_string,
    FlValue* a_nullable_object, FlValue* list, FlValue* string_list,
    FlValue* int_list, FlValue* double_list, FlValue* bool_list, FlValue* map) {
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(g_object_new(
          core_tests_pigeon_test_all_nullable_types_without_recursion_get_type(),
          nullptr));
  if (a_nullable_bool != nullptr) {
    self->a_nullable_bool = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    *self->a_nullable_bool = *a_nullable_bool;
  } else {
    self->a_nullable_bool = nullptr;
  }
  if (a_nullable_int != nullptr) {
    self->a_nullable_int = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int = *a_nullable_int;
  } else {
    self->a_nullable_int = nullptr;
  }
  if (a_nullable_int64 != nullptr) {
    self->a_nullable_int64 = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int64 = *a_nullable_int64;
  } else {
    self->a_nullable_int64 = nullptr;
  }
  if (a_nullable_double != nullptr) {
    self->a_nullable_double = static_cast<double*>(malloc(sizeof(double)));
    *self->a_nullable_double = *a_nullable_double;
  } else {
    self->a_nullable_double = nullptr;
  }
  self->a_nullable_byte_array = static_cast<uint8_t*>(
      memcpy(malloc(a_nullable_byte_array_length), a_nullable_byte_array,
             a_nullable_byte_array_length));
  self->a_nullable_byte_array_length = a_nullable_byte_array_length;
  self->a_nullable4_byte_array = static_cast<int32_t*>(memcpy(
      malloc(sizeof(int32_t) * a_nullable4_byte_array_length),
      a_nullable4_byte_array, sizeof(int32_t) * a_nullable4_byte_array_length));
  self->a_nullable4_byte_array_length = a_nullable4_byte_array_length;
  self->a_nullable8_byte_array = static_cast<int64_t*>(memcpy(
      malloc(sizeof(int64_t) * a_nullable8_byte_array_length),
      a_nullable8_byte_array, sizeof(int64_t) * a_nullable8_byte_array_length));
  self->a_nullable8_byte_array_length = a_nullable8_byte_array_length;
  self->a_nullable_float_array = static_cast<double*>(memcpy(
      malloc(sizeof(double) * a_nullable_float_array_length),
      a_nullable_float_array, sizeof(double) * a_nullable_float_array_length));
  self->a_nullable_float_array_length = a_nullable_float_array_length;
  self->nullable_nested_list = fl_value_ref(nullable_nested_list);
  self->nullable_map_with_annotations =
      fl_value_ref(nullable_map_with_annotations);
  self->nullable_map_with_object = fl_value_ref(nullable_map_with_object);
  if (a_nullable_enum != nullptr) {
    self->a_nullable_enum = static_cast<CoreTestsPigeonTestAnEnum*>(
        malloc(sizeof(CoreTestsPigeonTestAnEnum)));
    *self->a_nullable_enum = *a_nullable_enum;
  } else {
    self->a_nullable_enum = nullptr;
  }
  self->a_nullable_string = g_strdup(a_nullable_string);
  self->a_nullable_object = fl_value_ref(a_nullable_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->map = fl_value_ref(map);
  return self;
}

gboolean*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_bool(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_bool;
}

int64_t*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_int(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_int;
}

int64_t*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_int64(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_int64;
}

double*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_double(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_double;
}

const uint8_t*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_byte_array(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable_byte_array_length;
  return self->a_nullable_byte_array;
}

const int32_t*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable4_byte_array(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable4_byte_array_length;
  return self->a_nullable4_byte_array;
}

const int64_t*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable8_byte_array(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable8_byte_array_length;
  return self->a_nullable8_byte_array;
}

const double*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_float_array(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable_float_array_length;
  return self->a_nullable_float_array;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_nullable_nested_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->nullable_nested_list;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_nullable_map_with_annotations(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->nullable_map_with_annotations;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_nullable_map_with_object(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->nullable_map_with_object;
}

CoreTestsPigeonTestAnEnum*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_enum(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_enum;
}

const gchar*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_string(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_string;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_a_nullable_object(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_object;
}

FlValue* core_tests_pigeon_test_all_nullable_types_without_recursion_get_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_string_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->string_list;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_int_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->int_list;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_double_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->double_list;
}

FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_get_bool_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->bool_list;
}

FlValue* core_tests_pigeon_test_all_nullable_types_without_recursion_get_map(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_PIGEON_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map;
}

static FlValue*
core_tests_pigeon_test_all_nullable_types_without_recursion_to_list(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_nullable_bool != nullptr
                                   ? fl_value_new_bool(*self->a_nullable_bool)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int64 != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int64)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_double != nullptr
                           ? fl_value_new_float(*self->a_nullable_double)
                           : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_byte_array != nullptr
                  ? fl_value_new_uint8_list(self->a_nullable_byte_array,
                                            self->a_nullable_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable4_byte_array != nullptr
                  ? fl_value_new_int32_list(self->a_nullable4_byte_array,
                                            self->a_nullable4_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable8_byte_array != nullptr
                  ? fl_value_new_int64_list(self->a_nullable8_byte_array,
                                            self->a_nullable8_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_float_array != nullptr
                  ? fl_value_new_float_list(self->a_nullable_float_array,
                                            self->a_nullable_float_array_length)
                  : fl_value_new_null());
  fl_value_append_take(values, self->nullable_nested_list != nullptr
                                   ? fl_value_ref(self->nullable_nested_list)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->nullable_map_with_annotations != nullptr
                           ? fl_value_ref(self->nullable_map_with_annotations)
                           : fl_value_new_null());
  fl_value_append_take(values,
                       self->nullable_map_with_object != nullptr
                           ? fl_value_ref(self->nullable_map_with_object)
                           : fl_value_new_null());
  fl_value_append_take(
      values,
      self->a_nullable_enum != nullptr
          ? fl_value_new_custom(134, fl_value_new_int(*self->a_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_string != nullptr
                           ? fl_value_new_string(self->a_nullable_string)
                           : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_object != nullptr
                                   ? fl_value_ref(self->a_nullable_object)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list != nullptr ? fl_value_ref(self->list)
                                                     : fl_value_new_null());
  fl_value_append_take(values, self->string_list != nullptr
                                   ? fl_value_ref(self->string_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_list != nullptr
                                   ? fl_value_ref(self->int_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->double_list != nullptr
                                   ? fl_value_ref(self->double_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->bool_list != nullptr
                                   ? fl_value_ref(self->bool_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map != nullptr ? fl_value_ref(self->map)
                                                    : fl_value_new_null());
  return values;
}

static CoreTestsPigeonTestAllNullableTypesWithoutRecursion*
core_tests_pigeon_test_all_nullable_types_without_recursion_new_from_list(
    FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t* a_nullable_int64 = nullptr;
  int64_t a_nullable_int64_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    a_nullable_int64_value = fl_value_get_int(value2);
    a_nullable_int64 = &a_nullable_int64_value;
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value3);
    a_nullable_double = &a_nullable_double_value;
  }
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_nullable_byte_array =
      fl_value_get_type(value4) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_uint8_list(value4);
  size_t a_nullable_byte_array_length = fl_value_get_length(value4);
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a_nullable4_byte_array =
      fl_value_get_type(value5) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_int32_list(value5);
  size_t a_nullable4_byte_array_length = fl_value_get_length(value5);
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a_nullable8_byte_array =
      fl_value_get_type(value6) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_int64_list(value6);
  size_t a_nullable8_byte_array_length = fl_value_get_length(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_nullable_float_array =
      fl_value_get_type(value7) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_float_list(value7);
  size_t a_nullable_float_array_length = fl_value_get_length(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  FlValue* nullable_nested_list =
      fl_value_get_type(value8) == FL_VALUE_TYPE_NULL ? nullptr : value8;
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* nullable_map_with_annotations =
      fl_value_get_type(value9) == FL_VALUE_TYPE_NULL ? nullptr : value9;
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* nullable_map_with_object =
      fl_value_get_type(value10) == FL_VALUE_TYPE_NULL ? nullptr : value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  CoreTestsPigeonTestAnEnum* a_nullable_enum = nullptr;
  CoreTestsPigeonTestAnEnum a_nullable_enum_value;
  if (fl_value_get_type(value11) != FL_VALUE_TYPE_NULL) {
    a_nullable_enum_value = static_cast<CoreTestsPigeonTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value11)))));
    a_nullable_enum = &a_nullable_enum_value;
  }
  FlValue* value12 = fl_value_get_list_value(values, 12);
  const gchar* a_nullable_string =
      fl_value_get_type(value12) == FL_VALUE_TYPE_NULL
          ? nullptr
          : fl_value_get_string(value12);
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* a_nullable_object =
      fl_value_get_type(value13) == FL_VALUE_TYPE_NULL ? nullptr : value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* list =
      fl_value_get_type(value14) == FL_VALUE_TYPE_NULL ? nullptr : value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* string_list =
      fl_value_get_type(value15) == FL_VALUE_TYPE_NULL ? nullptr : value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* int_list =
      fl_value_get_type(value16) == FL_VALUE_TYPE_NULL ? nullptr : value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* double_list =
      fl_value_get_type(value17) == FL_VALUE_TYPE_NULL ? nullptr : value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* bool_list =
      fl_value_get_type(value18) == FL_VALUE_TYPE_NULL ? nullptr : value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* map =
      fl_value_get_type(value19) == FL_VALUE_TYPE_NULL ? nullptr : value19;
  return core_tests_pigeon_test_all_nullable_types_without_recursion_new(
      a_nullable_bool, a_nullable_int, a_nullable_int64, a_nullable_double,
      a_nullable_byte_array, a_nullable_byte_array_length,
      a_nullable4_byte_array, a_nullable4_byte_array_length,
      a_nullable8_byte_array, a_nullable8_byte_array_length,
      a_nullable_float_array, a_nullable_float_array_length,
      nullable_nested_list, nullable_map_with_annotations,
      nullable_map_with_object, a_nullable_enum, a_nullable_string,
      a_nullable_object, list, string_list, int_list, double_list, bool_list,
      map);
}

struct _CoreTestsPigeonTestAllClassesWrapper {
  GObject parent_instance;

  CoreTestsPigeonTestAllNullableTypes* all_nullable_types;
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion*
      all_nullable_types_without_recursion;
  CoreTestsPigeonTestAllTypes* all_types;
};

G_DEFINE_TYPE(CoreTestsPigeonTestAllClassesWrapper,
              core_tests_pigeon_test_all_classes_wrapper, G_TYPE_OBJECT)

static void core_tests_pigeon_test_all_classes_wrapper_dispose(
    GObject* object) {
  CoreTestsPigeonTestAllClassesWrapper* self =
      CORE_TESTS_PIGEON_TEST_ALL_CLASSES_WRAPPER(object);
  g_clear_object(&self->all_nullable_types);
  g_clear_object(&self->all_nullable_types_without_recursion);
  g_clear_object(&self->all_types);
  G_OBJECT_CLASS(core_tests_pigeon_test_all_classes_wrapper_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_all_classes_wrapper_init(
    CoreTestsPigeonTestAllClassesWrapper* self) {}

static void core_tests_pigeon_test_all_classes_wrapper_class_init(
    CoreTestsPigeonTestAllClassesWrapperClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_all_classes_wrapper_dispose;
}

CoreTestsPigeonTestAllClassesWrapper*
core_tests_pigeon_test_all_classes_wrapper_new(
    CoreTestsPigeonTestAllNullableTypes* all_nullable_types,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion*
        all_nullable_types_without_recursion,
    CoreTestsPigeonTestAllTypes* all_types) {
  CoreTestsPigeonTestAllClassesWrapper* self =
      CORE_TESTS_PIGEON_TEST_ALL_CLASSES_WRAPPER(g_object_new(
          core_tests_pigeon_test_all_classes_wrapper_get_type(), nullptr));
  self->all_nullable_types = CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
      g_object_ref(all_nullable_types));
  self->all_nullable_types_without_recursion =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          g_object_ref(all_nullable_types_without_recursion));
  self->all_types = CORE_TESTS_PIGEON_TEST_ALL_TYPES(g_object_ref(all_types));
  return self;
}

CoreTestsPigeonTestAllNullableTypes*
core_tests_pigeon_test_all_classes_wrapper_get_all_nullable_types(
    CoreTestsPigeonTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_nullable_types;
}

CoreTestsPigeonTestAllNullableTypesWithoutRecursion*
core_tests_pigeon_test_all_classes_wrapper_get_all_nullable_types_without_recursion(
    CoreTestsPigeonTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_nullable_types_without_recursion;
}

CoreTestsPigeonTestAllTypes*
core_tests_pigeon_test_all_classes_wrapper_get_all_types(
    CoreTestsPigeonTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_types;
}

static FlValue* core_tests_pigeon_test_all_classes_wrapper_to_list(
    CoreTestsPigeonTestAllClassesWrapper* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_custom_object(
                                   130, G_OBJECT(self->all_nullable_types)));
  fl_value_append_take(
      values,
      self->all_nullable_types_without_recursion != nullptr
          ? fl_value_new_custom_object(
                131, G_OBJECT(self->all_nullable_types_without_recursion))
          : fl_value_new_null());
  fl_value_append_take(
      values, self->all_types != nullptr
                  ? fl_value_new_custom_object(129, G_OBJECT(self->all_types))
                  : fl_value_new_null());
  return values;
}

static CoreTestsPigeonTestAllClassesWrapper*
core_tests_pigeon_test_all_classes_wrapper_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  CoreTestsPigeonTestAllNullableTypes* all_nullable_types =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  FlValue* value1 = fl_value_get_list_value(values, 1);
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion*
      all_nullable_types_without_recursion =
          fl_value_get_type(value1) == FL_VALUE_TYPE_NULL
              ? nullptr
              : CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
                    fl_value_get_custom_value_object(value1));
  FlValue* value2 = fl_value_get_list_value(values, 2);
  CoreTestsPigeonTestAllTypes* all_types =
      fl_value_get_type(value2) == FL_VALUE_TYPE_NULL
          ? nullptr
          : CORE_TESTS_PIGEON_TEST_ALL_TYPES(
                fl_value_get_custom_value_object(value2));
  return core_tests_pigeon_test_all_classes_wrapper_new(
      all_nullable_types, all_nullable_types_without_recursion, all_types);
}

struct _CoreTestsPigeonTestTestMessage {
  GObject parent_instance;

  FlValue* test_list;
};

G_DEFINE_TYPE(CoreTestsPigeonTestTestMessage,
              core_tests_pigeon_test_test_message, G_TYPE_OBJECT)

static void core_tests_pigeon_test_test_message_dispose(GObject* object) {
  CoreTestsPigeonTestTestMessage* self =
      CORE_TESTS_PIGEON_TEST_TEST_MESSAGE(object);
  g_clear_pointer(&self->test_list, fl_value_unref);
  G_OBJECT_CLASS(core_tests_pigeon_test_test_message_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_test_message_init(
    CoreTestsPigeonTestTestMessage* self) {}

static void core_tests_pigeon_test_test_message_class_init(
    CoreTestsPigeonTestTestMessageClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_pigeon_test_test_message_dispose;
}

CoreTestsPigeonTestTestMessage* core_tests_pigeon_test_test_message_new(
    FlValue* test_list) {
  CoreTestsPigeonTestTestMessage* self = CORE_TESTS_PIGEON_TEST_TEST_MESSAGE(
      g_object_new(core_tests_pigeon_test_test_message_get_type(), nullptr));
  self->test_list = fl_value_ref(test_list);
  return self;
}

FlValue* core_tests_pigeon_test_test_message_get_test_list(
    CoreTestsPigeonTestTestMessage* self) {
  g_return_val_if_fail(CORE_TESTS_PIGEON_TEST_IS_TEST_MESSAGE(self), nullptr);
  return self->test_list;
}

static FlValue* core_tests_pigeon_test_test_message_to_list(
    CoreTestsPigeonTestTestMessage* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->test_list != nullptr
                                   ? fl_value_ref(self->test_list)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsPigeonTestTestMessage*
core_tests_pigeon_test_test_message_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  FlValue* test_list =
      fl_value_get_type(value0) == FL_VALUE_TYPE_NULL ? nullptr : value0;
  return core_tests_pigeon_test_test_message_new(test_list);
}

G_DECLARE_FINAL_TYPE(CoreTestsPigeonTestMessageCodec,
                     core_tests_pigeon_test_message_codec,
                     CORE_TESTS_PIGEON_TEST, MESSAGE_CODEC,
                     FlStandardMessageCodec)

struct _CoreTestsPigeonTestMessageCodec {
  FlStandardMessageCodec parent_instance;
};

G_DEFINE_TYPE(CoreTestsPigeonTestMessageCodec,
              core_tests_pigeon_test_message_codec,
              fl_standard_message_codec_get_type())

static gboolean
core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsPigeonTestAllTypes* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = core_tests_pigeon_test_all_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_nullable_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsPigeonTestAllNullableTypes* value, GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_pigeon_test_all_nullable_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_nullable_types_without_recursion(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* value,
    GError** error) {
  uint8_t type = 131;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_pigeon_test_all_nullable_types_without_recursion_to_list(
          value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_classes_wrapper(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsPigeonTestAllClassesWrapper* value, GError** error) {
  uint8_t type = 132;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_pigeon_test_all_classes_wrapper_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_test_message(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsPigeonTestTestMessage* value, GError** error) {
  uint8_t type = 133;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_pigeon_test_test_message_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_an_enum(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  uint8_t type = 134;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean core_tests_pigeon_test_message_codec_write_value(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_types(
            codec, buffer,
            CORE_TESTS_PIGEON_TEST_ALL_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case 130:
        return core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_nullable_types(
            codec, buffer,
            CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case 131:
        return core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_nullable_types_without_recursion(
            codec, buffer,
            CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
                fl_value_get_custom_value_object(value)),
            error);
      case 132:
        return core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_all_classes_wrapper(
            codec, buffer,
            CORE_TESTS_PIGEON_TEST_ALL_CLASSES_WRAPPER(
                fl_value_get_custom_value_object(value)),
            error);
      case 133:
        return core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_test_message(
            codec, buffer,
            CORE_TESTS_PIGEON_TEST_TEST_MESSAGE(
                fl_value_get_custom_value_object(value)),
            error);
      case 134:
        return core_tests_pigeon_test_message_codec_write_core_tests_pigeon_test_an_enum(
            codec, buffer,
            reinterpret_cast<FlValue*>(
                const_cast<gpointer>(fl_value_get_custom_value(value))),
            error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(
             core_tests_pigeon_test_message_codec_parent_class)
      ->write_value(codec, buffer, value, error);
}

static FlValue*
core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsPigeonTestAllTypes) value =
      core_tests_pigeon_test_all_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(129, G_OBJECT(value));
}

static FlValue*
core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_nullable_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsPigeonTestAllNullableTypes) value =
      core_tests_pigeon_test_all_nullable_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(130, G_OBJECT(value));
}

static FlValue*
core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_nullable_types_without_recursion(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsPigeonTestAllNullableTypesWithoutRecursion) value =
      core_tests_pigeon_test_all_nullable_types_without_recursion_new_from_list(
          values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(131, G_OBJECT(value));
}

static FlValue*
core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_classes_wrapper(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsPigeonTestAllClassesWrapper) value =
      core_tests_pigeon_test_all_classes_wrapper_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(132, G_OBJECT(value));
}

static FlValue*
core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_test_message(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsPigeonTestTestMessage) value =
      core_tests_pigeon_test_test_message_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(133, G_OBJECT(value));
}

static FlValue*
core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_an_enum(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  return fl_value_new_custom(
      134, fl_standard_message_codec_read_value(codec, buffer, offset, error),
      (GDestroyNotify)fl_value_unref);
}

static FlValue* core_tests_pigeon_test_message_codec_read_value_of_type(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type,
    GError** error) {
  switch (type) {
    case 129:
      return core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_types(
          codec, buffer, offset, error);
    case 130:
      return core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_nullable_types(
          codec, buffer, offset, error);
    case 131:
      return core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_nullable_types_without_recursion(
          codec, buffer, offset, error);
    case 132:
      return core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_all_classes_wrapper(
          codec, buffer, offset, error);
    case 133:
      return core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_test_message(
          codec, buffer, offset, error);
    case 134:
      return core_tests_pigeon_test_message_codec_read_core_tests_pigeon_test_an_enum(
          codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(
                 core_tests_pigeon_test_message_codec_parent_class)
          ->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void core_tests_pigeon_test_message_codec_init(
    CoreTestsPigeonTestMessageCodec* self) {}

static void core_tests_pigeon_test_message_codec_class_init(
    CoreTestsPigeonTestMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value =
      core_tests_pigeon_test_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type =
      core_tests_pigeon_test_message_codec_read_value_of_type;
}

static CoreTestsPigeonTestMessageCodec*
core_tests_pigeon_test_message_codec_new() {
  CoreTestsPigeonTestMessageCodec* self = CORE_TESTS_PIGEON_TEST_MESSAGE_CODEC(
      g_object_new(core_tests_pigeon_test_message_codec_get_type(), nullptr));
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse,
              core_tests_pigeon_test_host_integration_core_api_noop_response,
              G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_noop_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_noop_response_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_integration_core_api_noop_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_noop_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_noop_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse*
core_tests_pigeon_test_host_integration_core_api_noop_response_new() {
  CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse*
core_tests_pigeon_test_host_integration_core_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_new(
    CoreTestsPigeonTestAllTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(129, G_OBJECT(return_value)));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_throw_error_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_error_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_new() {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_int_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_int_response_new(
    int64_t return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_double_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_double_response_new(
    double return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_bool_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_bool_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_bool_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_bool_response_new(
    gboolean return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_string_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_object_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_object_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_object_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_object_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_object_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_object_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_list_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_list_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_map_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_map_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_map_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_map_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_map_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse*
core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_new(
    CoreTestsPigeonTestAllClassesWrapper* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(132, G_OBJECT(return_value)));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse*
core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_enum_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_enum_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_enum_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_enum_response_new(
    CoreTestsPigeonTestAnEnum return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom(134, fl_value_new_int(return_value),
                                           (GDestroyNotify)fl_value_unref));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_echo_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_new(
    double return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_required_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_new(
    int64_t return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_required_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_new(
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(130, G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(131, G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_new(
    CoreTestsPigeonTestAllClassesWrapper* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(132, G_OBJECT(return_value)));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_new(
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(130, G_OBJECT(return_value)));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(131, G_OBJECT(return_value)));
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_new(
    double* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_new(
    CoreTestsPigeonTestAnEnum* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(134, fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse,
    core_tests_pigeon_test_host_integration_core_api_noop_async_response,
    CORE_TESTS_PIGEON_TEST, HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE,
    GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse,
    core_tests_pigeon_test_host_integration_core_api_noop_async_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_noop_async_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_noop_async_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_noop_async_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_noop_async_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_noop_async_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse*
core_tests_pigeon_test_host_integration_core_api_noop_async_response_new() {
  CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_noop_async_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse*
core_tests_pigeon_test_host_integration_core_api_noop_async_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_noop_async_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_int_response,
    CORE_TESTS_PIGEON_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE,
    GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_new(
    int64_t return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_double_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_new(
    double return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response,
    CORE_TESTS_PIGEON_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE,
    GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_new(
    gboolean return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_string_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_object_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_object_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_list_response,
    CORE_TESTS_PIGEON_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE,
    GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_map_response,
    CORE_TESTS_PIGEON_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE,
    GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_map_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response,
    CORE_TESTS_PIGEON_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE,
    GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_new(
    CoreTestsPigeonTestAnEnum return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom(134, fl_value_new_int(return_value),
                                           (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_async_error_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_async_error_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_new() {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_new(
    CoreTestsPigeonTestAllTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(129, G_OBJECT(return_value)));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(130, G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(131, G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_new(
    double* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_new(
    CoreTestsPigeonTestAnEnum* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(134, fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse* self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_new() {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new() {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_new(
    CoreTestsPigeonTestAllTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(129, G_OBJECT(return_value)));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(130, G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(130, G_OBJECT(return_value)));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(131, G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new(
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(131, G_OBJECT(return_value)));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_new(
    gboolean return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_new(
    int64_t return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_new(
    double return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self) {
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE, GObject)

struct _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_new(
    CoreTestsPigeonTestAnEnum return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom(134, fl_value_new_int(return_value),
                                           (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
    double* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self = CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE, GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
    CoreTestsPigeonTestAnEnum* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(134, fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response,
    CORE_TESTS_PIGEON_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE,
    GObject)

struct
    _CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse,
    core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
      self =
          CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
        self) {}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_dispose;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostIntegrationCoreApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  const CoreTestsPigeonTestHostIntegrationCoreApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;

  FlBasicMessageChannel* noop_channel;
  FlBasicMessageChannel* echo_all_types_channel;
  FlBasicMessageChannel* throw_error_channel;
  FlBasicMessageChannel* throw_error_from_void_channel;
  FlBasicMessageChannel* throw_flutter_error_channel;
  FlBasicMessageChannel* echo_int_channel;
  FlBasicMessageChannel* echo_double_channel;
  FlBasicMessageChannel* echo_bool_channel;
  FlBasicMessageChannel* echo_string_channel;
  FlBasicMessageChannel* echo_uint8_list_channel;
  FlBasicMessageChannel* echo_object_channel;
  FlBasicMessageChannel* echo_list_channel;
  FlBasicMessageChannel* echo_map_channel;
  FlBasicMessageChannel* echo_class_wrapper_channel;
  FlBasicMessageChannel* echo_enum_channel;
  FlBasicMessageChannel* echo_named_default_string_channel;
  FlBasicMessageChannel* echo_optional_default_double_channel;
  FlBasicMessageChannel* echo_required_int_channel;
  FlBasicMessageChannel* echo_all_nullable_types_channel;
  FlBasicMessageChannel* echo_all_nullable_types_without_recursion_channel;
  FlBasicMessageChannel* extract_nested_nullable_string_channel;
  FlBasicMessageChannel* create_nested_nullable_string_channel;
  FlBasicMessageChannel* send_multiple_nullable_types_channel;
  FlBasicMessageChannel* send_multiple_nullable_types_without_recursion_channel;
  FlBasicMessageChannel* echo_nullable_int_channel;
  FlBasicMessageChannel* echo_nullable_double_channel;
  FlBasicMessageChannel* echo_nullable_bool_channel;
  FlBasicMessageChannel* echo_nullable_string_channel;
  FlBasicMessageChannel* echo_nullable_uint8_list_channel;
  FlBasicMessageChannel* echo_nullable_object_channel;
  FlBasicMessageChannel* echo_nullable_list_channel;
  FlBasicMessageChannel* echo_nullable_map_channel;
  FlBasicMessageChannel* echo_nullable_enum_channel;
  FlBasicMessageChannel* echo_optional_nullable_int_channel;
  FlBasicMessageChannel* echo_named_nullable_string_channel;
  FlBasicMessageChannel* noop_async_channel;
  FlBasicMessageChannel* echo_async_int_channel;
  FlBasicMessageChannel* echo_async_double_channel;
  FlBasicMessageChannel* echo_async_bool_channel;
  FlBasicMessageChannel* echo_async_string_channel;
  FlBasicMessageChannel* echo_async_uint8_list_channel;
  FlBasicMessageChannel* echo_async_object_channel;
  FlBasicMessageChannel* echo_async_list_channel;
  FlBasicMessageChannel* echo_async_map_channel;
  FlBasicMessageChannel* echo_async_enum_channel;
  FlBasicMessageChannel* throw_async_error_channel;
  FlBasicMessageChannel* throw_async_error_from_void_channel;
  FlBasicMessageChannel* throw_async_flutter_error_channel;
  FlBasicMessageChannel* echo_async_all_types_channel;
  FlBasicMessageChannel* echo_async_nullable_all_nullable_types_channel;
  FlBasicMessageChannel*
      echo_async_nullable_all_nullable_types_without_recursion_channel;
  FlBasicMessageChannel* echo_async_nullable_int_channel;
  FlBasicMessageChannel* echo_async_nullable_double_channel;
  FlBasicMessageChannel* echo_async_nullable_bool_channel;
  FlBasicMessageChannel* echo_async_nullable_string_channel;
  FlBasicMessageChannel* echo_async_nullable_uint8_list_channel;
  FlBasicMessageChannel* echo_async_nullable_object_channel;
  FlBasicMessageChannel* echo_async_nullable_list_channel;
  FlBasicMessageChannel* echo_async_nullable_map_channel;
  FlBasicMessageChannel* echo_async_nullable_enum_channel;
  FlBasicMessageChannel* call_flutter_noop_channel;
  FlBasicMessageChannel* call_flutter_throw_error_channel;
  FlBasicMessageChannel* call_flutter_throw_error_from_void_channel;
  FlBasicMessageChannel* call_flutter_echo_all_types_channel;
  FlBasicMessageChannel* call_flutter_echo_all_nullable_types_channel;
  FlBasicMessageChannel* call_flutter_send_multiple_nullable_types_channel;
  FlBasicMessageChannel*
      call_flutter_echo_all_nullable_types_without_recursion_channel;
  FlBasicMessageChannel*
      call_flutter_send_multiple_nullable_types_without_recursion_channel;
  FlBasicMessageChannel* call_flutter_echo_bool_channel;
  FlBasicMessageChannel* call_flutter_echo_int_channel;
  FlBasicMessageChannel* call_flutter_echo_double_channel;
  FlBasicMessageChannel* call_flutter_echo_string_channel;
  FlBasicMessageChannel* call_flutter_echo_uint8_list_channel;
  FlBasicMessageChannel* call_flutter_echo_list_channel;
  FlBasicMessageChannel* call_flutter_echo_map_channel;
  FlBasicMessageChannel* call_flutter_echo_enum_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_bool_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_int_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_double_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_string_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_uint8_list_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_list_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_map_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_enum_channel;
  FlBasicMessageChannel* call_flutter_small_api_echo_string_channel;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostIntegrationCoreApi,
              core_tests_pigeon_test_host_integration_core_api, G_TYPE_OBJECT)

static void core_tests_pigeon_test_host_integration_core_api_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiNoopResponse) response =
      self->vtable->noop(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noop", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllTypes* everything = CORE_TESTS_PIGEON_TEST_ALL_TYPES(
      fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoAllTypesResponse)
      response =
          self->vtable->echo_all_types(self, everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllTypes", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorResponse)
      response = self->vtable->throw_error(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwError", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_error_from_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiThrowErrorFromVoidResponse)
      response = self->vtable->throw_error_from_void(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwErrorFromVoid");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwErrorFromVoid", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_flutter_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiThrowFlutterErrorResponse)
      response = self->vtable->throw_flutter_error(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwFlutterError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwFlutterError", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoIntResponse) response =
      self->vtable->echo_int(self, an_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoInt", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoDoubleResponse)
      response = self->vtable->echo_double(self, a_double, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoDouble", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoBoolResponse)
      response = self->vtable->echo_bool(self, a_bool, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoBool", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoStringResponse)
      response = self->vtable->echo_string(self, a_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoString", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoUint8ListResponse)
      response = self->vtable->echo_uint8_list(
          self, a_uint8_list, a_uint8_list_length, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoUint8List", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoObjectResponse)
      response = self->vtable->echo_object(self, an_object, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoObject", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoListResponse)
      response = self->vtable->echo_list(self, list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoList", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_map = value0;
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoMapResponse) response =
      self->vtable->echo_map(self, a_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoMap", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_wrapper == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllClassesWrapper* wrapper =
      CORE_TESTS_PIGEON_TEST_ALL_CLASSES_WRAPPER(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoClassWrapperResponse)
      response =
          self->vtable->echo_class_wrapper(self, wrapper, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassWrapper");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassWrapper", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAnEnum an_enum = static_cast<CoreTestsPigeonTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoEnumResponse)
      response = self->vtable->echo_enum(self, an_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnum", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_default_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedDefaultStringResponse)
      response = self->vtable->echo_named_default_string(self, a_string,
                                                         self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNamedDefaultString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNamedDefaultString", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_default_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse)
      response = self->vtable->echo_optional_default_double(self, a_double,
                                                            self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoOptionalDefaultDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoOptionalDefaultDouble", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_required_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_required_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoRequiredIntResponse)
      response = self->vtable->echo_required_int(self, an_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoRequiredInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoRequiredInt", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllNullableTypes* everything =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesResponse)
      response = self->vtable->echo_all_nullable_types(self, everything,
                                                       self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllNullableTypes", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types_without_recursion == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse)
      response = self->vtable->echo_all_nullable_types_without_recursion(
          self, everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllNullableTypesWithoutRecursion");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllNullableTypesWithoutRecursion", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->extract_nested_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllClassesWrapper* wrapper =
      CORE_TESTS_PIGEON_TEST_ALL_CLASSES_WRAPPER(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiExtractNestedNullableStringResponse)
      response = self->vtable->extract_nested_nullable_string(self, wrapper,
                                                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "extractNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "extractNestedNullableString", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->create_nested_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCreateNestedNullableStringResponse)
      response = self->vtable->create_nested_nullable_string(
          self, nullable_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "createNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "createNestedNullableString", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesResponse)
      response = self->vtable->send_multiple_nullable_types(
          self, a_nullable_bool, a_nullable_int, a_nullable_string,
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypes", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types_without_recursion == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse)
      response = self->vtable->send_multiple_nullable_types_without_recursion(
          self, a_nullable_bool, a_nullable_int, a_nullable_string,
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypesWithoutRecursion");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypesWithoutRecursion", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value0);
    a_nullable_int = &a_nullable_int_value;
  }
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableIntResponse)
      response = self->vtable->echo_nullable_int(self, a_nullable_int,
                                                 self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableInt", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value0);
    a_nullable_double = &a_nullable_double_value;
  }
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableDoubleResponse)
      response = self->vtable->echo_nullable_double(self, a_nullable_double,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableDouble", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableBoolResponse)
      response = self->vtable->echo_nullable_bool(self, a_nullable_bool,
                                                  self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableBool", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_nullable_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableStringResponse)
      response = self->vtable->echo_nullable_string(self, a_nullable_string,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableString", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_nullable_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_nullable_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableUint8ListResponse)
      response = self->vtable->echo_nullable_uint8_list(
          self, a_nullable_uint8_list, a_nullable_uint8_list_length,
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableUint8List", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_object = value0;
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableObjectResponse)
      response = self->vtable->echo_nullable_object(self, a_nullable_object,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableObject", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_list = value0;
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableListResponse)
      response = self->vtable->echo_nullable_list(self, a_nullable_list,
                                                  self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableList", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_map = value0;
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableMapResponse)
      response = self->vtable->echo_nullable_map(self, a_nullable_map,
                                                 self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableMap", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAnEnum* an_enum = nullptr;
  CoreTestsPigeonTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsPigeonTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoNullableEnumResponse)
      response =
          self->vtable->echo_nullable_enum(self, an_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnum", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value0);
    a_nullable_int = &a_nullable_int_value;
  }
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoOptionalNullableIntResponse)
      response = self->vtable->echo_optional_nullable_int(self, a_nullable_int,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoOptionalNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoOptionalNullableInt", error->message);
  }
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoNamedNullableStringResponse)
      response = self->vtable->echo_named_nullable_string(
          self, a_nullable_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNamedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNamedNullableString", error->message);
  }
}

static void core_tests_pigeon_test_host_integration_core_api_noop_async_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop_async == nullptr) {
    return;
  }

  self->vtable->noop_async(self, response_handle, self->user_data);
}

static void core_tests_pigeon_test_host_integration_core_api_echo_async_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  self->vtable->echo_async_int(self, an_int, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  self->vtable->echo_async_double(self, a_double, response_handle,
                                  self->user_data);
}

static void core_tests_pigeon_test_host_integration_core_api_echo_async_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  self->vtable->echo_async_bool(self, a_bool, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  self->vtable->echo_async_string(self, a_string, response_handle,
                                  self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  self->vtable->echo_async_uint8_list(self, a_uint8_list, a_uint8_list_length,
                                      response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  self->vtable->echo_async_object(self, an_object, response_handle,
                                  self->user_data);
}

static void core_tests_pigeon_test_host_integration_core_api_echo_async_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  self->vtable->echo_async_list(self, list, response_handle, self->user_data);
}

static void core_tests_pigeon_test_host_integration_core_api_echo_async_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_map = value0;
  self->vtable->echo_async_map(self, a_map, response_handle, self->user_data);
}

static void core_tests_pigeon_test_host_integration_core_api_echo_async_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAnEnum an_enum = static_cast<CoreTestsPigeonTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  self->vtable->echo_async_enum(self, an_enum, response_handle,
                                self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_async_error == nullptr) {
    return;
  }

  self->vtable->throw_async_error(self, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_error_from_void == nullptr) {
    return;
  }

  self->vtable->throw_async_error_from_void(self, response_handle,
                                            self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_flutter_error == nullptr) {
    return;
  }

  self->vtable->throw_async_flutter_error(self, response_handle,
                                          self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllTypes* everything = CORE_TESTS_PIGEON_TEST_ALL_TYPES(
      fl_value_get_custom_value_object(value0));
  self->vtable->echo_async_all_types(self, everything, response_handle,
                                     self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllNullableTypes* everything =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  self->vtable->echo_async_nullable_all_nullable_types(
      self, everything, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  self->vtable->echo_async_nullable_all_nullable_types_without_recursion(
      self, everything, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* an_int = nullptr;
  int64_t an_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_int_value = fl_value_get_int(value0);
    an_int = &an_int_value;
  }
  self->vtable->echo_async_nullable_int(self, an_int, response_handle,
                                        self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_double = nullptr;
  double a_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_double_value = fl_value_get_float(value0);
    a_double = &a_double_value;
  }
  self->vtable->echo_async_nullable_double(self, a_double, response_handle,
                                           self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_bool = nullptr;
  gboolean a_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_bool_value = fl_value_get_bool(value0);
    a_bool = &a_bool_value;
  }
  self->vtable->echo_async_nullable_bool(self, a_bool, response_handle,
                                         self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  self->vtable->echo_async_nullable_string(self, a_string, response_handle,
                                           self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  self->vtable->echo_async_nullable_uint8_list(
      self, a_uint8_list, a_uint8_list_length, response_handle,
      self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  self->vtable->echo_async_nullable_object(self, an_object, response_handle,
                                           self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  self->vtable->echo_async_nullable_list(self, list, response_handle,
                                         self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_map = value0;
  self->vtable->echo_async_nullable_map(self, a_map, response_handle,
                                        self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAnEnum* an_enum = nullptr;
  CoreTestsPigeonTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsPigeonTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  self->vtable->echo_async_nullable_enum(self, an_enum, response_handle,
                                         self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->call_flutter_noop == nullptr) {
    return;
  }

  self->vtable->call_flutter_noop(self, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error == nullptr) {
    return;
  }

  self->vtable->call_flutter_throw_error(self, response_handle,
                                         self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error_from_void == nullptr) {
    return;
  }

  self->vtable->call_flutter_throw_error_from_void(self, response_handle,
                                                   self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllTypes* everything = CORE_TESTS_PIGEON_TEST_ALL_TYPES(
      fl_value_get_custom_value_object(value0));
  self->vtable->call_flutter_echo_all_types(self, everything, response_handle,
                                            self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllNullableTypes* everything =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  self->vtable->call_flutter_echo_all_nullable_types(
      self, everything, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_send_multiple_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  self->vtable->call_flutter_send_multiple_nullable_types(
      self, a_nullable_bool, a_nullable_int, a_nullable_string, response_handle,
      self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  self->vtable->call_flutter_echo_all_nullable_types_without_recursion(
      self, everything, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable
              ->call_flutter_send_multiple_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  self->vtable->call_flutter_send_multiple_nullable_types_without_recursion(
      self, a_nullable_bool, a_nullable_int, a_nullable_string, response_handle,
      self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  self->vtable->call_flutter_echo_bool(self, a_bool, response_handle,
                                       self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  self->vtable->call_flutter_echo_int(self, an_int, response_handle,
                                      self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  self->vtable->call_flutter_echo_double(self, a_double, response_handle,
                                         self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  self->vtable->call_flutter_echo_string(self, a_string, response_handle,
                                         self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* list = fl_value_get_uint8_list(value0);
  size_t list_length = fl_value_get_length(value0);
  self->vtable->call_flutter_echo_uint8_list(self, list, list_length,
                                             response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  self->vtable->call_flutter_echo_list(self, list, response_handle,
                                       self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_map = value0;
  self->vtable->call_flutter_echo_map(self, a_map, response_handle,
                                      self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAnEnum an_enum = static_cast<CoreTestsPigeonTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  self->vtable->call_flutter_echo_enum(self, an_enum, response_handle,
                                       self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_bool = nullptr;
  gboolean a_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_bool_value = fl_value_get_bool(value0);
    a_bool = &a_bool_value;
  }
  self->vtable->call_flutter_echo_nullable_bool(self, a_bool, response_handle,
                                                self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* an_int = nullptr;
  int64_t an_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_int_value = fl_value_get_int(value0);
    an_int = &an_int_value;
  }
  self->vtable->call_flutter_echo_nullable_int(self, an_int, response_handle,
                                               self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_double = nullptr;
  double a_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_double_value = fl_value_get_float(value0);
    a_double = &a_double_value;
  }
  self->vtable->call_flutter_echo_nullable_double(
      self, a_double, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  self->vtable->call_flutter_echo_nullable_string(
      self, a_string, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* list = fl_value_get_uint8_list(value0);
  size_t list_length = fl_value_get_length(value0);
  self->vtable->call_flutter_echo_nullable_uint8_list(
      self, list, list_length, response_handle, self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  self->vtable->call_flutter_echo_nullable_list(self, list, response_handle,
                                                self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_map = value0;
  self->vtable->call_flutter_echo_nullable_map(self, a_map, response_handle,
                                               self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsPigeonTestAnEnum* an_enum = nullptr;
  CoreTestsPigeonTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsPigeonTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  self->vtable->call_flutter_echo_nullable_enum(self, an_enum, response_handle,
                                                self->user_data);
}

static void
core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_small_api_echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  self->vtable->call_flutter_small_api_echo_string(
      self, a_string, response_handle, self->user_data);
}

static void core_tests_pigeon_test_host_integration_core_api_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(object);
  g_clear_object(&self->messenger);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;

  g_clear_object(&self->noop_channel);
  g_clear_object(&self->echo_all_types_channel);
  g_clear_object(&self->throw_error_channel);
  g_clear_object(&self->throw_error_from_void_channel);
  g_clear_object(&self->throw_flutter_error_channel);
  g_clear_object(&self->echo_int_channel);
  g_clear_object(&self->echo_double_channel);
  g_clear_object(&self->echo_bool_channel);
  g_clear_object(&self->echo_string_channel);
  g_clear_object(&self->echo_uint8_list_channel);
  g_clear_object(&self->echo_object_channel);
  g_clear_object(&self->echo_list_channel);
  g_clear_object(&self->echo_map_channel);
  g_clear_object(&self->echo_class_wrapper_channel);
  g_clear_object(&self->echo_enum_channel);
  g_clear_object(&self->echo_named_default_string_channel);
  g_clear_object(&self->echo_optional_default_double_channel);
  g_clear_object(&self->echo_required_int_channel);
  g_clear_object(&self->echo_all_nullable_types_channel);
  g_clear_object(&self->echo_all_nullable_types_without_recursion_channel);
  g_clear_object(&self->extract_nested_nullable_string_channel);
  g_clear_object(&self->create_nested_nullable_string_channel);
  g_clear_object(&self->send_multiple_nullable_types_channel);
  g_clear_object(&self->send_multiple_nullable_types_without_recursion_channel);
  g_clear_object(&self->echo_nullable_int_channel);
  g_clear_object(&self->echo_nullable_double_channel);
  g_clear_object(&self->echo_nullable_bool_channel);
  g_clear_object(&self->echo_nullable_string_channel);
  g_clear_object(&self->echo_nullable_uint8_list_channel);
  g_clear_object(&self->echo_nullable_object_channel);
  g_clear_object(&self->echo_nullable_list_channel);
  g_clear_object(&self->echo_nullable_map_channel);
  g_clear_object(&self->echo_nullable_enum_channel);
  g_clear_object(&self->echo_optional_nullable_int_channel);
  g_clear_object(&self->echo_named_nullable_string_channel);
  g_clear_object(&self->noop_async_channel);
  g_clear_object(&self->echo_async_int_channel);
  g_clear_object(&self->echo_async_double_channel);
  g_clear_object(&self->echo_async_bool_channel);
  g_clear_object(&self->echo_async_string_channel);
  g_clear_object(&self->echo_async_uint8_list_channel);
  g_clear_object(&self->echo_async_object_channel);
  g_clear_object(&self->echo_async_list_channel);
  g_clear_object(&self->echo_async_map_channel);
  g_clear_object(&self->echo_async_enum_channel);
  g_clear_object(&self->throw_async_error_channel);
  g_clear_object(&self->throw_async_error_from_void_channel);
  g_clear_object(&self->throw_async_flutter_error_channel);
  g_clear_object(&self->echo_async_all_types_channel);
  g_clear_object(&self->echo_async_nullable_all_nullable_types_channel);
  g_clear_object(
      &self->echo_async_nullable_all_nullable_types_without_recursion_channel);
  g_clear_object(&self->echo_async_nullable_int_channel);
  g_clear_object(&self->echo_async_nullable_double_channel);
  g_clear_object(&self->echo_async_nullable_bool_channel);
  g_clear_object(&self->echo_async_nullable_string_channel);
  g_clear_object(&self->echo_async_nullable_uint8_list_channel);
  g_clear_object(&self->echo_async_nullable_object_channel);
  g_clear_object(&self->echo_async_nullable_list_channel);
  g_clear_object(&self->echo_async_nullable_map_channel);
  g_clear_object(&self->echo_async_nullable_enum_channel);
  g_clear_object(&self->call_flutter_noop_channel);
  g_clear_object(&self->call_flutter_throw_error_channel);
  g_clear_object(&self->call_flutter_throw_error_from_void_channel);
  g_clear_object(&self->call_flutter_echo_all_types_channel);
  g_clear_object(&self->call_flutter_echo_all_nullable_types_channel);
  g_clear_object(&self->call_flutter_send_multiple_nullable_types_channel);
  g_clear_object(
      &self->call_flutter_echo_all_nullable_types_without_recursion_channel);
  g_clear_object(
      &self->call_flutter_send_multiple_nullable_types_without_recursion_channel);
  g_clear_object(&self->call_flutter_echo_bool_channel);
  g_clear_object(&self->call_flutter_echo_int_channel);
  g_clear_object(&self->call_flutter_echo_double_channel);
  g_clear_object(&self->call_flutter_echo_string_channel);
  g_clear_object(&self->call_flutter_echo_uint8_list_channel);
  g_clear_object(&self->call_flutter_echo_list_channel);
  g_clear_object(&self->call_flutter_echo_map_channel);
  g_clear_object(&self->call_flutter_echo_enum_channel);
  g_clear_object(&self->call_flutter_echo_nullable_bool_channel);
  g_clear_object(&self->call_flutter_echo_nullable_int_channel);
  g_clear_object(&self->call_flutter_echo_nullable_double_channel);
  g_clear_object(&self->call_flutter_echo_nullable_string_channel);
  g_clear_object(&self->call_flutter_echo_nullable_uint8_list_channel);
  g_clear_object(&self->call_flutter_echo_nullable_list_channel);
  g_clear_object(&self->call_flutter_echo_nullable_map_channel);
  g_clear_object(&self->call_flutter_echo_nullable_enum_channel);
  g_clear_object(&self->call_flutter_small_api_echo_string_channel);
  G_OBJECT_CLASS(core_tests_pigeon_test_host_integration_core_api_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_integration_core_api_init(
    CoreTestsPigeonTestHostIntegrationCoreApi* self) {}

static void core_tests_pigeon_test_host_integration_core_api_class_init(
    CoreTestsPigeonTestHostIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_integration_core_api_dispose;
}

CoreTestsPigeonTestHostIntegrationCoreApi*
core_tests_pigeon_test_host_integration_core_api_new(
    FlBinaryMessenger* messenger,
    const CoreTestsPigeonTestHostIntegrationCoreApiVTable* vtable,
    gpointer user_data, GDestroyNotify user_data_free_func) {
  CoreTestsPigeonTestHostIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_INTEGRATION_CORE_API(g_object_new(
          core_tests_pigeon_test_host_integration_core_api_get_type(),
          nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;

  g_autoptr(CoreTestsPigeonTestMessageCodec) codec =
      core_tests_pigeon_test_message_codec_new();
  self->noop_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.noop",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->noop_channel,
      core_tests_pigeon_test_host_integration_core_api_noop_cb, self, nullptr);
  self->echo_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAllTypes",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_all_types_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_all_types_cb, self,
      nullptr);
  self->throw_error_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.throwError",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_error_channel,
      core_tests_pigeon_test_host_integration_core_api_throw_error_cb, self,
      nullptr);
  self->throw_error_from_void_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwErrorFromVoid",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_error_from_void_channel,
      core_tests_pigeon_test_host_integration_core_api_throw_error_from_void_cb,
      self, nullptr);
  self->throw_flutter_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwFlutterError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_flutter_error_channel,
      core_tests_pigeon_test_host_integration_core_api_throw_flutter_error_cb,
      self, nullptr);
  self->echo_int_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoInt",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_int_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_int_cb, self,
      nullptr);
  self->echo_double_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoDouble",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_double_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_double_cb, self,
      nullptr);
  self->echo_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoBool",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_bool_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_bool_cb, self,
      nullptr);
  self->echo_string_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoString",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_string_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_string_cb, self,
      nullptr);
  self->echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoUint8List",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_uint8_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_uint8_list_cb, self,
      nullptr);
  self->echo_object_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoObject",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_object_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_object_cb, self,
      nullptr);
  self->echo_list_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoList",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_list_cb, self,
      nullptr);
  self->echo_map_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoMap",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_map_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_map_cb, self,
      nullptr);
  self->echo_class_wrapper_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoClassWrapper",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_class_wrapper_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_class_wrapper_cb,
      self, nullptr);
  self->echo_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoEnum",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_enum_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_enum_cb, self,
      nullptr);
  self->echo_named_default_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNamedDefaultString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_named_default_string_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_named_default_string_cb,
      self, nullptr);
  self->echo_optional_default_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoOptionalDefaultDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_optional_default_double_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_optional_default_double_cb,
      self, nullptr);
  self->echo_required_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoRequiredInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_required_int_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_required_int_cb,
      self, nullptr);
  self->echo_all_nullable_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAllNullableTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_all_nullable_types_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_cb,
      self, nullptr);
  self->echo_all_nullable_types_without_recursion_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "echoAllNullableTypesWithoutRecursion",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_all_nullable_types_without_recursion_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_all_nullable_types_without_recursion_cb,
      self, nullptr);
  self->extract_nested_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "extractNestedNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->extract_nested_nullable_string_channel,
      core_tests_pigeon_test_host_integration_core_api_extract_nested_nullable_string_cb,
      self, nullptr);
  self->create_nested_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "createNestedNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->create_nested_nullable_string_channel,
      core_tests_pigeon_test_host_integration_core_api_create_nested_nullable_string_cb,
      self, nullptr);
  self->send_multiple_nullable_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "sendMultipleNullableTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->send_multiple_nullable_types_channel,
      core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_cb,
      self, nullptr);
  self->send_multiple_nullable_types_without_recursion_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "sendMultipleNullableTypesWithoutRecursion",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->send_multiple_nullable_types_without_recursion_channel,
      core_tests_pigeon_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_cb,
      self, nullptr);
  self->echo_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_int_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_int_cb,
      self, nullptr);
  self->echo_nullable_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_double_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_double_cb,
      self, nullptr);
  self->echo_nullable_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_bool_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_bool_cb,
      self, nullptr);
  self->echo_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_string_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_string_cb,
      self, nullptr);
  self->echo_nullable_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_uint8_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_uint8_list_cb,
      self, nullptr);
  self->echo_nullable_object_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableObject",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_object_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_object_cb,
      self, nullptr);
  self->echo_nullable_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_list_cb,
      self, nullptr);
  self->echo_nullable_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_map_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_map_cb,
      self, nullptr);
  self->echo_nullable_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_enum_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_nullable_enum_cb,
      self, nullptr);
  self->echo_optional_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoOptionalNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_optional_nullable_int_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_optional_nullable_int_cb,
      self, nullptr);
  self->echo_named_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNamedNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_named_nullable_string_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_named_nullable_string_cb,
      self, nullptr);
  self->noop_async_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.noopAsync",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->noop_async_channel,
      core_tests_pigeon_test_host_integration_core_api_noop_async_cb, self,
      nullptr);
  self->echo_async_int_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncInt",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_int_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_int_cb, self,
      nullptr);
  self->echo_async_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_double_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_double_cb,
      self, nullptr);
  self->echo_async_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncBool",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_bool_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_bool_cb, self,
      nullptr);
  self->echo_async_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_string_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_string_cb,
      self, nullptr);
  self->echo_async_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_uint8_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_cb,
      self, nullptr);
  self->echo_async_object_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncObject",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_object_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_object_cb,
      self, nullptr);
  self->echo_async_list_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncList",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_list_cb, self,
      nullptr);
  self->echo_async_map_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncMap",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_map_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_map_cb, self,
      nullptr);
  self->echo_async_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncEnum",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_enum_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_enum_cb, self,
      nullptr);
  self->throw_async_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwAsyncError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_async_error_channel,
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_cb,
      self, nullptr);
  self->throw_async_error_from_void_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwAsyncErrorFromVoid",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_async_error_from_void_channel,
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_cb,
      self, nullptr);
  self->throw_async_flutter_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwAsyncFlutterError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_async_flutter_error_channel,
      core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_cb,
      self, nullptr);
  self->echo_async_all_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncAllTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_all_types_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_cb,
      self, nullptr);
  self->echo_async_nullable_all_nullable_types_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableAllNullableTypes",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_all_nullable_types_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_cb,
      self, nullptr);
  self->echo_async_nullable_all_nullable_types_without_recursion_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableAllNullableTypesWithoutRecursion",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_all_nullable_types_without_recursion_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_cb,
      self, nullptr);
  self->echo_async_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_int_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_cb,
      self, nullptr);
  self->echo_async_nullable_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_double_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_cb,
      self, nullptr);
  self->echo_async_nullable_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_bool_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_cb,
      self, nullptr);
  self->echo_async_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_string_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_cb,
      self, nullptr);
  self->echo_async_nullable_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_uint8_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_cb,
      self, nullptr);
  self->echo_async_nullable_object_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableObject",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_object_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_cb,
      self, nullptr);
  self->echo_async_nullable_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_list_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_cb,
      self, nullptr);
  self->echo_async_nullable_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_map_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_cb,
      self, nullptr);
  self->echo_async_nullable_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_enum_channel,
      core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_cb,
      self, nullptr);
  self->call_flutter_noop_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterNoop",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_noop_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_cb,
      self, nullptr);
  self->call_flutter_throw_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterThrowError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_throw_error_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_cb,
      self, nullptr);
  self->call_flutter_throw_error_from_void_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterThrowErrorFromVoid",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_throw_error_from_void_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_cb,
      self, nullptr);
  self->call_flutter_echo_all_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoAllTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_all_types_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_cb,
      self, nullptr);
  self->call_flutter_echo_all_nullable_types_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAllNullableTypes",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_all_nullable_types_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_cb,
      self, nullptr);
  self->call_flutter_send_multiple_nullable_types_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterSendMultipleNullableTypes",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_send_multiple_nullable_types_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_cb,
      self, nullptr);
  self->call_flutter_echo_all_nullable_types_without_recursion_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAllNullableTypesWithoutRecursion",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_all_nullable_types_without_recursion_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_cb,
      self, nullptr);
  self->call_flutter_send_multiple_nullable_types_without_recursion_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterSendMultipleNullableTypesWithoutRecursion",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_send_multiple_nullable_types_without_recursion_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_cb,
      self, nullptr);
  self->call_flutter_echo_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_bool_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_cb,
      self, nullptr);
  self->call_flutter_echo_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_int_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_cb,
      self, nullptr);
  self->call_flutter_echo_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_double_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_cb,
      self, nullptr);
  self->call_flutter_echo_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_string_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_cb,
      self, nullptr);
  self->call_flutter_echo_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_uint8_list_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_cb,
      self, nullptr);
  self->call_flutter_echo_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_list_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_cb,
      self, nullptr);
  self->call_flutter_echo_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_map_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_cb,
      self, nullptr);
  self->call_flutter_echo_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_enum_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_bool_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_int_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_double_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableDouble",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_double_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_string_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableString",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_string_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_uint8_list_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableUint8List",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_uint8_list_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_list_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_map_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_cb,
      self, nullptr);
  self->call_flutter_echo_nullable_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_enum_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_cb,
      self, nullptr);
  self->call_flutter_small_api_echo_string_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterSmallApiEchoString",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_small_api_echo_string_channel,
      core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_cb,
      self, nullptr);

  return self;
}

void core_tests_pigeon_test_host_integration_core_api_respond_noop_async(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse) response =
      core_tests_pigeon_test_host_integration_core_api_noop_async_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->noop_async_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noopAsync", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_noop_async(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiNoopAsyncResponse) response =
      core_tests_pigeon_test_host_integration_core_api_noop_async_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->noop_async_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noopAsync", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncIntResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, double return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncStringResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_uint8_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_uint8_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_object(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_object_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncObject", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_object(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_object_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_object_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncObject", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncListResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncMapResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAnEnum return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_throw_async_error(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncError", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_throw_async_error(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      core_tests_pigeon_test_host_integration_core_api_throw_async_error_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncError", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_throw_async_error_from_void(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->throw_async_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncErrorFromVoid", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_throw_async_error_from_void(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_throw_async_error_from_void_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->throw_async_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncErrorFromVoid", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_throw_async_flutter_error(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_flutter_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncFlutterError", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_throw_async_flutter_error(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_throw_async_flutter_error_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_flutter_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncFlutterError", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_all_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_all_types_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncAllTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_all_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncAllTypesResponse) response =
      core_tests_pigeon_test_host_integration_core_api_echo_async_all_types_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_all_types_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncAllTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_all_nullable_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_all_nullable_types_without_recursion(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_all_nullable_types_without_recursion_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types_without_recursion(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_all_nullable_types_without_recursion_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableIntResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    double* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_object(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_object_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableObject", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_object(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_object_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_object_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableObject", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableMapResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_echo_async_nullable_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAnEnum* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_echo_async_nullable_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_echo_async_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_noop(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse) response =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_noop_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterNoop", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_noop(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterNoopResponse) response =
      core_tests_pigeon_test_host_integration_core_api_call_flutter_noop_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_noop_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterNoop", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_throw_error(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_throw_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowError", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_throw_error(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_throw_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowError", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_throw_error_from_void(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_throw_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowErrorFromVoid", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_throw_error_from_void(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_throw_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowErrorFromVoid", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_all_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_types_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_all_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_types_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_all_nullable_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_send_multiple_nullable_types_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_send_multiple_nullable_types_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypes", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_all_nullable_types_without_recursion(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_nullable_types_without_recursion_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types_without_recursion(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_nullable_types_without_recursion_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types_without_recursion(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_send_multiple_nullable_types_without_recursion_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types_without_recursion(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_send_multiple_nullable_types_without_recursion_channel,
          response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoBoolResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoIntResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, double return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoMapResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAnEnum return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoEnumResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_bool_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_bool(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_bool_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableBool", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_int_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_int(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_int_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableInt", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    double* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_double(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableDouble", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_uint8_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableUint8List", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_list(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_list_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableList", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_map_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_map(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_map_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableMap", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    CoreTestsPigeonTestAnEnum* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_enum_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_enum_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnum", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_call_flutter_small_api_echo_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_small_api_echo_string_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSmallApiEchoString", error->message);
  }
}

void core_tests_pigeon_test_host_integration_core_api_respond_error_call_flutter_small_api_echo_string(
    CoreTestsPigeonTestHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsPigeonTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse)
      response =
          core_tests_pigeon_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_small_api_echo_string_channel, response_handle,
          response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSmallApiEchoString", error->message);
  }
}

struct _CoreTestsPigeonTestFlutterIntegrationCoreApi {
  GObject parent_instance;

  FlMethodChannel* channel;
};

G_DEFINE_TYPE(CoreTestsPigeonTestFlutterIntegrationCoreApi,
              core_tests_pigeon_test_flutter_integration_core_api,
              G_TYPE_OBJECT)

static void core_tests_pigeon_test_flutter_integration_core_api_dispose(
    GObject* object) {
  CoreTestsPigeonTestFlutterIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_FLUTTER_INTEGRATION_CORE_API(object);
  g_clear_object(&self->channel);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_flutter_integration_core_api_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_flutter_integration_core_api_init(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self) {}

static void core_tests_pigeon_test_flutter_integration_core_api_class_init(
    CoreTestsPigeonTestFlutterIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_flutter_integration_core_api_dispose;
}

CoreTestsPigeonTestFlutterIntegrationCoreApi*
core_tests_pigeon_test_flutter_integration_core_api_new(
    FlBinaryMessenger* messenger) {
  CoreTestsPigeonTestFlutterIntegrationCoreApi* self =
      CORE_TESTS_PIGEON_TEST_FLUTTER_INTEGRATION_CORE_API(g_object_new(
          core_tests_pigeon_test_flutter_integration_core_api_get_type(),
          nullptr));
  g_autoptr(CoreTestsPigeonTestMessageCodec) message_codec =
      core_tests_pigeon_test_message_codec_new();
  g_autoptr(FlStandardMethodCodec) codec =
      fl_standard_method_codec_new_with_message_codec(
          FL_STANDARD_MESSAGE_CODEC(message_codec));
  self->channel = fl_method_channel_new(messenger, "FlutterIntegrationCoreApi",
                                        FL_METHOD_CODEC(codec));
  return self;
}

void core_tests_pigeon_test_flutter_integration_core_api_noop(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_method_channel_invoke_method(self->channel, "noop", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_noop_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_throw_error(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_method_channel_invoke_method(self->channel, "throwError", args,
                                  cancellable, callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_throw_error_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_ref(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_throw_error_from_void(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_method_channel_invoke_method(self->channel, "throwErrorFromVoid", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_throw_error_from_void_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_all_types(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    CoreTestsPigeonTestAllTypes* everything, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args,
                       fl_value_new_custom_object(129, G_OBJECT(everything)));
  fl_method_channel_invoke_method(self->channel, "echoAllTypes", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_all_types_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAllTypes** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = CORE_TESTS_PIGEON_TEST_ALL_TYPES(g_object_ref(
      CORE_TESTS_PIGEON_TEST_ALL_TYPES(fl_value_get_custom_value_object(r))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_all_nullable_types(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    CoreTestsPigeonTestAllNullableTypes* everything, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, everything != nullptr
                ? fl_value_new_custom_object(130, G_OBJECT(everything))
                : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoAllNullableTypes", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_all_nullable_types_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAllNullableTypes** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
      g_object_ref(CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(r))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_send_multiple_nullable_types(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    const gchar* a_nullable_string, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_nullable_bool != nullptr
                                 ? fl_value_new_bool(*a_nullable_bool)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_int != nullptr
                                 ? fl_value_new_int(*a_nullable_int)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_string != nullptr
                                 ? fl_value_new_string(a_nullable_string)
                                 : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "sendMultipleNullableTypes",
                                  args, cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_send_multiple_nullable_types_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAllNullableTypes** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
      g_object_ref(CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(r))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion* everything,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, everything != nullptr
                ? fl_value_new_custom_object(131, G_OBJECT(everything))
                : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel,
                                  "echoAllNullableTypesWithoutRecursion", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion** return_value,
    GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
      g_object_ref(CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(r))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    const gchar* a_nullable_string, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_nullable_bool != nullptr
                                 ? fl_value_new_bool(*a_nullable_bool)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_int != nullptr
                                 ? fl_value_new_int(*a_nullable_int)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_string != nullptr
                                 ? fl_value_new_string(a_nullable_string)
                                 : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel,
                                  "sendMultipleNullableTypesWithoutRecursion",
                                  args, cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAllNullableTypesWithoutRecursion** return_value,
    GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
      g_object_ref(CORE_TESTS_PIGEON_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(r))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_bool(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, gboolean a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_bool(a_bool));
  fl_method_channel_invoke_method(self->channel, "echoBool", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_bool_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    gboolean* return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_get_bool(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_int(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, int64_t an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_int(an_int));
  fl_method_channel_invoke_method(self->channel, "echoInt", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_int_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    int64_t* return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_get_int(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_double(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, double a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_float(a_double));
  fl_method_channel_invoke_method(self->channel, "echoDouble", args,
                                  cancellable, callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_double_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    double* return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_get_float(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_string(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  fl_method_channel_invoke_method(self->channel, "echoString", args,
                                  cancellable, callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_string_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    gchar** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = g_strdup(fl_value_get_string(r));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_uint8_list(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, const uint8_t* list,
    size_t list_length, GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_uint8_list(list, list_length));
  fl_method_channel_invoke_method(self->channel, "echoUint8List", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_uint8_list_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    uint8_t** return_value, size_t* return_value_length, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = static_cast<uint8_t*>(memcpy(malloc(fl_value_get_length(r)),
                                               fl_value_get_uint8_list(r),
                                               fl_value_get_length(r)));
  *return_value_length = fl_value_get_length(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_list(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, FlValue* list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(list));
  fl_method_channel_invoke_method(self->channel, "echoList", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_list_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_ref(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_map(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, FlValue* a_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(a_map));
  fl_method_channel_invoke_method(self->channel, "echoMap", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_map_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_ref(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_enum(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    CoreTestsPigeonTestAnEnum an_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args,
                       fl_value_new_custom(134, fl_value_new_int(an_enum),
                                           (GDestroyNotify)fl_value_unref));
  fl_method_channel_invoke_method(self->channel, "echoEnum", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_echo_enum_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAnEnum* return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = static_cast<CoreTestsPigeonTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(r)))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_bool(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, gboolean* a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_bool != nullptr ? fl_value_new_bool(*a_bool)
                                               : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableBool", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_bool_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    gboolean** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  if (fl_value_get_type(r) != FL_VALUE_TYPE_NULL) {
    *return_value = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    **return_value = fl_value_get_bool(r);
  } else {
    *return_value = nullptr;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_int(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, int64_t* an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, an_int != nullptr ? fl_value_new_int(*an_int)
                                               : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableInt", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_int_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    int64_t** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  if (fl_value_get_type(r) != FL_VALUE_TYPE_NULL) {
    *return_value = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    **return_value = fl_value_get_int(r);
  } else {
    *return_value = nullptr;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_double(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, double* a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_double != nullptr ? fl_value_new_float(*a_double)
                                                 : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableDouble", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_double_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    double** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  if (fl_value_get_type(r) != FL_VALUE_TYPE_NULL) {
    *return_value = static_cast<double*>(malloc(sizeof(double)));
    **return_value = fl_value_get_float(r);
  } else {
    *return_value = nullptr;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_string(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_string != nullptr ? fl_value_new_string(a_string)
                                                 : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableString", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_string_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    gchar** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = g_strdup(fl_value_get_string(r));

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_uint8_list(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, const uint8_t* list,
    size_t list_length, GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, list != nullptr
                                 ? fl_value_new_uint8_list(list, list_length)
                                 : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableUint8List", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_uint8_list_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    uint8_t** return_value, size_t* return_value_length, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = static_cast<uint8_t*>(memcpy(malloc(fl_value_get_length(r)),
                                               fl_value_get_uint8_list(r),
                                               fl_value_get_length(r)));
  *return_value_length = fl_value_get_length(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_list(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, FlValue* list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, list != nullptr ? fl_value_ref(list) : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableList", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_list_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_ref(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_map(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, FlValue* a_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, a_map != nullptr ? fl_value_ref(a_map) : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableMap", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_map_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = fl_value_ref(r);

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_enum(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    CoreTestsPigeonTestAnEnum* an_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, an_enum != nullptr
                ? fl_value_new_custom(134, fl_value_new_int(*an_enum),
                                      (GDestroyNotify)fl_value_unref)
                : fl_value_new_null());
  fl_method_channel_invoke_method(self->channel, "echoNullableEnum", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_nullable_enum_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    CoreTestsPigeonTestAnEnum** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  if (fl_value_get_type(r) != FL_VALUE_TYPE_NULL) {
    *return_value = static_cast<CoreTestsPigeonTestAnEnum*>(
        malloc(sizeof(CoreTestsPigeonTestAnEnum)));
    **return_value = static_cast<CoreTestsPigeonTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(r)))));
  } else {
    *return_value = nullptr;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_noop_async(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_method_channel_invoke_method(self->channel, "noopAsync", args, cancellable,
                                  callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_integration_core_api_noop_async_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  return TRUE;
}

void core_tests_pigeon_test_flutter_integration_core_api_echo_async_string(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  fl_method_channel_invoke_method(self->channel, "echoAsyncString", args,
                                  cancellable, callback, user_data);
}

gboolean
core_tests_pigeon_test_flutter_integration_core_api_echo_async_string_finish(
    CoreTestsPigeonTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    gchar** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = g_strdup(fl_value_get_string(r));

  return TRUE;
}

struct _CoreTestsPigeonTestHostTrivialApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostTrivialApiNoopResponse,
              core_tests_pigeon_test_host_trivial_api_noop_response,
              G_TYPE_OBJECT)

static void core_tests_pigeon_test_host_trivial_api_noop_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_trivial_api_noop_response_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_trivial_api_noop_response_init(
    CoreTestsPigeonTestHostTrivialApiNoopResponse* self) {}

static void core_tests_pigeon_test_host_trivial_api_noop_response_class_init(
    CoreTestsPigeonTestHostTrivialApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_trivial_api_noop_response_dispose;
}

CoreTestsPigeonTestHostTrivialApiNoopResponse*
core_tests_pigeon_test_host_trivial_api_noop_response_new() {
  CoreTestsPigeonTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_trivial_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsPigeonTestHostTrivialApiNoopResponse*
core_tests_pigeon_test_host_trivial_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_trivial_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostTrivialApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  const CoreTestsPigeonTestHostTrivialApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;

  FlBasicMessageChannel* noop_channel;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostTrivialApi,
              core_tests_pigeon_test_host_trivial_api, G_TYPE_OBJECT)

static void core_tests_pigeon_test_host_trivial_api_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostTrivialApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_TRIVIAL_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsPigeonTestHostTrivialApiNoopResponse) response =
      self->vtable->noop(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostTrivialApi", "noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostTrivialApi", "noop",
              error->message);
  }
}

static void core_tests_pigeon_test_host_trivial_api_dispose(GObject* object) {
  CoreTestsPigeonTestHostTrivialApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_TRIVIAL_API(object);
  g_clear_object(&self->messenger);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;

  g_clear_object(&self->noop_channel);
  G_OBJECT_CLASS(core_tests_pigeon_test_host_trivial_api_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_trivial_api_init(
    CoreTestsPigeonTestHostTrivialApi* self) {}

static void core_tests_pigeon_test_host_trivial_api_class_init(
    CoreTestsPigeonTestHostTrivialApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_trivial_api_dispose;
}

CoreTestsPigeonTestHostTrivialApi* core_tests_pigeon_test_host_trivial_api_new(
    FlBinaryMessenger* messenger,
    const CoreTestsPigeonTestHostTrivialApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  CoreTestsPigeonTestHostTrivialApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_TRIVIAL_API(g_object_new(
          core_tests_pigeon_test_host_trivial_api_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;

  g_autoptr(CoreTestsPigeonTestMessageCodec) codec =
      core_tests_pigeon_test_message_codec_new();
  self->noop_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostTrivialApi.noop",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->noop_channel, core_tests_pigeon_test_host_trivial_api_noop_cb, self,
      nullptr);

  return self;
}

G_DECLARE_FINAL_TYPE(CoreTestsPigeonTestHostSmallApiEchoResponse,
                     core_tests_pigeon_test_host_small_api_echo_response,
                     CORE_TESTS_PIGEON_TEST, HOST_SMALL_API_ECHO_RESPONSE,
                     GObject)

struct _CoreTestsPigeonTestHostSmallApiEchoResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostSmallApiEchoResponse,
              core_tests_pigeon_test_host_small_api_echo_response,
              G_TYPE_OBJECT)

static void core_tests_pigeon_test_host_small_api_echo_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostSmallApiEchoResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API_ECHO_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_small_api_echo_response_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_small_api_echo_response_init(
    CoreTestsPigeonTestHostSmallApiEchoResponse* self) {}

static void core_tests_pigeon_test_host_small_api_echo_response_class_init(
    CoreTestsPigeonTestHostSmallApiEchoResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_small_api_echo_response_dispose;
}

static CoreTestsPigeonTestHostSmallApiEchoResponse*
core_tests_pigeon_test_host_small_api_echo_response_new(
    const gchar* return_value) {
  CoreTestsPigeonTestHostSmallApiEchoResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API_ECHO_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_small_api_echo_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsPigeonTestHostSmallApiEchoResponse*
core_tests_pigeon_test_host_small_api_echo_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostSmallApiEchoResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API_ECHO_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_small_api_echo_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(CoreTestsPigeonTestHostSmallApiVoidVoidResponse,
                     core_tests_pigeon_test_host_small_api_void_void_response,
                     CORE_TESTS_PIGEON_TEST, HOST_SMALL_API_VOID_VOID_RESPONSE,
                     GObject)

struct _CoreTestsPigeonTestHostSmallApiVoidVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostSmallApiVoidVoidResponse,
              core_tests_pigeon_test_host_small_api_void_void_response,
              G_TYPE_OBJECT)

static void core_tests_pigeon_test_host_small_api_void_void_response_dispose(
    GObject* object) {
  CoreTestsPigeonTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_pigeon_test_host_small_api_void_void_response_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_small_api_void_void_response_init(
    CoreTestsPigeonTestHostSmallApiVoidVoidResponse* self) {}

static void core_tests_pigeon_test_host_small_api_void_void_response_class_init(
    CoreTestsPigeonTestHostSmallApiVoidVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_small_api_void_void_response_dispose;
}

static CoreTestsPigeonTestHostSmallApiVoidVoidResponse*
core_tests_pigeon_test_host_small_api_void_void_response_new() {
  CoreTestsPigeonTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_small_api_void_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsPigeonTestHostSmallApiVoidVoidResponse*
core_tests_pigeon_test_host_small_api_void_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsPigeonTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(g_object_new(
          core_tests_pigeon_test_host_small_api_void_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsPigeonTestHostSmallApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  const CoreTestsPigeonTestHostSmallApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;

  FlBasicMessageChannel* echo_channel;
  FlBasicMessageChannel* void_void_channel;
};

G_DEFINE_TYPE(CoreTestsPigeonTestHostSmallApi,
              core_tests_pigeon_test_host_small_api, G_TYPE_OBJECT)

static void core_tests_pigeon_test_host_small_api_echo_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostSmallApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  self->vtable->echo(self, a_string, response_handle, self->user_data);
}

static void core_tests_pigeon_test_host_small_api_void_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsPigeonTestHostSmallApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->void_void == nullptr) {
    return;
  }

  self->vtable->void_void(self, response_handle, self->user_data);
}

static void core_tests_pigeon_test_host_small_api_dispose(GObject* object) {
  CoreTestsPigeonTestHostSmallApi* self =
      CORE_TESTS_PIGEON_TEST_HOST_SMALL_API(object);
  g_clear_object(&self->messenger);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;

  g_clear_object(&self->echo_channel);
  g_clear_object(&self->void_void_channel);
  G_OBJECT_CLASS(core_tests_pigeon_test_host_small_api_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_host_small_api_init(
    CoreTestsPigeonTestHostSmallApi* self) {}

static void core_tests_pigeon_test_host_small_api_class_init(
    CoreTestsPigeonTestHostSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_host_small_api_dispose;
}

CoreTestsPigeonTestHostSmallApi* core_tests_pigeon_test_host_small_api_new(
    FlBinaryMessenger* messenger,
    const CoreTestsPigeonTestHostSmallApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  CoreTestsPigeonTestHostSmallApi* self = CORE_TESTS_PIGEON_TEST_HOST_SMALL_API(
      g_object_new(core_tests_pigeon_test_host_small_api_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;

  g_autoptr(CoreTestsPigeonTestMessageCodec) codec =
      core_tests_pigeon_test_message_codec_new();
  self->echo_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.echo",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_channel, core_tests_pigeon_test_host_small_api_echo_cb, self,
      nullptr);
  self->void_void_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.voidVoid",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->void_void_channel,
      core_tests_pigeon_test_host_small_api_void_void_cb, self, nullptr);

  return self;
}

void core_tests_pigeon_test_host_small_api_respond_echo(
    CoreTestsPigeonTestHostSmallApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(CoreTestsPigeonTestHostSmallApiEchoResponse) response =
      core_tests_pigeon_test_host_small_api_echo_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi", "echo",
              error->message);
  }
}

void core_tests_pigeon_test_host_small_api_respond_error_echo(
    CoreTestsPigeonTestHostSmallApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsPigeonTestHostSmallApiEchoResponse) response =
      core_tests_pigeon_test_host_small_api_echo_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi", "echo",
              error->message);
  }
}

void core_tests_pigeon_test_host_small_api_respond_void_void(
    CoreTestsPigeonTestHostSmallApi* self,
    FlBasicMessageChannelResponseHandle* response_handle) {
  g_autoptr(CoreTestsPigeonTestHostSmallApiVoidVoidResponse) response =
      core_tests_pigeon_test_host_small_api_void_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->void_void_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi",
              "voidVoid", error->message);
  }
}

void core_tests_pigeon_test_host_small_api_respond_error_void_void(
    CoreTestsPigeonTestHostSmallApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsPigeonTestHostSmallApiVoidVoidResponse) response =
      core_tests_pigeon_test_host_small_api_void_void_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->void_void_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi",
              "voidVoid", error->message);
  }
}

struct _CoreTestsPigeonTestFlutterSmallApi {
  GObject parent_instance;

  FlMethodChannel* channel;
};

G_DEFINE_TYPE(CoreTestsPigeonTestFlutterSmallApi,
              core_tests_pigeon_test_flutter_small_api, G_TYPE_OBJECT)

static void core_tests_pigeon_test_flutter_small_api_dispose(GObject* object) {
  CoreTestsPigeonTestFlutterSmallApi* self =
      CORE_TESTS_PIGEON_TEST_FLUTTER_SMALL_API(object);
  g_clear_object(&self->channel);
  G_OBJECT_CLASS(core_tests_pigeon_test_flutter_small_api_parent_class)
      ->dispose(object);
}

static void core_tests_pigeon_test_flutter_small_api_init(
    CoreTestsPigeonTestFlutterSmallApi* self) {}

static void core_tests_pigeon_test_flutter_small_api_class_init(
    CoreTestsPigeonTestFlutterSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_pigeon_test_flutter_small_api_dispose;
}

CoreTestsPigeonTestFlutterSmallApi*
core_tests_pigeon_test_flutter_small_api_new(FlBinaryMessenger* messenger) {
  CoreTestsPigeonTestFlutterSmallApi* self =
      CORE_TESTS_PIGEON_TEST_FLUTTER_SMALL_API(g_object_new(
          core_tests_pigeon_test_flutter_small_api_get_type(), nullptr));
  g_autoptr(CoreTestsPigeonTestMessageCodec) message_codec =
      core_tests_pigeon_test_message_codec_new();
  g_autoptr(FlStandardMethodCodec) codec =
      fl_standard_method_codec_new_with_message_codec(
          FL_STANDARD_MESSAGE_CODEC(message_codec));
  self->channel = fl_method_channel_new(messenger, "FlutterSmallApi",
                                        FL_METHOD_CODEC(codec));
  return self;
}

void core_tests_pigeon_test_flutter_small_api_echo_wrapped_list(
    CoreTestsPigeonTestFlutterSmallApi* self,
    CoreTestsPigeonTestTestMessage* msg, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(133, G_OBJECT(msg)));
  fl_method_channel_invoke_method(self->channel, "echoWrappedList", args,
                                  cancellable, callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_small_api_echo_wrapped_list_finish(
    CoreTestsPigeonTestFlutterSmallApi* self, GAsyncResult* result,
    CoreTestsPigeonTestTestMessage** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = CORE_TESTS_PIGEON_TEST_TEST_MESSAGE(
      g_object_ref(CORE_TESTS_PIGEON_TEST_TEST_MESSAGE(
          fl_value_get_custom_value_object(r))));

  return TRUE;
}

void core_tests_pigeon_test_flutter_small_api_echo_string(
    CoreTestsPigeonTestFlutterSmallApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  fl_method_channel_invoke_method(self->channel, "echoString", args,
                                  cancellable, callback, user_data);
}

gboolean core_tests_pigeon_test_flutter_small_api_echo_string_finish(
    CoreTestsPigeonTestFlutterSmallApi* self, GAsyncResult* result,
    gchar** return_value, GError** error) {
  g_autoptr(FlMethodResponse) response =
      fl_method_channel_invoke_method_finish(self->channel, result, error);
  if (response == nullptr) {
    return FALSE;
  }

  g_autoptr(FlValue) r = fl_method_response_get_result(response, error);
  if (r == nullptr) {
    return FALSE;
  }

  *return_value = g_strdup(fl_value_get_string(r));

  return TRUE;
}
