// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(
    code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.",
    details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum FillerEnum0: Int {
  case fillerMember0 = 0
}

enum FillerEnum1: Int {
  case fillerMember1 = 0
}

enum FillerEnum2: Int {
  case fillerMember2 = 0
}

enum FillerEnum3: Int {
  case fillerMember3 = 0
}

enum FillerEnum4: Int {
  case fillerMember4 = 0
}

enum FillerEnum5: Int {
  case fillerMember5 = 0
}

enum FillerEnum6: Int {
  case fillerMember6 = 0
}

enum FillerEnum7: Int {
  case fillerMember7 = 0
}

enum FillerEnum8: Int {
  case fillerMember8 = 0
}

enum FillerEnum9: Int {
  case fillerMember9 = 0
}

enum FillerEnum10: Int {
  case fillerMember10 = 0
}

enum FillerEnum11: Int {
  case fillerMember11 = 0
}

enum FillerEnum12: Int {
  case fillerMember12 = 0
}

enum FillerEnum13: Int {
  case fillerMember13 = 0
}

enum FillerEnum14: Int {
  case fillerMember14 = 0
}

enum FillerEnum15: Int {
  case fillerMember15 = 0
}

enum FillerEnum16: Int {
  case fillerMember16 = 0
}

enum FillerEnum17: Int {
  case fillerMember17 = 0
}

enum FillerEnum18: Int {
  case fillerMember18 = 0
}

enum FillerEnum19: Int {
  case fillerMember19 = 0
}

enum FillerEnum20: Int {
  case fillerMember20 = 0
}

enum FillerEnum21: Int {
  case fillerMember21 = 0
}

enum FillerEnum22: Int {
  case fillerMember22 = 0
}

enum FillerEnum23: Int {
  case fillerMember23 = 0
}

enum FillerEnum24: Int {
  case fillerMember24 = 0
}

enum FillerEnum25: Int {
  case fillerMember25 = 0
}

enum FillerEnum26: Int {
  case fillerMember26 = 0
}

enum FillerEnum27: Int {
  case fillerMember27 = 0
}

enum FillerEnum28: Int {
  case fillerMember28 = 0
}

enum FillerEnum29: Int {
  case fillerMember29 = 0
}

enum FillerEnum30: Int {
  case fillerMember30 = 0
}

enum FillerEnum31: Int {
  case fillerMember31 = 0
}

enum FillerEnum32: Int {
  case fillerMember32 = 0
}

enum FillerEnum33: Int {
  case fillerMember33 = 0
}

enum FillerEnum34: Int {
  case fillerMember34 = 0
}

enum FillerEnum35: Int {
  case fillerMember35 = 0
}

enum FillerEnum36: Int {
  case fillerMember36 = 0
}

enum FillerEnum37: Int {
  case fillerMember37 = 0
}

enum FillerEnum38: Int {
  case fillerMember38 = 0
}

enum FillerEnum39: Int {
  case fillerMember39 = 0
}

enum FillerEnum40: Int {
  case fillerMember40 = 0
}

enum FillerEnum41: Int {
  case fillerMember41 = 0
}

enum FillerEnum42: Int {
  case fillerMember42 = 0
}

enum FillerEnum43: Int {
  case fillerMember43 = 0
}

enum FillerEnum44: Int {
  case fillerMember44 = 0
}

enum FillerEnum45: Int {
  case fillerMember45 = 0
}

enum FillerEnum46: Int {
  case fillerMember46 = 0
}

enum FillerEnum47: Int {
  case fillerMember47 = 0
}

enum FillerEnum48: Int {
  case fillerMember48 = 0
}

enum FillerEnum49: Int {
  case fillerMember49 = 0
}

enum FillerEnum50: Int {
  case fillerMember50 = 0
}

enum FillerEnum51: Int {
  case fillerMember51 = 0
}

enum FillerEnum52: Int {
  case fillerMember52 = 0
}

enum FillerEnum53: Int {
  case fillerMember53 = 0
}

enum FillerEnum54: Int {
  case fillerMember54 = 0
}

enum FillerEnum55: Int {
  case fillerMember55 = 0
}

enum FillerEnum56: Int {
  case fillerMember56 = 0
}

enum FillerEnum57: Int {
  case fillerMember57 = 0
}

enum FillerEnum58: Int {
  case fillerMember58 = 0
}

enum FillerEnum59: Int {
  case fillerMember59 = 0
}

enum FillerEnum60: Int {
  case fillerMember60 = 0
}

enum FillerEnum61: Int {
  case fillerMember61 = 0
}

enum FillerEnum62: Int {
  case fillerMember62 = 0
}

enum FillerEnum63: Int {
  case fillerMember63 = 0
}

enum FillerEnum64: Int {
  case fillerMember64 = 0
}

enum FillerEnum65: Int {
  case fillerMember65 = 0
}

enum FillerEnum66: Int {
  case fillerMember66 = 0
}

enum FillerEnum67: Int {
  case fillerMember67 = 0
}

enum FillerEnum68: Int {
  case fillerMember68 = 0
}

enum FillerEnum69: Int {
  case fillerMember69 = 0
}

enum FillerEnum70: Int {
  case fillerMember70 = 0
}

enum FillerEnum71: Int {
  case fillerMember71 = 0
}

enum FillerEnum72: Int {
  case fillerMember72 = 0
}

enum FillerEnum73: Int {
  case fillerMember73 = 0
}

enum FillerEnum74: Int {
  case fillerMember74 = 0
}

enum FillerEnum75: Int {
  case fillerMember75 = 0
}

enum FillerEnum76: Int {
  case fillerMember76 = 0
}

enum FillerEnum77: Int {
  case fillerMember77 = 0
}

enum FillerEnum78: Int {
  case fillerMember78 = 0
}

enum FillerEnum79: Int {
  case fillerMember79 = 0
}

enum FillerEnum80: Int {
  case fillerMember80 = 0
}

enum FillerEnum81: Int {
  case fillerMember81 = 0
}

enum FillerEnum82: Int {
  case fillerMember82 = 0
}

enum FillerEnum83: Int {
  case fillerMember83 = 0
}

enum FillerEnum84: Int {
  case fillerMember84 = 0
}

enum FillerEnum85: Int {
  case fillerMember85 = 0
}

enum FillerEnum86: Int {
  case fillerMember86 = 0
}

enum FillerEnum87: Int {
  case fillerMember87 = 0
}

enum FillerEnum88: Int {
  case fillerMember88 = 0
}

enum FillerEnum89: Int {
  case fillerMember89 = 0
}

enum FillerEnum90: Int {
  case fillerMember90 = 0
}

enum FillerEnum91: Int {
  case fillerMember91 = 0
}

enum FillerEnum92: Int {
  case fillerMember92 = 0
}

enum FillerEnum93: Int {
  case fillerMember93 = 0
}

enum FillerEnum94: Int {
  case fillerMember94 = 0
}

enum FillerEnum95: Int {
  case fillerMember95 = 0
}

enum FillerEnum96: Int {
  case fillerMember96 = 0
}

enum FillerEnum97: Int {
  case fillerMember97 = 0
}

enum FillerEnum98: Int {
  case fillerMember98 = 0
}

enum FillerEnum99: Int {
  case fillerMember99 = 0
}

enum FillerEnum100: Int {
  case fillerMember100 = 0
}

enum FillerEnum101: Int {
  case fillerMember101 = 0
}

enum FillerEnum102: Int {
  case fillerMember102 = 0
}

enum FillerEnum103: Int {
  case fillerMember103 = 0
}

enum FillerEnum104: Int {
  case fillerMember104 = 0
}

enum FillerEnum105: Int {
  case fillerMember105 = 0
}

enum FillerEnum106: Int {
  case fillerMember106 = 0
}

enum FillerEnum107: Int {
  case fillerMember107 = 0
}

enum FillerEnum108: Int {
  case fillerMember108 = 0
}

enum FillerEnum109: Int {
  case fillerMember109 = 0
}

enum FillerEnum110: Int {
  case fillerMember110 = 0
}

enum FillerEnum111: Int {
  case fillerMember111 = 0
}

enum FillerEnum112: Int {
  case fillerMember112 = 0
}

enum FillerEnum113: Int {
  case fillerMember113 = 0
}

enum FillerEnum114: Int {
  case fillerMember114 = 0
}

enum FillerEnum115: Int {
  case fillerMember115 = 0
}

enum FillerEnum116: Int {
  case fillerMember116 = 0
}

enum FillerEnum117: Int {
  case fillerMember117 = 0
}

enum FillerEnum118: Int {
  case fillerMember118 = 0
}

enum FillerEnum119: Int {
  case fillerMember119 = 0
}

enum FillerEnum120: Int {
  case fillerMember120 = 0
}

enum FillerEnum121: Int {
  case fillerMember121 = 0
}

enum FillerEnum122: Int {
  case fillerMember122 = 0
}

enum FillerEnum123: Int {
  case fillerMember123 = 0
}

enum FillerEnum124: Int {
  case fillerMember124 = 0
}

enum AnEnum: Int {
  case one = 0
  case two = 1
  case three = 2
  case fortyTwo = 3
  case fourHundredTwentyTwo = 4
}

enum AnotherEnum: Int {
  case justInCase = 0
}

/// A class containing all supported types.
///
/// Generated class from Pigeon that represents data sent in messages.
struct AllTypes {
  var aBool: Bool
  var anInt: Int64
  var anInt64: Int64
  var aDouble: Double
  var aByteArray: FlutterStandardTypedData
  var a4ByteArray: FlutterStandardTypedData
  var a8ByteArray: FlutterStandardTypedData
  var aFloatArray: FlutterStandardTypedData
  var anEnum: AnEnum
  var anotherEnum: AnotherEnum
  var aString: String
  var anObject: Any
  var list: [Any?]
  var stringList: [String?]
  var intList: [Int64?]
  var doubleList: [Double?]
  var boolList: [Bool?]
  var map: [AnyHashable: Any?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> AllTypes? {
    let aBool = __pigeon_list[0] as! Bool
    let anInt =
      __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let anInt64 =
      __pigeon_list[2] is Int64 ? __pigeon_list[2] as! Int64 : Int64(__pigeon_list[2] as! Int32)
    let aDouble = __pigeon_list[3] as! Double
    let aByteArray = __pigeon_list[4] as! FlutterStandardTypedData
    let a4ByteArray = __pigeon_list[5] as! FlutterStandardTypedData
    let a8ByteArray = __pigeon_list[6] as! FlutterStandardTypedData
    let aFloatArray = __pigeon_list[7] as! FlutterStandardTypedData
    let anEnum = __pigeon_list[8] as! AnEnum
    let anotherEnum = __pigeon_list[9] as! AnotherEnum
    let aString = __pigeon_list[10] as! String
    let anObject = __pigeon_list[11]!
    let list = __pigeon_list[12] as! [Any?]
    let stringList = __pigeon_list[13] as! [String?]
    let intList = __pigeon_list[14] as! [Int64?]
    let doubleList = __pigeon_list[15] as! [Double?]
    let boolList = __pigeon_list[16] as! [Bool?]
    let map = __pigeon_list[17] as! [AnyHashable: Any?]

    return AllTypes(
      aBool: aBool,
      anInt: anInt,
      anInt64: anInt64,
      aDouble: aDouble,
      aByteArray: aByteArray,
      a4ByteArray: a4ByteArray,
      a8ByteArray: a8ByteArray,
      aFloatArray: aFloatArray,
      anEnum: anEnum,
      anotherEnum: anotherEnum,
      aString: aString,
      anObject: anObject,
      list: list,
      stringList: stringList,
      intList: intList,
      doubleList: doubleList,
      boolList: boolList,
      map: map
    )
  }
  func toList() -> [Any?] {
    return [
      aBool,
      anInt,
      anInt64,
      aDouble,
      aByteArray,
      a4ByteArray,
      a8ByteArray,
      aFloatArray,
      anEnum,
      anotherEnum,
      aString,
      anObject,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      map,
    ]
  }
}

/// A class containing all supported nullable types.
///
/// Generated class from Pigeon that represents data sent in messages.
class AllNullableTypes {
  init(
    aNullableBool: Bool? = nil,
    aNullableInt: Int64? = nil,
    aNullableInt64: Int64? = nil,
    aNullableDouble: Double? = nil,
    aNullableByteArray: FlutterStandardTypedData? = nil,
    aNullable4ByteArray: FlutterStandardTypedData? = nil,
    aNullable8ByteArray: FlutterStandardTypedData? = nil,
    aNullableFloatArray: FlutterStandardTypedData? = nil,
    nullableNestedList: [[Bool?]?]? = nil,
    nullableMapWithAnnotations: [String?: String?]? = nil,
    nullableMapWithObject: [String?: Any?]? = nil,
    aNullableEnum: AnEnum? = nil,
    anotherNullableEnum: AnotherEnum? = nil,
    aNullableString: String? = nil,
    aNullableObject: Any? = nil,
    allNullableTypes: AllNullableTypes? = nil,
    list: [Any?]? = nil,
    stringList: [String?]? = nil,
    intList: [Int64?]? = nil,
    doubleList: [Double?]? = nil,
    boolList: [Bool?]? = nil,
    nestedClassList: [AllNullableTypes?]? = nil,
    map: [AnyHashable: Any?]? = nil
  ) {
    self.aNullableBool = aNullableBool
    self.aNullableInt = aNullableInt
    self.aNullableInt64 = aNullableInt64
    self.aNullableDouble = aNullableDouble
    self.aNullableByteArray = aNullableByteArray
    self.aNullable4ByteArray = aNullable4ByteArray
    self.aNullable8ByteArray = aNullable8ByteArray
    self.aNullableFloatArray = aNullableFloatArray
    self.nullableNestedList = nullableNestedList
    self.nullableMapWithAnnotations = nullableMapWithAnnotations
    self.nullableMapWithObject = nullableMapWithObject
    self.aNullableEnum = aNullableEnum
    self.anotherNullableEnum = anotherNullableEnum
    self.aNullableString = aNullableString
    self.aNullableObject = aNullableObject
    self.allNullableTypes = allNullableTypes
    self.list = list
    self.stringList = stringList
    self.intList = intList
    self.doubleList = doubleList
    self.boolList = boolList
    self.nestedClassList = nestedClassList
    self.map = map
  }
  var aNullableBool: Bool?
  var aNullableInt: Int64?
  var aNullableInt64: Int64?
  var aNullableDouble: Double?
  var aNullableByteArray: FlutterStandardTypedData?
  var aNullable4ByteArray: FlutterStandardTypedData?
  var aNullable8ByteArray: FlutterStandardTypedData?
  var aNullableFloatArray: FlutterStandardTypedData?
  var nullableNestedList: [[Bool?]?]?
  var nullableMapWithAnnotations: [String?: String?]?
  var nullableMapWithObject: [String?: Any?]?
  var aNullableEnum: AnEnum?
  var anotherNullableEnum: AnotherEnum?
  var aNullableString: String?
  var aNullableObject: Any?
  var allNullableTypes: AllNullableTypes?
  var list: [Any?]?
  var stringList: [String?]?
  var intList: [Int64?]?
  var doubleList: [Double?]?
  var boolList: [Bool?]?
  var nestedClassList: [AllNullableTypes?]?
  var map: [AnyHashable: Any?]?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> AllNullableTypes? {
    let aNullableBool: Bool? = nilOrValue(__pigeon_list[0])
    let aNullableInt: Int64? =
      isNullish(__pigeon_list[1])
      ? nil
      : (__pigeon_list[1] is Int64?
        ? __pigeon_list[1] as! Int64? : Int64(__pigeon_list[1] as! Int32))
    let aNullableInt64: Int64? =
      isNullish(__pigeon_list[2])
      ? nil
      : (__pigeon_list[2] is Int64?
        ? __pigeon_list[2] as! Int64? : Int64(__pigeon_list[2] as! Int32))
    let aNullableDouble: Double? = nilOrValue(__pigeon_list[3])
    let aNullableByteArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[4])
    let aNullable4ByteArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[5])
    let aNullable8ByteArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[6])
    let aNullableFloatArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[7])
    let nullableNestedList: [[Bool?]?]? = nilOrValue(__pigeon_list[8])
    let nullableMapWithAnnotations: [String?: String?]? = nilOrValue(__pigeon_list[9])
    let nullableMapWithObject: [String?: Any?]? = nilOrValue(__pigeon_list[10])
    let aNullableEnum: AnEnum? = nilOrValue(__pigeon_list[11])
    let anotherNullableEnum: AnotherEnum? = nilOrValue(__pigeon_list[12])
    let aNullableString: String? = nilOrValue(__pigeon_list[13])
    let aNullableObject: Any? = __pigeon_list[14]
    let allNullableTypes: AllNullableTypes? = nilOrValue(__pigeon_list[15])
    let list: [Any?]? = nilOrValue(__pigeon_list[16])
    let stringList: [String?]? = nilOrValue(__pigeon_list[17])
    let intList: [Int64?]? = nilOrValue(__pigeon_list[18])
    let doubleList: [Double?]? = nilOrValue(__pigeon_list[19])
    let boolList: [Bool?]? = nilOrValue(__pigeon_list[20])
    let nestedClassList: [AllNullableTypes?]? = nilOrValue(__pigeon_list[21])
    let map: [AnyHashable: Any?]? = nilOrValue(__pigeon_list[22])

    return AllNullableTypes(
      aNullableBool: aNullableBool,
      aNullableInt: aNullableInt,
      aNullableInt64: aNullableInt64,
      aNullableDouble: aNullableDouble,
      aNullableByteArray: aNullableByteArray,
      aNullable4ByteArray: aNullable4ByteArray,
      aNullable8ByteArray: aNullable8ByteArray,
      aNullableFloatArray: aNullableFloatArray,
      nullableNestedList: nullableNestedList,
      nullableMapWithAnnotations: nullableMapWithAnnotations,
      nullableMapWithObject: nullableMapWithObject,
      aNullableEnum: aNullableEnum,
      anotherNullableEnum: anotherNullableEnum,
      aNullableString: aNullableString,
      aNullableObject: aNullableObject,
      allNullableTypes: allNullableTypes,
      list: list,
      stringList: stringList,
      intList: intList,
      doubleList: doubleList,
      boolList: boolList,
      nestedClassList: nestedClassList,
      map: map
    )
  }
  func toList() -> [Any?] {
    return [
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableByteArray,
      aNullable4ByteArray,
      aNullable8ByteArray,
      aNullableFloatArray,
      nullableNestedList,
      nullableMapWithAnnotations,
      nullableMapWithObject,
      aNullableEnum,
      anotherNullableEnum,
      aNullableString,
      aNullableObject,
      allNullableTypes,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      nestedClassList,
      map,
    ]
  }
}

/// The primary purpose for this class is to ensure coverage of Swift structs
/// with nullable items, as the primary [AllNullableTypes] class is being used to
/// test Swift classes.
///
/// Generated class from Pigeon that represents data sent in messages.
struct AllNullableTypesWithoutRecursion {
  var aNullableBool: Bool? = nil
  var aNullableInt: Int64? = nil
  var aNullableInt64: Int64? = nil
  var aNullableDouble: Double? = nil
  var aNullableByteArray: FlutterStandardTypedData? = nil
  var aNullable4ByteArray: FlutterStandardTypedData? = nil
  var aNullable8ByteArray: FlutterStandardTypedData? = nil
  var aNullableFloatArray: FlutterStandardTypedData? = nil
  var nullableNestedList: [[Bool?]?]? = nil
  var nullableMapWithAnnotations: [String?: String?]? = nil
  var nullableMapWithObject: [String?: Any?]? = nil
  var aNullableEnum: AnEnum? = nil
  var anotherNullableEnum: AnotherEnum? = nil
  var aNullableString: String? = nil
  var aNullableObject: Any? = nil
  var list: [Any?]? = nil
  var stringList: [String?]? = nil
  var intList: [Int64?]? = nil
  var doubleList: [Double?]? = nil
  var boolList: [Bool?]? = nil
  var map: [AnyHashable: Any?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> AllNullableTypesWithoutRecursion? {
    let aNullableBool: Bool? = nilOrValue(__pigeon_list[0])
    let aNullableInt: Int64? =
      isNullish(__pigeon_list[1])
      ? nil
      : (__pigeon_list[1] is Int64?
        ? __pigeon_list[1] as! Int64? : Int64(__pigeon_list[1] as! Int32))
    let aNullableInt64: Int64? =
      isNullish(__pigeon_list[2])
      ? nil
      : (__pigeon_list[2] is Int64?
        ? __pigeon_list[2] as! Int64? : Int64(__pigeon_list[2] as! Int32))
    let aNullableDouble: Double? = nilOrValue(__pigeon_list[3])
    let aNullableByteArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[4])
    let aNullable4ByteArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[5])
    let aNullable8ByteArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[6])
    let aNullableFloatArray: FlutterStandardTypedData? = nilOrValue(__pigeon_list[7])
    let nullableNestedList: [[Bool?]?]? = nilOrValue(__pigeon_list[8])
    let nullableMapWithAnnotations: [String?: String?]? = nilOrValue(__pigeon_list[9])
    let nullableMapWithObject: [String?: Any?]? = nilOrValue(__pigeon_list[10])
    let aNullableEnum: AnEnum? = nilOrValue(__pigeon_list[11])
    let anotherNullableEnum: AnotherEnum? = nilOrValue(__pigeon_list[12])
    let aNullableString: String? = nilOrValue(__pigeon_list[13])
    let aNullableObject: Any? = __pigeon_list[14]
    let list: [Any?]? = nilOrValue(__pigeon_list[15])
    let stringList: [String?]? = nilOrValue(__pigeon_list[16])
    let intList: [Int64?]? = nilOrValue(__pigeon_list[17])
    let doubleList: [Double?]? = nilOrValue(__pigeon_list[18])
    let boolList: [Bool?]? = nilOrValue(__pigeon_list[19])
    let map: [AnyHashable: Any?]? = nilOrValue(__pigeon_list[20])

    return AllNullableTypesWithoutRecursion(
      aNullableBool: aNullableBool,
      aNullableInt: aNullableInt,
      aNullableInt64: aNullableInt64,
      aNullableDouble: aNullableDouble,
      aNullableByteArray: aNullableByteArray,
      aNullable4ByteArray: aNullable4ByteArray,
      aNullable8ByteArray: aNullable8ByteArray,
      aNullableFloatArray: aNullableFloatArray,
      nullableNestedList: nullableNestedList,
      nullableMapWithAnnotations: nullableMapWithAnnotations,
      nullableMapWithObject: nullableMapWithObject,
      aNullableEnum: aNullableEnum,
      anotherNullableEnum: anotherNullableEnum,
      aNullableString: aNullableString,
      aNullableObject: aNullableObject,
      list: list,
      stringList: stringList,
      intList: intList,
      doubleList: doubleList,
      boolList: boolList,
      map: map
    )
  }
  func toList() -> [Any?] {
    return [
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableByteArray,
      aNullable4ByteArray,
      aNullable8ByteArray,
      aNullableFloatArray,
      nullableNestedList,
      nullableMapWithAnnotations,
      nullableMapWithObject,
      aNullableEnum,
      anotherNullableEnum,
      aNullableString,
      aNullableObject,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      map,
    ]
  }
}

/// A class for testing nested class handling.
///
/// This is needed to test nested nullable and non-nullable classes,
/// `AllNullableTypes` is non-nullable here as it is easier to instantiate
/// than `AllTypes` when testing doesn't require both (ie. testing null classes).
///
/// Generated class from Pigeon that represents data sent in messages.
struct AllClassesWrapper {
  var allNullableTypes: AllNullableTypes
  var allNullableTypesWithoutRecursion: AllNullableTypesWithoutRecursion? = nil
  var allTypes: AllTypes? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> AllClassesWrapper? {
    let allNullableTypes = __pigeon_list[0] as! AllNullableTypes
    let allNullableTypesWithoutRecursion: AllNullableTypesWithoutRecursion? = nilOrValue(
      __pigeon_list[1])
    let allTypes: AllTypes? = nilOrValue(__pigeon_list[2])

    return AllClassesWrapper(
      allNullableTypes: allNullableTypes,
      allNullableTypesWithoutRecursion: allNullableTypesWithoutRecursion,
      allTypes: allTypes
    )
  }
  func toList() -> [Any?] {
    return [
      allNullableTypes,
      allNullableTypesWithoutRecursion,
      allTypes,
    ]
  }
}

/// A data class containing a List, used in unit tests.
///
/// Generated class from Pigeon that represents data sent in messages.
struct TestMessage {
  var testList: [Any?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> TestMessage? {
    let testList: [Any?]? = nilOrValue(__pigeon_list[0])

    return TestMessage(
      testList: testList
    )
  }
  func toList() -> [Any?] {
    return [
      testList
    ]
  }
}

// swift-format-ignore: TypeNamesShouldBeCapitalized
struct __pigeon_CodecOverflow {
  var type: Int
  var wrapped: Any? = nil

  func toList() -> [Any?] {
    return [
      type,
      wrapped,
    ]
  }
  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> Any? {
    let type = __pigeon_list[0] as! Int
    let wrapped: Any? = __pigeon_list[1]

    let wrapper = __pigeon_CodecOverflow(
      type: type,
      wrapped: wrapped
    )

    return wrapper.unwrap()
  }

  func unwrap() -> Any? {
    if wrapped == nil {
      return nil
    }

    switch type {
    case 0:
      return AnotherEnum(rawValue: wrapped as! Int)
    case 1:
      return AllTypes.fromList(wrapped as! [Any?])
    case 2:
      return AllNullableTypes.fromList(wrapped as! [Any?])
    case 3:
      return AllNullableTypesWithoutRecursion.fromList(wrapped as! [Any?])
    case 4:
      return AllClassesWrapper.fromList(wrapped as! [Any?])
    case 5:
      return TestMessage.fromList(wrapped as! [Any?])
    default:
      return nil
    }
  }
}

private class CoreTestsPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      var enumResult: FillerEnum0? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum0(rawValue: enumResultAsInt)
      }
      return enumResult
    case 130:
      var enumResult: FillerEnum1? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum1(rawValue: enumResultAsInt)
      }
      return enumResult
    case 131:
      var enumResult: FillerEnum2? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum2(rawValue: enumResultAsInt)
      }
      return enumResult
    case 132:
      var enumResult: FillerEnum3? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum3(rawValue: enumResultAsInt)
      }
      return enumResult
    case 133:
      var enumResult: FillerEnum4? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum4(rawValue: enumResultAsInt)
      }
      return enumResult
    case 134:
      var enumResult: FillerEnum5? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum5(rawValue: enumResultAsInt)
      }
      return enumResult
    case 135:
      var enumResult: FillerEnum6? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum6(rawValue: enumResultAsInt)
      }
      return enumResult
    case 136:
      var enumResult: FillerEnum7? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum7(rawValue: enumResultAsInt)
      }
      return enumResult
    case 137:
      var enumResult: FillerEnum8? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum8(rawValue: enumResultAsInt)
      }
      return enumResult
    case 138:
      var enumResult: FillerEnum9? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum9(rawValue: enumResultAsInt)
      }
      return enumResult
    case 139:
      var enumResult: FillerEnum10? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum10(rawValue: enumResultAsInt)
      }
      return enumResult
    case 140:
      var enumResult: FillerEnum11? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum11(rawValue: enumResultAsInt)
      }
      return enumResult
    case 141:
      var enumResult: FillerEnum12? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum12(rawValue: enumResultAsInt)
      }
      return enumResult
    case 142:
      var enumResult: FillerEnum13? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum13(rawValue: enumResultAsInt)
      }
      return enumResult
    case 143:
      var enumResult: FillerEnum14? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum14(rawValue: enumResultAsInt)
      }
      return enumResult
    case 144:
      var enumResult: FillerEnum15? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum15(rawValue: enumResultAsInt)
      }
      return enumResult
    case 145:
      var enumResult: FillerEnum16? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum16(rawValue: enumResultAsInt)
      }
      return enumResult
    case 146:
      var enumResult: FillerEnum17? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum17(rawValue: enumResultAsInt)
      }
      return enumResult
    case 147:
      var enumResult: FillerEnum18? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum18(rawValue: enumResultAsInt)
      }
      return enumResult
    case 148:
      var enumResult: FillerEnum19? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum19(rawValue: enumResultAsInt)
      }
      return enumResult
    case 149:
      var enumResult: FillerEnum20? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum20(rawValue: enumResultAsInt)
      }
      return enumResult
    case 150:
      var enumResult: FillerEnum21? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum21(rawValue: enumResultAsInt)
      }
      return enumResult
    case 151:
      var enumResult: FillerEnum22? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum22(rawValue: enumResultAsInt)
      }
      return enumResult
    case 152:
      var enumResult: FillerEnum23? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum23(rawValue: enumResultAsInt)
      }
      return enumResult
    case 153:
      var enumResult: FillerEnum24? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum24(rawValue: enumResultAsInt)
      }
      return enumResult
    case 154:
      var enumResult: FillerEnum25? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum25(rawValue: enumResultAsInt)
      }
      return enumResult
    case 155:
      var enumResult: FillerEnum26? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum26(rawValue: enumResultAsInt)
      }
      return enumResult
    case 156:
      var enumResult: FillerEnum27? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum27(rawValue: enumResultAsInt)
      }
      return enumResult
    case 157:
      var enumResult: FillerEnum28? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum28(rawValue: enumResultAsInt)
      }
      return enumResult
    case 158:
      var enumResult: FillerEnum29? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum29(rawValue: enumResultAsInt)
      }
      return enumResult
    case 159:
      var enumResult: FillerEnum30? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum30(rawValue: enumResultAsInt)
      }
      return enumResult
    case 160:
      var enumResult: FillerEnum31? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum31(rawValue: enumResultAsInt)
      }
      return enumResult
    case 161:
      var enumResult: FillerEnum32? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum32(rawValue: enumResultAsInt)
      }
      return enumResult
    case 162:
      var enumResult: FillerEnum33? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum33(rawValue: enumResultAsInt)
      }
      return enumResult
    case 163:
      var enumResult: FillerEnum34? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum34(rawValue: enumResultAsInt)
      }
      return enumResult
    case 164:
      var enumResult: FillerEnum35? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum35(rawValue: enumResultAsInt)
      }
      return enumResult
    case 165:
      var enumResult: FillerEnum36? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum36(rawValue: enumResultAsInt)
      }
      return enumResult
    case 166:
      var enumResult: FillerEnum37? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum37(rawValue: enumResultAsInt)
      }
      return enumResult
    case 167:
      var enumResult: FillerEnum38? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum38(rawValue: enumResultAsInt)
      }
      return enumResult
    case 168:
      var enumResult: FillerEnum39? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum39(rawValue: enumResultAsInt)
      }
      return enumResult
    case 169:
      var enumResult: FillerEnum40? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum40(rawValue: enumResultAsInt)
      }
      return enumResult
    case 170:
      var enumResult: FillerEnum41? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum41(rawValue: enumResultAsInt)
      }
      return enumResult
    case 171:
      var enumResult: FillerEnum42? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum42(rawValue: enumResultAsInt)
      }
      return enumResult
    case 172:
      var enumResult: FillerEnum43? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum43(rawValue: enumResultAsInt)
      }
      return enumResult
    case 173:
      var enumResult: FillerEnum44? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum44(rawValue: enumResultAsInt)
      }
      return enumResult
    case 174:
      var enumResult: FillerEnum45? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum45(rawValue: enumResultAsInt)
      }
      return enumResult
    case 175:
      var enumResult: FillerEnum46? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum46(rawValue: enumResultAsInt)
      }
      return enumResult
    case 176:
      var enumResult: FillerEnum47? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum47(rawValue: enumResultAsInt)
      }
      return enumResult
    case 177:
      var enumResult: FillerEnum48? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum48(rawValue: enumResultAsInt)
      }
      return enumResult
    case 178:
      var enumResult: FillerEnum49? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum49(rawValue: enumResultAsInt)
      }
      return enumResult
    case 179:
      var enumResult: FillerEnum50? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum50(rawValue: enumResultAsInt)
      }
      return enumResult
    case 180:
      var enumResult: FillerEnum51? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum51(rawValue: enumResultAsInt)
      }
      return enumResult
    case 181:
      var enumResult: FillerEnum52? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum52(rawValue: enumResultAsInt)
      }
      return enumResult
    case 182:
      var enumResult: FillerEnum53? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum53(rawValue: enumResultAsInt)
      }
      return enumResult
    case 183:
      var enumResult: FillerEnum54? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum54(rawValue: enumResultAsInt)
      }
      return enumResult
    case 184:
      var enumResult: FillerEnum55? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum55(rawValue: enumResultAsInt)
      }
      return enumResult
    case 185:
      var enumResult: FillerEnum56? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum56(rawValue: enumResultAsInt)
      }
      return enumResult
    case 186:
      var enumResult: FillerEnum57? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum57(rawValue: enumResultAsInt)
      }
      return enumResult
    case 187:
      var enumResult: FillerEnum58? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum58(rawValue: enumResultAsInt)
      }
      return enumResult
    case 188:
      var enumResult: FillerEnum59? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum59(rawValue: enumResultAsInt)
      }
      return enumResult
    case 189:
      var enumResult: FillerEnum60? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum60(rawValue: enumResultAsInt)
      }
      return enumResult
    case 190:
      var enumResult: FillerEnum61? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum61(rawValue: enumResultAsInt)
      }
      return enumResult
    case 191:
      var enumResult: FillerEnum62? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum62(rawValue: enumResultAsInt)
      }
      return enumResult
    case 192:
      var enumResult: FillerEnum63? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum63(rawValue: enumResultAsInt)
      }
      return enumResult
    case 193:
      var enumResult: FillerEnum64? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum64(rawValue: enumResultAsInt)
      }
      return enumResult
    case 194:
      var enumResult: FillerEnum65? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum65(rawValue: enumResultAsInt)
      }
      return enumResult
    case 195:
      var enumResult: FillerEnum66? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum66(rawValue: enumResultAsInt)
      }
      return enumResult
    case 196:
      var enumResult: FillerEnum67? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum67(rawValue: enumResultAsInt)
      }
      return enumResult
    case 197:
      var enumResult: FillerEnum68? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum68(rawValue: enumResultAsInt)
      }
      return enumResult
    case 198:
      var enumResult: FillerEnum69? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum69(rawValue: enumResultAsInt)
      }
      return enumResult
    case 199:
      var enumResult: FillerEnum70? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum70(rawValue: enumResultAsInt)
      }
      return enumResult
    case 200:
      var enumResult: FillerEnum71? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum71(rawValue: enumResultAsInt)
      }
      return enumResult
    case 201:
      var enumResult: FillerEnum72? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum72(rawValue: enumResultAsInt)
      }
      return enumResult
    case 202:
      var enumResult: FillerEnum73? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum73(rawValue: enumResultAsInt)
      }
      return enumResult
    case 203:
      var enumResult: FillerEnum74? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum74(rawValue: enumResultAsInt)
      }
      return enumResult
    case 204:
      var enumResult: FillerEnum75? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum75(rawValue: enumResultAsInt)
      }
      return enumResult
    case 205:
      var enumResult: FillerEnum76? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum76(rawValue: enumResultAsInt)
      }
      return enumResult
    case 206:
      var enumResult: FillerEnum77? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum77(rawValue: enumResultAsInt)
      }
      return enumResult
    case 207:
      var enumResult: FillerEnum78? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum78(rawValue: enumResultAsInt)
      }
      return enumResult
    case 208:
      var enumResult: FillerEnum79? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum79(rawValue: enumResultAsInt)
      }
      return enumResult
    case 209:
      var enumResult: FillerEnum80? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum80(rawValue: enumResultAsInt)
      }
      return enumResult
    case 210:
      var enumResult: FillerEnum81? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum81(rawValue: enumResultAsInt)
      }
      return enumResult
    case 211:
      var enumResult: FillerEnum82? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum82(rawValue: enumResultAsInt)
      }
      return enumResult
    case 212:
      var enumResult: FillerEnum83? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum83(rawValue: enumResultAsInt)
      }
      return enumResult
    case 213:
      var enumResult: FillerEnum84? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum84(rawValue: enumResultAsInt)
      }
      return enumResult
    case 214:
      var enumResult: FillerEnum85? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum85(rawValue: enumResultAsInt)
      }
      return enumResult
    case 215:
      var enumResult: FillerEnum86? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum86(rawValue: enumResultAsInt)
      }
      return enumResult
    case 216:
      var enumResult: FillerEnum87? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum87(rawValue: enumResultAsInt)
      }
      return enumResult
    case 217:
      var enumResult: FillerEnum88? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum88(rawValue: enumResultAsInt)
      }
      return enumResult
    case 218:
      var enumResult: FillerEnum89? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum89(rawValue: enumResultAsInt)
      }
      return enumResult
    case 219:
      var enumResult: FillerEnum90? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum90(rawValue: enumResultAsInt)
      }
      return enumResult
    case 220:
      var enumResult: FillerEnum91? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum91(rawValue: enumResultAsInt)
      }
      return enumResult
    case 221:
      var enumResult: FillerEnum92? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum92(rawValue: enumResultAsInt)
      }
      return enumResult
    case 222:
      var enumResult: FillerEnum93? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum93(rawValue: enumResultAsInt)
      }
      return enumResult
    case 223:
      var enumResult: FillerEnum94? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum94(rawValue: enumResultAsInt)
      }
      return enumResult
    case 224:
      var enumResult: FillerEnum95? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum95(rawValue: enumResultAsInt)
      }
      return enumResult
    case 225:
      var enumResult: FillerEnum96? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum96(rawValue: enumResultAsInt)
      }
      return enumResult
    case 226:
      var enumResult: FillerEnum97? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum97(rawValue: enumResultAsInt)
      }
      return enumResult
    case 227:
      var enumResult: FillerEnum98? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum98(rawValue: enumResultAsInt)
      }
      return enumResult
    case 228:
      var enumResult: FillerEnum99? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum99(rawValue: enumResultAsInt)
      }
      return enumResult
    case 229:
      var enumResult: FillerEnum100? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum100(rawValue: enumResultAsInt)
      }
      return enumResult
    case 230:
      var enumResult: FillerEnum101? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum101(rawValue: enumResultAsInt)
      }
      return enumResult
    case 231:
      var enumResult: FillerEnum102? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum102(rawValue: enumResultAsInt)
      }
      return enumResult
    case 232:
      var enumResult: FillerEnum103? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum103(rawValue: enumResultAsInt)
      }
      return enumResult
    case 233:
      var enumResult: FillerEnum104? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum104(rawValue: enumResultAsInt)
      }
      return enumResult
    case 234:
      var enumResult: FillerEnum105? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum105(rawValue: enumResultAsInt)
      }
      return enumResult
    case 235:
      var enumResult: FillerEnum106? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum106(rawValue: enumResultAsInt)
      }
      return enumResult
    case 236:
      var enumResult: FillerEnum107? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum107(rawValue: enumResultAsInt)
      }
      return enumResult
    case 237:
      var enumResult: FillerEnum108? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum108(rawValue: enumResultAsInt)
      }
      return enumResult
    case 238:
      var enumResult: FillerEnum109? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum109(rawValue: enumResultAsInt)
      }
      return enumResult
    case 239:
      var enumResult: FillerEnum110? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum110(rawValue: enumResultAsInt)
      }
      return enumResult
    case 240:
      var enumResult: FillerEnum111? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum111(rawValue: enumResultAsInt)
      }
      return enumResult
    case 241:
      var enumResult: FillerEnum112? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum112(rawValue: enumResultAsInt)
      }
      return enumResult
    case 242:
      var enumResult: FillerEnum113? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum113(rawValue: enumResultAsInt)
      }
      return enumResult
    case 243:
      var enumResult: FillerEnum114? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum114(rawValue: enumResultAsInt)
      }
      return enumResult
    case 244:
      var enumResult: FillerEnum115? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum115(rawValue: enumResultAsInt)
      }
      return enumResult
    case 245:
      var enumResult: FillerEnum116? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum116(rawValue: enumResultAsInt)
      }
      return enumResult
    case 246:
      var enumResult: FillerEnum117? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum117(rawValue: enumResultAsInt)
      }
      return enumResult
    case 247:
      var enumResult: FillerEnum118? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum118(rawValue: enumResultAsInt)
      }
      return enumResult
    case 248:
      var enumResult: FillerEnum119? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum119(rawValue: enumResultAsInt)
      }
      return enumResult
    case 249:
      var enumResult: FillerEnum120? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum120(rawValue: enumResultAsInt)
      }
      return enumResult
    case 250:
      var enumResult: FillerEnum121? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum121(rawValue: enumResultAsInt)
      }
      return enumResult
    case 251:
      var enumResult: FillerEnum122? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum122(rawValue: enumResultAsInt)
      }
      return enumResult
    case 252:
      var enumResult: FillerEnum123? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum123(rawValue: enumResultAsInt)
      }
      return enumResult
    case 253:
      var enumResult: FillerEnum124? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = FillerEnum124(rawValue: enumResultAsInt)
      }
      return enumResult
    case 254:
      var enumResult: AnEnum? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = AnEnum(rawValue: enumResultAsInt)
      }
      return enumResult
    case 255:
      return __pigeon_CodecOverflow.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class CoreTestsPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FillerEnum0 {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum1 {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum2 {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum3 {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum4 {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum5 {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum6 {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum7 {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum8 {
      super.writeByte(137)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum9 {
      super.writeByte(138)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum10 {
      super.writeByte(139)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum11 {
      super.writeByte(140)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum12 {
      super.writeByte(141)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum13 {
      super.writeByte(142)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum14 {
      super.writeByte(143)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum15 {
      super.writeByte(144)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum16 {
      super.writeByte(145)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum17 {
      super.writeByte(146)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum18 {
      super.writeByte(147)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum19 {
      super.writeByte(148)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum20 {
      super.writeByte(149)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum21 {
      super.writeByte(150)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum22 {
      super.writeByte(151)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum23 {
      super.writeByte(152)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum24 {
      super.writeByte(153)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum25 {
      super.writeByte(154)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum26 {
      super.writeByte(155)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum27 {
      super.writeByte(156)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum28 {
      super.writeByte(157)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum29 {
      super.writeByte(158)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum30 {
      super.writeByte(159)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum31 {
      super.writeByte(160)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum32 {
      super.writeByte(161)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum33 {
      super.writeByte(162)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum34 {
      super.writeByte(163)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum35 {
      super.writeByte(164)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum36 {
      super.writeByte(165)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum37 {
      super.writeByte(166)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum38 {
      super.writeByte(167)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum39 {
      super.writeByte(168)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum40 {
      super.writeByte(169)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum41 {
      super.writeByte(170)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum42 {
      super.writeByte(171)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum43 {
      super.writeByte(172)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum44 {
      super.writeByte(173)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum45 {
      super.writeByte(174)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum46 {
      super.writeByte(175)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum47 {
      super.writeByte(176)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum48 {
      super.writeByte(177)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum49 {
      super.writeByte(178)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum50 {
      super.writeByte(179)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum51 {
      super.writeByte(180)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum52 {
      super.writeByte(181)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum53 {
      super.writeByte(182)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum54 {
      super.writeByte(183)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum55 {
      super.writeByte(184)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum56 {
      super.writeByte(185)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum57 {
      super.writeByte(186)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum58 {
      super.writeByte(187)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum59 {
      super.writeByte(188)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum60 {
      super.writeByte(189)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum61 {
      super.writeByte(190)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum62 {
      super.writeByte(191)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum63 {
      super.writeByte(192)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum64 {
      super.writeByte(193)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum65 {
      super.writeByte(194)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum66 {
      super.writeByte(195)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum67 {
      super.writeByte(196)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum68 {
      super.writeByte(197)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum69 {
      super.writeByte(198)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum70 {
      super.writeByte(199)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum71 {
      super.writeByte(200)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum72 {
      super.writeByte(201)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum73 {
      super.writeByte(202)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum74 {
      super.writeByte(203)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum75 {
      super.writeByte(204)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum76 {
      super.writeByte(205)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum77 {
      super.writeByte(206)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum78 {
      super.writeByte(207)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum79 {
      super.writeByte(208)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum80 {
      super.writeByte(209)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum81 {
      super.writeByte(210)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum82 {
      super.writeByte(211)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum83 {
      super.writeByte(212)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum84 {
      super.writeByte(213)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum85 {
      super.writeByte(214)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum86 {
      super.writeByte(215)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum87 {
      super.writeByte(216)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum88 {
      super.writeByte(217)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum89 {
      super.writeByte(218)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum90 {
      super.writeByte(219)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum91 {
      super.writeByte(220)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum92 {
      super.writeByte(221)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum93 {
      super.writeByte(222)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum94 {
      super.writeByte(223)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum95 {
      super.writeByte(224)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum96 {
      super.writeByte(225)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum97 {
      super.writeByte(226)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum98 {
      super.writeByte(227)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum99 {
      super.writeByte(228)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum100 {
      super.writeByte(229)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum101 {
      super.writeByte(230)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum102 {
      super.writeByte(231)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum103 {
      super.writeByte(232)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum104 {
      super.writeByte(233)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum105 {
      super.writeByte(234)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum106 {
      super.writeByte(235)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum107 {
      super.writeByte(236)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum108 {
      super.writeByte(237)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum109 {
      super.writeByte(238)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum110 {
      super.writeByte(239)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum111 {
      super.writeByte(240)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum112 {
      super.writeByte(241)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum113 {
      super.writeByte(242)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum114 {
      super.writeByte(243)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum115 {
      super.writeByte(244)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum116 {
      super.writeByte(245)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum117 {
      super.writeByte(246)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum118 {
      super.writeByte(247)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum119 {
      super.writeByte(248)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum120 {
      super.writeByte(249)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum121 {
      super.writeByte(250)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum122 {
      super.writeByte(251)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum123 {
      super.writeByte(252)
      super.writeValue(value.rawValue)
    } else if let value = value as? FillerEnum124 {
      super.writeByte(253)
      super.writeValue(value.rawValue)
    } else if let value = value as? AnEnum {
      super.writeByte(254)
      super.writeValue(value.rawValue)
    } else if let value = value as? AnotherEnum {
      let wrap = __pigeon_CodecOverflow(type: 0, wrapped: value.rawValue)
      super.writeByte(255)
      super.writeValue(wrap.toList())
    } else if let value = value as? AllTypes {
      let wrap = __pigeon_CodecOverflow(type: 1, wrapped: value.toList())
      super.writeByte(255)
      super.writeValue(wrap.toList())
    } else if let value = value as? AllNullableTypes {
      let wrap = __pigeon_CodecOverflow(type: 2, wrapped: value.toList())
      super.writeByte(255)
      super.writeValue(wrap.toList())
    } else if let value = value as? AllNullableTypesWithoutRecursion {
      let wrap = __pigeon_CodecOverflow(type: 3, wrapped: value.toList())
      super.writeByte(255)
      super.writeValue(wrap.toList())
    } else if let value = value as? AllClassesWrapper {
      let wrap = __pigeon_CodecOverflow(type: 4, wrapped: value.toList())
      super.writeByte(255)
      super.writeValue(wrap.toList())
    } else if let value = value as? TestMessage {
      let wrap = __pigeon_CodecOverflow(type: 5, wrapped: value.toList())
      super.writeByte(255)
      super.writeValue(wrap.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CoreTestsPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CoreTestsPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CoreTestsPigeonCodecWriter(data: data)
  }
}

class CoreTestsPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = CoreTestsPigeonCodec(readerWriter: CoreTestsPigeonCodecReaderWriter())
}

/// The core interface that each host language plugin must implement in
/// platform_test integration tests.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostIntegrationCoreApi {
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  func noop() throws
  /// Returns the passed object, to test serialization and deserialization.
  func echo(_ everything: AllTypes) throws -> AllTypes
  /// Returns an error, to test error handling.
  func throwError() throws -> Any?
  /// Returns an error from a void function, to test error handling.
  func throwErrorFromVoid() throws
  /// Returns a Flutter error, to test error handling.
  func throwFlutterError() throws -> Any?
  /// Returns passed in int.
  func echo(_ anInt: Int64) throws -> Int64
  /// Returns passed in double.
  func echo(_ aDouble: Double) throws -> Double
  /// Returns the passed in boolean.
  func echo(_ aBool: Bool) throws -> Bool
  /// Returns the passed in string.
  func echo(_ aString: String) throws -> String
  /// Returns the passed in Uint8List.
  func echo(_ aUint8List: FlutterStandardTypedData) throws -> FlutterStandardTypedData
  /// Returns the passed in generic Object.
  func echo(_ anObject: Any) throws -> Any
  /// Returns the passed list, to test serialization and deserialization.
  func echo(_ list: [Any?]) throws -> [Any?]
  /// Returns the passed map, to test serialization and deserialization.
  func echo(_ aMap: [String?: Any?]) throws -> [String?: Any?]
  /// Returns the passed map to test nested class serialization and deserialization.
  func echo(_ wrapper: AllClassesWrapper) throws -> AllClassesWrapper
  /// Returns the passed enum to test serialization and deserialization.
  func echo(_ anEnum: AnEnum) throws -> AnEnum
  /// Returns the passed enum to test serialization and deserialization.
  func echo(_ anotherEnum: AnotherEnum) throws -> AnotherEnum
  /// Returns the default string.
  func echoNamedDefault(_ aString: String) throws -> String
  /// Returns passed in double.
  func echoOptionalDefault(_ aDouble: Double) throws -> Double
  /// Returns passed in int.
  func echoRequired(_ anInt: Int64) throws -> Int64
  /// Returns the passed object, to test serialization and deserialization.
  func echo(_ everything: AllNullableTypes?) throws -> AllNullableTypes?
  /// Returns the passed object, to test serialization and deserialization.
  func echo(_ everything: AllNullableTypesWithoutRecursion?) throws
    -> AllNullableTypesWithoutRecursion?
  /// Returns the inner `aString` value from the wrapped object, to test
  /// sending of nested objects.
  func extractNestedNullableString(from wrapper: AllClassesWrapper) throws -> String?
  /// Returns the inner `aString` value from the wrapped object, to test
  /// sending of nested objects.
  func createNestedObject(with nullableString: String?) throws -> AllClassesWrapper
  /// Returns passed in arguments of multiple types.
  func sendMultipleNullableTypes(
    aBool aNullableBool: Bool?, anInt aNullableInt: Int64?, aString aNullableString: String?
  ) throws -> AllNullableTypes
  /// Returns passed in arguments of multiple types.
  func sendMultipleNullableTypesWithoutRecursion(
    aBool aNullableBool: Bool?, anInt aNullableInt: Int64?, aString aNullableString: String?
  ) throws -> AllNullableTypesWithoutRecursion
  /// Returns passed in int.
  func echo(_ aNullableInt: Int64?) throws -> Int64?
  /// Returns passed in double.
  func echo(_ aNullableDouble: Double?) throws -> Double?
  /// Returns the passed in boolean.
  func echo(_ aNullableBool: Bool?) throws -> Bool?
  /// Returns the passed in string.
  func echo(_ aNullableString: String?) throws -> String?
  /// Returns the passed in Uint8List.
  func echo(_ aNullableUint8List: FlutterStandardTypedData?) throws -> FlutterStandardTypedData?
  /// Returns the passed in generic Object.
  func echo(_ aNullableObject: Any?) throws -> Any?
  /// Returns the passed list, to test serialization and deserialization.
  func echoNullable(_ aNullableList: [Any?]?) throws -> [Any?]?
  /// Returns the passed map, to test serialization and deserialization.
  func echoNullable(_ aNullableMap: [String?: Any?]?) throws -> [String?: Any?]?
  func echoNullable(_ anEnum: AnEnum?) throws -> AnEnum?
  func echoNullable(_ anotherEnum: AnotherEnum?) throws -> AnotherEnum?
  /// Returns passed in int.
  func echoOptional(_ aNullableInt: Int64?) throws -> Int64?
  /// Returns the passed in string.
  func echoNamed(_ aNullableString: String?) throws -> String?
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  func noopAsync(completion: @escaping (Result<Void, Error>) -> Void)
  /// Returns passed in int asynchronously.
  func echoAsync(_ anInt: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  /// Returns passed in double asynchronously.
  func echoAsync(_ aDouble: Double, completion: @escaping (Result<Double, Error>) -> Void)
  /// Returns the passed in boolean asynchronously.
  func echoAsync(_ aBool: Bool, completion: @escaping (Result<Bool, Error>) -> Void)
  /// Returns the passed string asynchronously.
  func echoAsync(_ aString: String, completion: @escaping (Result<String, Error>) -> Void)
  /// Returns the passed in Uint8List asynchronously.
  func echoAsync(
    _ aUint8List: FlutterStandardTypedData,
    completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  /// Returns the passed in generic Object asynchronously.
  func echoAsync(_ anObject: Any, completion: @escaping (Result<Any, Error>) -> Void)
  /// Returns the passed list, to test asynchronous serialization and deserialization.
  func echoAsync(_ list: [Any?], completion: @escaping (Result<[Any?], Error>) -> Void)
  /// Returns the passed map, to test asynchronous serialization and deserialization.
  func echoAsync(
    _ aMap: [String?: Any?], completion: @escaping (Result<[String?: Any?], Error>) -> Void)
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  func echoAsync(_ anEnum: AnEnum, completion: @escaping (Result<AnEnum, Error>) -> Void)
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  func echoAsync(
    _ anotherEnum: AnotherEnum, completion: @escaping (Result<AnotherEnum, Error>) -> Void)
  /// Responds with an error from an async function returning a value.
  func throwAsyncError(completion: @escaping (Result<Any?, Error>) -> Void)
  /// Responds with an error from an async void function.
  func throwAsyncErrorFromVoid(completion: @escaping (Result<Void, Error>) -> Void)
  /// Responds with a Flutter error from an async function returning a value.
  func throwAsyncFlutterError(completion: @escaping (Result<Any?, Error>) -> Void)
  /// Returns the passed object, to test async serialization and deserialization.
  func echoAsync(_ everything: AllTypes, completion: @escaping (Result<AllTypes, Error>) -> Void)
  /// Returns the passed object, to test serialization and deserialization.
  func echoAsync(
    _ everything: AllNullableTypes?,
    completion: @escaping (Result<AllNullableTypes?, Error>) -> Void)
  /// Returns the passed object, to test serialization and deserialization.
  func echoAsync(
    _ everything: AllNullableTypesWithoutRecursion?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion?, Error>) -> Void)
  /// Returns passed in int asynchronously.
  func echoAsyncNullable(_ anInt: Int64?, completion: @escaping (Result<Int64?, Error>) -> Void)
  /// Returns passed in double asynchronously.
  func echoAsyncNullable(_ aDouble: Double?, completion: @escaping (Result<Double?, Error>) -> Void)
  /// Returns the passed in boolean asynchronously.
  func echoAsyncNullable(_ aBool: Bool?, completion: @escaping (Result<Bool?, Error>) -> Void)
  /// Returns the passed string asynchronously.
  func echoAsyncNullable(_ aString: String?, completion: @escaping (Result<String?, Error>) -> Void)
  /// Returns the passed in Uint8List asynchronously.
  func echoAsyncNullable(
    _ aUint8List: FlutterStandardTypedData?,
    completion: @escaping (Result<FlutterStandardTypedData?, Error>) -> Void)
  /// Returns the passed in generic Object asynchronously.
  func echoAsyncNullable(_ anObject: Any?, completion: @escaping (Result<Any?, Error>) -> Void)
  /// Returns the passed list, to test asynchronous serialization and deserialization.
  func echoAsyncNullable(_ list: [Any?]?, completion: @escaping (Result<[Any?]?, Error>) -> Void)
  /// Returns the passed map, to test asynchronous serialization and deserialization.
  func echoAsyncNullable(
    _ aMap: [String?: Any?]?, completion: @escaping (Result<[String?: Any?]?, Error>) -> Void)
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  func echoAsyncNullable(_ anEnum: AnEnum?, completion: @escaping (Result<AnEnum?, Error>) -> Void)
  /// Returns the passed enum, to test asynchronous serialization and deserialization.
  func echoAsyncNullable(
    _ anotherEnum: AnotherEnum?, completion: @escaping (Result<AnotherEnum?, Error>) -> Void)
  func callFlutterNoop(completion: @escaping (Result<Void, Error>) -> Void)
  func callFlutterThrowError(completion: @escaping (Result<Any?, Error>) -> Void)
  func callFlutterThrowErrorFromVoid(completion: @escaping (Result<Void, Error>) -> Void)
  func callFlutterEcho(
    _ everything: AllTypes, completion: @escaping (Result<AllTypes, Error>) -> Void)
  func callFlutterEcho(
    _ everything: AllNullableTypes?,
    completion: @escaping (Result<AllNullableTypes?, Error>) -> Void)
  func callFlutterSendMultipleNullableTypes(
    aBool aNullableBool: Bool?, anInt aNullableInt: Int64?, aString aNullableString: String?,
    completion: @escaping (Result<AllNullableTypes, Error>) -> Void)
  func callFlutterEcho(
    _ everything: AllNullableTypesWithoutRecursion?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion?, Error>) -> Void)
  func callFlutterSendMultipleNullableTypesWithoutRecursion(
    aBool aNullableBool: Bool?, anInt aNullableInt: Int64?, aString aNullableString: String?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion, Error>) -> Void)
  func callFlutterEcho(_ aBool: Bool, completion: @escaping (Result<Bool, Error>) -> Void)
  func callFlutterEcho(_ anInt: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func callFlutterEcho(_ aDouble: Double, completion: @escaping (Result<Double, Error>) -> Void)
  func callFlutterEcho(_ aString: String, completion: @escaping (Result<String, Error>) -> Void)
  func callFlutterEcho(
    _ list: FlutterStandardTypedData,
    completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func callFlutterEcho(_ list: [Any?], completion: @escaping (Result<[Any?], Error>) -> Void)
  func callFlutterEcho(
    _ aMap: [String?: Any?], completion: @escaping (Result<[String?: Any?], Error>) -> Void)
  func callFlutterEcho(_ anEnum: AnEnum, completion: @escaping (Result<AnEnum, Error>) -> Void)
  func callFlutterEcho(
    _ anotherEnum: AnotherEnum, completion: @escaping (Result<AnotherEnum, Error>) -> Void)
  func callFlutterEchoNullable(_ aBool: Bool?, completion: @escaping (Result<Bool?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ anInt: Int64?, completion: @escaping (Result<Int64?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ aDouble: Double?, completion: @escaping (Result<Double?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ aString: String?, completion: @escaping (Result<String?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ list: FlutterStandardTypedData?,
    completion: @escaping (Result<FlutterStandardTypedData?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ list: [Any?]?, completion: @escaping (Result<[Any?]?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ aMap: [String?: Any?]?, completion: @escaping (Result<[String?: Any?]?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ anEnum: AnEnum?, completion: @escaping (Result<AnEnum?, Error>) -> Void)
  func callFlutterEchoNullable(
    _ anotherEnum: AnotherEnum?, completion: @escaping (Result<AnotherEnum?, Error>) -> Void)
  func callFlutterSmallApiEcho(
    _ aString: String, completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostIntegrationCoreApiSetup {
  static var codec: FlutterStandardMessageCodec { CoreTestsPigeonCodec.shared }
  /// Sets up an instance of `HostIntegrationCoreApi` to handle messages through the `binaryMessenger`.
  static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: HostIntegrationCoreApi?,
    messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// A no-op function taking no arguments and returning no value, to sanity
    /// test basic calling.
    let noopChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.noop\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      noopChannel.setMessageHandler { _, reply in
        do {
          try api.noop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      noopChannel.setMessageHandler(nil)
    }
    /// Returns the passed object, to test serialization and deserialization.
    let echoAllTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAllTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAllTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg = args[0] as! AllTypes
        do {
          let result = try api.echo(everythingArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoAllTypesChannel.setMessageHandler(nil)
    }
    /// Returns an error, to test error handling.
    let throwErrorChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwError\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      throwErrorChannel.setMessageHandler { _, reply in
        do {
          let result = try api.throwError()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      throwErrorChannel.setMessageHandler(nil)
    }
    /// Returns an error from a void function, to test error handling.
    let throwErrorFromVoidChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwErrorFromVoid\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      throwErrorFromVoidChannel.setMessageHandler { _, reply in
        do {
          try api.throwErrorFromVoid()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      throwErrorFromVoidChannel.setMessageHandler(nil)
    }
    /// Returns a Flutter error, to test error handling.
    let throwFlutterErrorChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwFlutterError\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      throwFlutterErrorChannel.setMessageHandler { _, reply in
        do {
          let result = try api.throwFlutterError()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      throwFlutterErrorChannel.setMessageHandler(nil)
    }
    /// Returns passed in int.
    let echoIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anIntArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          let result = try api.echo(anIntArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoIntChannel.setMessageHandler(nil)
    }
    /// Returns passed in double.
    let echoDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aDoubleArg = args[0] as! Double
        do {
          let result = try api.echo(aDoubleArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoDoubleChannel.setMessageHandler(nil)
    }
    /// Returns the passed in boolean.
    let echoBoolChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoBool\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aBoolArg = args[0] as! Bool
        do {
          let result = try api.echo(aBoolArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoBoolChannel.setMessageHandler(nil)
    }
    /// Returns the passed in string.
    let echoStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg = args[0] as! String
        do {
          let result = try api.echo(aStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoStringChannel.setMessageHandler(nil)
    }
    /// Returns the passed in Uint8List.
    let echoUint8ListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoUint8List\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoUint8ListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aUint8ListArg = args[0] as! FlutterStandardTypedData
        do {
          let result = try api.echo(aUint8ListArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoUint8ListChannel.setMessageHandler(nil)
    }
    /// Returns the passed in generic Object.
    let echoObjectChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoObject\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoObjectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anObjectArg = args[0]!
        do {
          let result = try api.echo(anObjectArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoObjectChannel.setMessageHandler(nil)
    }
    /// Returns the passed list, to test serialization and deserialization.
    let echoListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoList\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg = args[0] as! [Any?]
        do {
          let result = try api.echo(listArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoListChannel.setMessageHandler(nil)
    }
    /// Returns the passed map, to test serialization and deserialization.
    let echoMapChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoMap\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoMapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aMapArg = args[0] as! [String?: Any?]
        do {
          let result = try api.echo(aMapArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoMapChannel.setMessageHandler(nil)
    }
    /// Returns the passed map to test nested class serialization and deserialization.
    let echoClassWrapperChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoClassWrapper\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoClassWrapperChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let wrapperArg = args[0] as! AllClassesWrapper
        do {
          let result = try api.echo(wrapperArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoClassWrapperChannel.setMessageHandler(nil)
    }
    /// Returns the passed enum to test serialization and deserialization.
    let echoEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anEnumArg = args[0] as! AnEnum
        do {
          let result = try api.echo(anEnumArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoEnumChannel.setMessageHandler(nil)
    }
    /// Returns the passed enum to test serialization and deserialization.
    let echoAnotherEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAnotherEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAnotherEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anotherEnumArg = args[0] as! AnotherEnum
        do {
          let result = try api.echo(anotherEnumArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoAnotherEnumChannel.setMessageHandler(nil)
    }
    /// Returns the default string.
    let echoNamedDefaultStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNamedDefaultString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNamedDefaultStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg = args[0] as! String
        do {
          let result = try api.echoNamedDefault(aStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNamedDefaultStringChannel.setMessageHandler(nil)
    }
    /// Returns passed in double.
    let echoOptionalDefaultDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoOptionalDefaultDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoOptionalDefaultDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aDoubleArg = args[0] as! Double
        do {
          let result = try api.echoOptionalDefault(aDoubleArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoOptionalDefaultDoubleChannel.setMessageHandler(nil)
    }
    /// Returns passed in int.
    let echoRequiredIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoRequiredInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoRequiredIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anIntArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          let result = try api.echoRequired(anIntArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoRequiredIntChannel.setMessageHandler(nil)
    }
    /// Returns the passed object, to test serialization and deserialization.
    let echoAllNullableTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAllNullableTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAllNullableTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg: AllNullableTypes? = nilOrValue(args[0])
        do {
          let result = try api.echo(everythingArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoAllNullableTypesChannel.setMessageHandler(nil)
    }
    /// Returns the passed object, to test serialization and deserialization.
    let echoAllNullableTypesWithoutRecursionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAllNullableTypesWithoutRecursion\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAllNullableTypesWithoutRecursionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg: AllNullableTypesWithoutRecursion? = nilOrValue(args[0])
        do {
          let result = try api.echo(everythingArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoAllNullableTypesWithoutRecursionChannel.setMessageHandler(nil)
    }
    /// Returns the inner `aString` value from the wrapped object, to test
    /// sending of nested objects.
    let extractNestedNullableStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.extractNestedNullableString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      extractNestedNullableStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let wrapperArg = args[0] as! AllClassesWrapper
        do {
          let result = try api.extractNestedNullableString(from: wrapperArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      extractNestedNullableStringChannel.setMessageHandler(nil)
    }
    /// Returns the inner `aString` value from the wrapped object, to test
    /// sending of nested objects.
    let createNestedNullableStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.createNestedNullableString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createNestedNullableStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nullableStringArg: String? = nilOrValue(args[0])
        do {
          let result = try api.createNestedObject(with: nullableStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createNestedNullableStringChannel.setMessageHandler(nil)
    }
    /// Returns passed in arguments of multiple types.
    let sendMultipleNullableTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.sendMultipleNullableTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendMultipleNullableTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableBoolArg: Bool? = nilOrValue(args[0])
        let aNullableIntArg: Int64? =
          isNullish(args[1])
          ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        let aNullableStringArg: String? = nilOrValue(args[2])
        do {
          let result = try api.sendMultipleNullableTypes(
            aBool: aNullableBoolArg, anInt: aNullableIntArg, aString: aNullableStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendMultipleNullableTypesChannel.setMessageHandler(nil)
    }
    /// Returns passed in arguments of multiple types.
    let sendMultipleNullableTypesWithoutRecursionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendMultipleNullableTypesWithoutRecursionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableBoolArg: Bool? = nilOrValue(args[0])
        let aNullableIntArg: Int64? =
          isNullish(args[1])
          ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        let aNullableStringArg: String? = nilOrValue(args[2])
        do {
          let result = try api.sendMultipleNullableTypesWithoutRecursion(
            aBool: aNullableBoolArg, anInt: aNullableIntArg, aString: aNullableStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendMultipleNullableTypesWithoutRecursionChannel.setMessageHandler(nil)
    }
    /// Returns passed in int.
    let echoNullableIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableIntArg: Int64? =
          isNullish(args[0])
          ? nil : (args[0] is Int64? ? args[0] as! Int64? : Int64(args[0] as! Int32))
        do {
          let result = try api.echo(aNullableIntArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableIntChannel.setMessageHandler(nil)
    }
    /// Returns passed in double.
    let echoNullableDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableDoubleArg: Double? = nilOrValue(args[0])
        do {
          let result = try api.echo(aNullableDoubleArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableDoubleChannel.setMessageHandler(nil)
    }
    /// Returns the passed in boolean.
    let echoNullableBoolChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableBool\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableBoolArg: Bool? = nilOrValue(args[0])
        do {
          let result = try api.echo(aNullableBoolArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableBoolChannel.setMessageHandler(nil)
    }
    /// Returns the passed in string.
    let echoNullableStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableStringArg: String? = nilOrValue(args[0])
        do {
          let result = try api.echo(aNullableStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableStringChannel.setMessageHandler(nil)
    }
    /// Returns the passed in Uint8List.
    let echoNullableUint8ListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableUint8List\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableUint8ListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableUint8ListArg: FlutterStandardTypedData? = nilOrValue(args[0])
        do {
          let result = try api.echo(aNullableUint8ListArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableUint8ListChannel.setMessageHandler(nil)
    }
    /// Returns the passed in generic Object.
    let echoNullableObjectChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableObject\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableObjectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableObjectArg: Any? = args[0]
        do {
          let result = try api.echo(aNullableObjectArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableObjectChannel.setMessageHandler(nil)
    }
    /// Returns the passed list, to test serialization and deserialization.
    let echoNullableListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableList\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableListArg: [Any?]? = nilOrValue(args[0])
        do {
          let result = try api.echoNullable(aNullableListArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableListChannel.setMessageHandler(nil)
    }
    /// Returns the passed map, to test serialization and deserialization.
    let echoNullableMapChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableMap\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableMapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableMapArg: [String?: Any?]? = nilOrValue(args[0])
        do {
          let result = try api.echoNullable(aNullableMapArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableMapChannel.setMessageHandler(nil)
    }
    let echoNullableEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNullableEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNullableEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anEnumArg: AnEnum? = nilOrValue(args[0])
        do {
          let result = try api.echoNullable(anEnumArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNullableEnumChannel.setMessageHandler(nil)
    }
    let echoAnotherNullableEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAnotherNullableEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAnotherNullableEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anotherEnumArg: AnotherEnum? = nilOrValue(args[0])
        do {
          let result = try api.echoNullable(anotherEnumArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoAnotherNullableEnumChannel.setMessageHandler(nil)
    }
    /// Returns passed in int.
    let echoOptionalNullableIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoOptionalNullableInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoOptionalNullableIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableIntArg: Int64? =
          isNullish(args[0])
          ? nil : (args[0] is Int64? ? args[0] as! Int64? : Int64(args[0] as! Int32))
        do {
          let result = try api.echoOptional(aNullableIntArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoOptionalNullableIntChannel.setMessageHandler(nil)
    }
    /// Returns the passed in string.
    let echoNamedNullableStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoNamedNullableString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoNamedNullableStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableStringArg: String? = nilOrValue(args[0])
        do {
          let result = try api.echoNamed(aNullableStringArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoNamedNullableStringChannel.setMessageHandler(nil)
    }
    /// A no-op function taking no arguments and returning no value, to sanity
    /// test basic asynchronous calling.
    let noopAsyncChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.noopAsync\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      noopAsyncChannel.setMessageHandler { _, reply in
        api.noopAsync { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      noopAsyncChannel.setMessageHandler(nil)
    }
    /// Returns passed in int asynchronously.
    let echoAsyncIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anIntArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.echoAsync(anIntArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncIntChannel.setMessageHandler(nil)
    }
    /// Returns passed in double asynchronously.
    let echoAsyncDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aDoubleArg = args[0] as! Double
        api.echoAsync(aDoubleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncDoubleChannel.setMessageHandler(nil)
    }
    /// Returns the passed in boolean asynchronously.
    let echoAsyncBoolChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncBool\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aBoolArg = args[0] as! Bool
        api.echoAsync(aBoolArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncBoolChannel.setMessageHandler(nil)
    }
    /// Returns the passed string asynchronously.
    let echoAsyncStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg = args[0] as! String
        api.echoAsync(aStringArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncStringChannel.setMessageHandler(nil)
    }
    /// Returns the passed in Uint8List asynchronously.
    let echoAsyncUint8ListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncUint8List\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncUint8ListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aUint8ListArg = args[0] as! FlutterStandardTypedData
        api.echoAsync(aUint8ListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncUint8ListChannel.setMessageHandler(nil)
    }
    /// Returns the passed in generic Object asynchronously.
    let echoAsyncObjectChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncObject\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncObjectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anObjectArg = args[0]!
        api.echoAsync(anObjectArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncObjectChannel.setMessageHandler(nil)
    }
    /// Returns the passed list, to test asynchronous serialization and deserialization.
    let echoAsyncListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncList\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg = args[0] as! [Any?]
        api.echoAsync(listArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncListChannel.setMessageHandler(nil)
    }
    /// Returns the passed map, to test asynchronous serialization and deserialization.
    let echoAsyncMapChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncMap\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncMapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aMapArg = args[0] as! [String?: Any?]
        api.echoAsync(aMapArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncMapChannel.setMessageHandler(nil)
    }
    /// Returns the passed enum, to test asynchronous serialization and deserialization.
    let echoAsyncEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anEnumArg = args[0] as! AnEnum
        api.echoAsync(anEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncEnumChannel.setMessageHandler(nil)
    }
    /// Returns the passed enum, to test asynchronous serialization and deserialization.
    let echoAnotherAsyncEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAnotherAsyncEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAnotherAsyncEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anotherEnumArg = args[0] as! AnotherEnum
        api.echoAsync(anotherEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAnotherAsyncEnumChannel.setMessageHandler(nil)
    }
    /// Responds with an error from an async function returning a value.
    let throwAsyncErrorChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwAsyncError\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      throwAsyncErrorChannel.setMessageHandler { _, reply in
        api.throwAsyncError { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      throwAsyncErrorChannel.setMessageHandler(nil)
    }
    /// Responds with an error from an async void function.
    let throwAsyncErrorFromVoidChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwAsyncErrorFromVoid\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      throwAsyncErrorFromVoidChannel.setMessageHandler { _, reply in
        api.throwAsyncErrorFromVoid { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      throwAsyncErrorFromVoidChannel.setMessageHandler(nil)
    }
    /// Responds with a Flutter error from an async function returning a value.
    let throwAsyncFlutterErrorChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.throwAsyncFlutterError\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      throwAsyncFlutterErrorChannel.setMessageHandler { _, reply in
        api.throwAsyncFlutterError { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      throwAsyncFlutterErrorChannel.setMessageHandler(nil)
    }
    /// Returns the passed object, to test async serialization and deserialization.
    let echoAsyncAllTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncAllTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncAllTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg = args[0] as! AllTypes
        api.echoAsync(everythingArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncAllTypesChannel.setMessageHandler(nil)
    }
    /// Returns the passed object, to test serialization and deserialization.
    let echoAsyncNullableAllNullableTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableAllNullableTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg: AllNullableTypes? = nilOrValue(args[0])
        api.echoAsync(everythingArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableAllNullableTypesChannel.setMessageHandler(nil)
    }
    /// Returns the passed object, to test serialization and deserialization.
    let echoAsyncNullableAllNullableTypesWithoutRecursionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableAllNullableTypesWithoutRecursion\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableAllNullableTypesWithoutRecursionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg: AllNullableTypesWithoutRecursion? = nilOrValue(args[0])
        api.echoAsync(everythingArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableAllNullableTypesWithoutRecursionChannel.setMessageHandler(nil)
    }
    /// Returns passed in int asynchronously.
    let echoAsyncNullableIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anIntArg: Int64? =
          isNullish(args[0])
          ? nil : (args[0] is Int64? ? args[0] as! Int64? : Int64(args[0] as! Int32))
        api.echoAsyncNullable(anIntArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableIntChannel.setMessageHandler(nil)
    }
    /// Returns passed in double asynchronously.
    let echoAsyncNullableDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aDoubleArg: Double? = nilOrValue(args[0])
        api.echoAsyncNullable(aDoubleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableDoubleChannel.setMessageHandler(nil)
    }
    /// Returns the passed in boolean asynchronously.
    let echoAsyncNullableBoolChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableBool\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aBoolArg: Bool? = nilOrValue(args[0])
        api.echoAsyncNullable(aBoolArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableBoolChannel.setMessageHandler(nil)
    }
    /// Returns the passed string asynchronously.
    let echoAsyncNullableStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg: String? = nilOrValue(args[0])
        api.echoAsyncNullable(aStringArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableStringChannel.setMessageHandler(nil)
    }
    /// Returns the passed in Uint8List asynchronously.
    let echoAsyncNullableUint8ListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableUint8List\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableUint8ListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aUint8ListArg: FlutterStandardTypedData? = nilOrValue(args[0])
        api.echoAsyncNullable(aUint8ListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableUint8ListChannel.setMessageHandler(nil)
    }
    /// Returns the passed in generic Object asynchronously.
    let echoAsyncNullableObjectChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableObject\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableObjectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anObjectArg: Any? = args[0]
        api.echoAsyncNullable(anObjectArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableObjectChannel.setMessageHandler(nil)
    }
    /// Returns the passed list, to test asynchronous serialization and deserialization.
    let echoAsyncNullableListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableList\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg: [Any?]? = nilOrValue(args[0])
        api.echoAsyncNullable(listArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableListChannel.setMessageHandler(nil)
    }
    /// Returns the passed map, to test asynchronous serialization and deserialization.
    let echoAsyncNullableMapChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableMap\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableMapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aMapArg: [String?: Any?]? = nilOrValue(args[0])
        api.echoAsyncNullable(aMapArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableMapChannel.setMessageHandler(nil)
    }
    /// Returns the passed enum, to test asynchronous serialization and deserialization.
    let echoAsyncNullableEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAsyncNullableEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAsyncNullableEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anEnumArg: AnEnum? = nilOrValue(args[0])
        api.echoAsyncNullable(anEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAsyncNullableEnumChannel.setMessageHandler(nil)
    }
    /// Returns the passed enum, to test asynchronous serialization and deserialization.
    let echoAnotherAsyncNullableEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.echoAnotherAsyncNullableEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoAnotherAsyncNullableEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anotherEnumArg: AnotherEnum? = nilOrValue(args[0])
        api.echoAsyncNullable(anotherEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoAnotherAsyncNullableEnumChannel.setMessageHandler(nil)
    }
    let callFlutterNoopChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterNoop\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterNoopChannel.setMessageHandler { _, reply in
        api.callFlutterNoop { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterNoopChannel.setMessageHandler(nil)
    }
    let callFlutterThrowErrorChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterThrowError\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterThrowErrorChannel.setMessageHandler { _, reply in
        api.callFlutterThrowError { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterThrowErrorChannel.setMessageHandler(nil)
    }
    let callFlutterThrowErrorFromVoidChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterThrowErrorFromVoid\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterThrowErrorFromVoidChannel.setMessageHandler { _, reply in
        api.callFlutterThrowErrorFromVoid { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterThrowErrorFromVoidChannel.setMessageHandler(nil)
    }
    let callFlutterEchoAllTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAllTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoAllTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg = args[0] as! AllTypes
        api.callFlutterEcho(everythingArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoAllTypesChannel.setMessageHandler(nil)
    }
    let callFlutterEchoAllNullableTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAllNullableTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoAllNullableTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg: AllNullableTypes? = nilOrValue(args[0])
        api.callFlutterEcho(everythingArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoAllNullableTypesChannel.setMessageHandler(nil)
    }
    let callFlutterSendMultipleNullableTypesChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterSendMultipleNullableTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aNullableBoolArg: Bool? = nilOrValue(args[0])
        let aNullableIntArg: Int64? =
          isNullish(args[1])
          ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        let aNullableStringArg: String? = nilOrValue(args[2])
        api.callFlutterSendMultipleNullableTypes(
          aBool: aNullableBoolArg, anInt: aNullableIntArg, aString: aNullableStringArg
        ) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterSendMultipleNullableTypesChannel.setMessageHandler(nil)
    }
    let callFlutterEchoAllNullableTypesWithoutRecursionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAllNullableTypesWithoutRecursion\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoAllNullableTypesWithoutRecursionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let everythingArg: AllNullableTypesWithoutRecursion? = nilOrValue(args[0])
        api.callFlutterEcho(everythingArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoAllNullableTypesWithoutRecursionChannel.setMessageHandler(nil)
    }
    let callFlutterSendMultipleNullableTypesWithoutRecursionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterSendMultipleNullableTypesWithoutRecursion\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterSendMultipleNullableTypesWithoutRecursionChannel.setMessageHandler {
        message, reply in
        let args = message as! [Any?]
        let aNullableBoolArg: Bool? = nilOrValue(args[0])
        let aNullableIntArg: Int64? =
          isNullish(args[1])
          ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        let aNullableStringArg: String? = nilOrValue(args[2])
        api.callFlutterSendMultipleNullableTypesWithoutRecursion(
          aBool: aNullableBoolArg, anInt: aNullableIntArg, aString: aNullableStringArg
        ) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterSendMultipleNullableTypesWithoutRecursionChannel.setMessageHandler(nil)
    }
    let callFlutterEchoBoolChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoBool\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aBoolArg = args[0] as! Bool
        api.callFlutterEcho(aBoolArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoBoolChannel.setMessageHandler(nil)
    }
    let callFlutterEchoIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anIntArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.callFlutterEcho(anIntArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoIntChannel.setMessageHandler(nil)
    }
    let callFlutterEchoDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aDoubleArg = args[0] as! Double
        api.callFlutterEcho(aDoubleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoDoubleChannel.setMessageHandler(nil)
    }
    let callFlutterEchoStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg = args[0] as! String
        api.callFlutterEcho(aStringArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoStringChannel.setMessageHandler(nil)
    }
    let callFlutterEchoUint8ListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoUint8List\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoUint8ListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg = args[0] as! FlutterStandardTypedData
        api.callFlutterEcho(listArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoUint8ListChannel.setMessageHandler(nil)
    }
    let callFlutterEchoListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoList\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg = args[0] as! [Any?]
        api.callFlutterEcho(listArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoListChannel.setMessageHandler(nil)
    }
    let callFlutterEchoMapChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoMap\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoMapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aMapArg = args[0] as! [String?: Any?]
        api.callFlutterEcho(aMapArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoMapChannel.setMessageHandler(nil)
    }
    let callFlutterEchoEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anEnumArg = args[0] as! AnEnum
        api.callFlutterEcho(anEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoEnumChannel.setMessageHandler(nil)
    }
    let callFlutterEchoAnotherEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAnotherEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoAnotherEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anotherEnumArg = args[0] as! AnotherEnum
        api.callFlutterEcho(anotherEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoAnotherEnumChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableBoolChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableBool\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aBoolArg: Bool? = nilOrValue(args[0])
        api.callFlutterEchoNullable(aBoolArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableBoolChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableIntChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableInt\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anIntArg: Int64? =
          isNullish(args[0])
          ? nil : (args[0] is Int64? ? args[0] as! Int64? : Int64(args[0] as! Int32))
        api.callFlutterEchoNullable(anIntArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableIntChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableDoubleChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableDouble\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aDoubleArg: Double? = nilOrValue(args[0])
        api.callFlutterEchoNullable(aDoubleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableDoubleChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg: String? = nilOrValue(args[0])
        api.callFlutterEchoNullable(aStringArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableStringChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableUint8ListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableUint8List\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableUint8ListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg: FlutterStandardTypedData? = nilOrValue(args[0])
        api.callFlutterEchoNullable(listArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableUint8ListChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableListChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableList\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let listArg: [Any?]? = nilOrValue(args[0])
        api.callFlutterEchoNullable(listArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableListChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableMapChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableMap\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableMapChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aMapArg: [String?: Any?]? = nilOrValue(args[0])
        api.callFlutterEchoNullable(aMapArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableMapChannel.setMessageHandler(nil)
    }
    let callFlutterEchoNullableEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoNullableEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoNullableEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anEnumArg: AnEnum? = nilOrValue(args[0])
        api.callFlutterEchoNullable(anEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoNullableEnumChannel.setMessageHandler(nil)
    }
    let callFlutterEchoAnotherNullableEnumChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterEchoAnotherNullableEnum\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterEchoAnotherNullableEnumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anotherEnumArg: AnotherEnum? = nilOrValue(args[0])
        api.callFlutterEchoNullable(anotherEnumArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterEchoAnotherNullableEnumChannel.setMessageHandler(nil)
    }
    let callFlutterSmallApiEchoStringChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.callFlutterSmallApiEchoString\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      callFlutterSmallApiEchoStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg = args[0] as! String
        api.callFlutterSmallApiEcho(aStringArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callFlutterSmallApiEchoStringChannel.setMessageHandler(nil)
    }
  }
}
/// The core interface that the Dart platform_test code implements for host
/// integration tests to call into.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterIntegrationCoreApiProtocol {
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  func noop(completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Responds with an error from an async function returning a value.
  func throwError(completion: @escaping (Result<Any?, PigeonError>) -> Void)
  /// Responds with an error from an async void function.
  func throwErrorFromVoid(completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Returns the passed object, to test serialization and deserialization.
  func echo(
    _ everythingArg: AllTypes, completion: @escaping (Result<AllTypes, PigeonError>) -> Void)
  /// Returns the passed object, to test serialization and deserialization.
  func echoNullable(
    _ everythingArg: AllNullableTypes?,
    completion: @escaping (Result<AllNullableTypes?, PigeonError>) -> Void)
  /// Returns passed in arguments of multiple types.
  ///
  /// Tests multiple-arity FlutterApi handling.
  func sendMultipleNullableTypes(
    aBool aNullableBoolArg: Bool?, anInt aNullableIntArg: Int64?,
    aString aNullableStringArg: String?,
    completion: @escaping (Result<AllNullableTypes, PigeonError>) -> Void)
  /// Returns the passed object, to test serialization and deserialization.
  func echoNullable(
    _ everythingArg: AllNullableTypesWithoutRecursion?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion?, PigeonError>) -> Void)
  /// Returns passed in arguments of multiple types.
  ///
  /// Tests multiple-arity FlutterApi handling.
  func sendMultipleNullableTypesWithoutRecursion(
    aBool aNullableBoolArg: Bool?, anInt aNullableIntArg: Int64?,
    aString aNullableStringArg: String?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion, PigeonError>) -> Void)
  /// Returns the passed boolean, to test serialization and deserialization.
  func echo(_ aBoolArg: Bool, completion: @escaping (Result<Bool, PigeonError>) -> Void)
  /// Returns the passed int, to test serialization and deserialization.
  func echo(_ anIntArg: Int64, completion: @escaping (Result<Int64, PigeonError>) -> Void)
  /// Returns the passed double, to test serialization and deserialization.
  func echo(_ aDoubleArg: Double, completion: @escaping (Result<Double, PigeonError>) -> Void)
  /// Returns the passed string, to test serialization and deserialization.
  func echo(_ aStringArg: String, completion: @escaping (Result<String, PigeonError>) -> Void)
  /// Returns the passed byte list, to test serialization and deserialization.
  func echo(
    _ listArg: FlutterStandardTypedData,
    completion: @escaping (Result<FlutterStandardTypedData, PigeonError>) -> Void)
  /// Returns the passed list, to test serialization and deserialization.
  func echo(_ listArg: [Any?], completion: @escaping (Result<[Any?], PigeonError>) -> Void)
  /// Returns the passed map, to test serialization and deserialization.
  func echo(
    _ aMapArg: [String?: Any?], completion: @escaping (Result<[String?: Any?], PigeonError>) -> Void
  )
  /// Returns the passed enum to test serialization and deserialization.
  func echo(_ anEnumArg: AnEnum, completion: @escaping (Result<AnEnum, PigeonError>) -> Void)
  /// Returns the passed enum to test serialization and deserialization.
  func echo(
    _ anotherEnumArg: AnotherEnum, completion: @escaping (Result<AnotherEnum, PigeonError>) -> Void)
  /// Returns the passed boolean, to test serialization and deserialization.
  func echoNullable(_ aBoolArg: Bool?, completion: @escaping (Result<Bool?, PigeonError>) -> Void)
  /// Returns the passed int, to test serialization and deserialization.
  func echoNullable(_ anIntArg: Int64?, completion: @escaping (Result<Int64?, PigeonError>) -> Void)
  /// Returns the passed double, to test serialization and deserialization.
  func echoNullable(
    _ aDoubleArg: Double?, completion: @escaping (Result<Double?, PigeonError>) -> Void)
  /// Returns the passed string, to test serialization and deserialization.
  func echoNullable(
    _ aStringArg: String?, completion: @escaping (Result<String?, PigeonError>) -> Void)
  /// Returns the passed byte list, to test serialization and deserialization.
  func echoNullable(
    _ listArg: FlutterStandardTypedData?,
    completion: @escaping (Result<FlutterStandardTypedData?, PigeonError>) -> Void)
  /// Returns the passed list, to test serialization and deserialization.
  func echoNullable(
    _ listArg: [Any?]?, completion: @escaping (Result<[Any?]?, PigeonError>) -> Void)
  /// Returns the passed map, to test serialization and deserialization.
  func echoNullable(
    _ aMapArg: [String?: Any?]?,
    completion: @escaping (Result<[String?: Any?]?, PigeonError>) -> Void)
  /// Returns the passed enum to test serialization and deserialization.
  func echoNullable(
    _ anEnumArg: AnEnum?, completion: @escaping (Result<AnEnum?, PigeonError>) -> Void)
  /// Returns the passed enum to test serialization and deserialization.
  func echoNullable(
    _ anotherEnumArg: AnotherEnum?,
    completion: @escaping (Result<AnotherEnum?, PigeonError>) -> Void)
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  func noopAsync(completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Returns the passed in generic Object asynchronously.
  func echoAsync(_ aStringArg: String, completion: @escaping (Result<String, PigeonError>) -> Void)
}
class FlutterIntegrationCoreApi: FlutterIntegrationCoreApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: CoreTestsPigeonCodec {
    return CoreTestsPigeonCodec.shared
  }
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  func noop(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.noop\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Responds with an error from an async function returning a value.
  func throwError(completion: @escaping (Result<Any?, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.throwError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: Any? = listResponse[0]
        completion(.success(result))
      }
    }
  }
  /// Responds with an error from an async void function.
  func throwErrorFromVoid(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.throwErrorFromVoid\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  func echo(
    _ everythingArg: AllTypes, completion: @escaping (Result<AllTypes, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllTypes\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([everythingArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! AllTypes
        completion(.success(result))
      }
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  func echoNullable(
    _ everythingArg: AllNullableTypes?,
    completion: @escaping (Result<AllNullableTypes?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllNullableTypes\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([everythingArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: AllNullableTypes? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns passed in arguments of multiple types.
  ///
  /// Tests multiple-arity FlutterApi handling.
  func sendMultipleNullableTypes(
    aBool aNullableBoolArg: Bool?, anInt aNullableIntArg: Int64?,
    aString aNullableStringArg: String?,
    completion: @escaping (Result<AllNullableTypes, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.sendMultipleNullableTypes\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aNullableBoolArg, aNullableIntArg, aNullableStringArg] as [Any?]) {
      response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! AllNullableTypes
        completion(.success(result))
      }
    }
  }
  /// Returns the passed object, to test serialization and deserialization.
  func echoNullable(
    _ everythingArg: AllNullableTypesWithoutRecursion?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAllNullableTypesWithoutRecursion\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([everythingArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: AllNullableTypesWithoutRecursion? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns passed in arguments of multiple types.
  ///
  /// Tests multiple-arity FlutterApi handling.
  func sendMultipleNullableTypesWithoutRecursion(
    aBool aNullableBoolArg: Bool?, anInt aNullableIntArg: Int64?,
    aString aNullableStringArg: String?,
    completion: @escaping (Result<AllNullableTypesWithoutRecursion, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aNullableBoolArg, aNullableIntArg, aNullableStringArg] as [Any?]) {
      response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! AllNullableTypesWithoutRecursion
        completion(.success(result))
      }
    }
  }
  /// Returns the passed boolean, to test serialization and deserialization.
  func echo(_ aBoolArg: Bool, completion: @escaping (Result<Bool, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoBool\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aBoolArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
  /// Returns the passed int, to test serialization and deserialization.
  func echo(_ anIntArg: Int64, completion: @escaping (Result<Int64, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoInt\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([anIntArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result =
          listResponse[0] is Int64 ? listResponse[0] as! Int64 : Int64(listResponse[0] as! Int32)
        completion(.success(result))
      }
    }
  }
  /// Returns the passed double, to test serialization and deserialization.
  func echo(_ aDoubleArg: Double, completion: @escaping (Result<Double, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoDouble\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aDoubleArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Double
        completion(.success(result))
      }
    }
  }
  /// Returns the passed string, to test serialization and deserialization.
  func echo(_ aStringArg: String, completion: @escaping (Result<String, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoString\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aStringArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! String
        completion(.success(result))
      }
    }
  }
  /// Returns the passed byte list, to test serialization and deserialization.
  func echo(
    _ listArg: FlutterStandardTypedData,
    completion: @escaping (Result<FlutterStandardTypedData, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoUint8List\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([listArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! FlutterStandardTypedData
        completion(.success(result))
      }
    }
  }
  /// Returns the passed list, to test serialization and deserialization.
  func echo(_ listArg: [Any?], completion: @escaping (Result<[Any?], PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoList\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([listArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! [Any?]
        completion(.success(result))
      }
    }
  }
  /// Returns the passed map, to test serialization and deserialization.
  func echo(
    _ aMapArg: [String?: Any?], completion: @escaping (Result<[String?: Any?], PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoMap\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aMapArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! [String?: Any?]
        completion(.success(result))
      }
    }
  }
  /// Returns the passed enum to test serialization and deserialization.
  func echo(_ anEnumArg: AnEnum, completion: @escaping (Result<AnEnum, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoEnum\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([anEnumArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! AnEnum
        completion(.success(result))
      }
    }
  }
  /// Returns the passed enum to test serialization and deserialization.
  func echo(
    _ anotherEnumArg: AnotherEnum, completion: @escaping (Result<AnotherEnum, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAnotherEnum\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([anotherEnumArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! AnotherEnum
        completion(.success(result))
      }
    }
  }
  /// Returns the passed boolean, to test serialization and deserialization.
  func echoNullable(_ aBoolArg: Bool?, completion: @escaping (Result<Bool?, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableBool\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aBoolArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: Bool? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed int, to test serialization and deserialization.
  func echoNullable(_ anIntArg: Int64?, completion: @escaping (Result<Int64?, PigeonError>) -> Void)
  {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableInt\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([anIntArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: Int64? =
          isNullish(listResponse[0])
          ? nil
          : (listResponse[0] is Int64?
            ? listResponse[0] as! Int64? : Int64(listResponse[0] as! Int32))
        completion(.success(result))
      }
    }
  }
  /// Returns the passed double, to test serialization and deserialization.
  func echoNullable(
    _ aDoubleArg: Double?, completion: @escaping (Result<Double?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableDouble\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aDoubleArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: Double? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed string, to test serialization and deserialization.
  func echoNullable(
    _ aStringArg: String?, completion: @escaping (Result<String?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableString\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aStringArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: String? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed byte list, to test serialization and deserialization.
  func echoNullable(
    _ listArg: FlutterStandardTypedData?,
    completion: @escaping (Result<FlutterStandardTypedData?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableUint8List\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([listArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: FlutterStandardTypedData? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed list, to test serialization and deserialization.
  func echoNullable(
    _ listArg: [Any?]?, completion: @escaping (Result<[Any?]?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableList\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([listArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: [Any?]? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed map, to test serialization and deserialization.
  func echoNullable(
    _ aMapArg: [String?: Any?]?,
    completion: @escaping (Result<[String?: Any?]?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableMap\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aMapArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: [String?: Any?]? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed enum to test serialization and deserialization.
  func echoNullable(
    _ anEnumArg: AnEnum?, completion: @escaping (Result<AnEnum?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoNullableEnum\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([anEnumArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: AnEnum? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// Returns the passed enum to test serialization and deserialization.
  func echoNullable(
    _ anotherEnumArg: AnotherEnum?,
    completion: @escaping (Result<AnotherEnum?, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAnotherNullableEnum\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([anotherEnumArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: AnotherEnum? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic asynchronous calling.
  func noopAsync(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.noopAsync\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Returns the passed in generic Object asynchronously.
  func echoAsync(_ aStringArg: String, completion: @escaping (Result<String, PigeonError>) -> Void)
  {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterIntegrationCoreApi.echoAsyncString\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aStringArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! String
        completion(.success(result))
      }
    }
  }
}
/// An API that can be implemented for minimal, compile-only tests.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostTrivialApi {
  func noop() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostTrivialApiSetup {
  static var codec: FlutterStandardMessageCodec { CoreTestsPigeonCodec.shared }
  /// Sets up an instance of `HostTrivialApi` to handle messages through the `binaryMessenger`.
  static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: HostTrivialApi?, messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let noopChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.pigeon_integration_tests.HostTrivialApi.noop\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      noopChannel.setMessageHandler { _, reply in
        do {
          try api.noop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      noopChannel.setMessageHandler(nil)
    }
  }
}
/// A simple API implemented in some unit tests.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostSmallApi {
  func echo(aString: String, completion: @escaping (Result<String, Error>) -> Void)
  func voidVoid(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostSmallApiSetup {
  static var codec: FlutterStandardMessageCodec { CoreTestsPigeonCodec.shared }
  /// Sets up an instance of `HostSmallApi` to handle messages through the `binaryMessenger`.
  static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: HostSmallApi?, messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let echoChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.echo\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aStringArg = args[0] as! String
        api.echo(aString: aStringArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      echoChannel.setMessageHandler(nil)
    }
    let voidVoidChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.voidVoid\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      voidVoidChannel.setMessageHandler { _, reply in
        api.voidVoid { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      voidVoidChannel.setMessageHandler(nil)
    }
  }
}
/// A simple API called in some unit tests.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterSmallApiProtocol {
  func echo(_ msgArg: TestMessage, completion: @escaping (Result<TestMessage, PigeonError>) -> Void)
  func echo(string aStringArg: String, completion: @escaping (Result<String, PigeonError>) -> Void)
}
class FlutterSmallApi: FlutterSmallApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: CoreTestsPigeonCodec {
    return CoreTestsPigeonCodec.shared
  }
  func echo(_ msgArg: TestMessage, completion: @escaping (Result<TestMessage, PigeonError>) -> Void)
  {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoWrappedList\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([msgArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! TestMessage
        completion(.success(result))
      }
    }
  }
  func echo(string aStringArg: String, completion: @escaping (Result<String, PigeonError>) -> Void)
  {
    let channelName: String =
      "dev.flutter.pigeon.pigeon_integration_tests.FlutterSmallApi.echoString\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([aStringArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! String
        completion(.success(result))
      }
    }
  }
}
