// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Possible outcomes of launching a URL.
enum LaunchResult: Int {
  /// The URL was successfully launched.
  case success = 0
  /// The URL could not be launched
  case failure = 1
  /// The URL was not launched because it is not invalid URL
  case invalidUrl = 2
  /// The URL did not load successfully in the SFSafariViewController.
  case failedToLoad = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct LaunchResultDetails {
  /// The result of the launch attempt.
  var result: LaunchResult
  /// A system-provided error message, if any.
  var errorMessage: String? = nil
  /// A system-provided error details, if any.
  var errorDetails: String? = nil

  static func fromList(_ list: [Any?]) -> LaunchResultDetails? {
    let result = LaunchResult(rawValue: list[0] as! Int)!
    let errorMessage: String? = nilOrValue(list[1])
    let errorDetails: String? = nilOrValue(list[2])

    return LaunchResultDetails(
      result: result,
      errorMessage: errorMessage,
      errorDetails: errorDetails
    )
  }
  func toList() -> [Any?] {
    return [
      result.rawValue,
      errorMessage,
      errorDetails,
    ]
  }
}

private class UrlLauncherApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return LaunchResultDetails.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class UrlLauncherApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LaunchResultDetails {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UrlLauncherApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UrlLauncherApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UrlLauncherApiCodecWriter(data: data)
  }
}

class UrlLauncherApiCodec: FlutterStandardMessageCodec {
  static let shared = UrlLauncherApiCodec(readerWriter: UrlLauncherApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UrlLauncherApi {
  /// Returns true if the URL can definitely be launched.
  func canLaunchUrl(url: String) throws -> LaunchResultDetails
  /// Opens the URL externally, returning true if successful.
  func launchUrl(
    url: String, universalLinksOnly: Bool,
    completion: @escaping (Result<LaunchResultDetails, Error>) -> Void)
  /// Opens the URL in an in-app SFSafariViewController, returning true
  /// when it has loaded successfully.
  func openUrlInSafariViewController(
    url: String, completion: @escaping (Result<LaunchResultDetails, Error>) -> Void)
  /// Closes the view controller opened by [openUrlInSafariViewController].
  func closeSafariViewController() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UrlLauncherApiSetup {
  /// The codec used by UrlLauncherApi.
  static var codec: FlutterStandardMessageCodec { UrlLauncherApiCodec.shared }
  /// Sets up an instance of `UrlLauncherApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UrlLauncherApi?) {
    /// Returns true if the URL can definitely be launched.
    let canLaunchUrlChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.url_launcher_ios.UrlLauncherApi.canLaunchUrl",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canLaunchUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        do {
          let result = try api.canLaunchUrl(url: urlArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      canLaunchUrlChannel.setMessageHandler(nil)
    }
    /// Opens the URL externally, returning true if successful.
    let launchUrlChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.url_launcher_ios.UrlLauncherApi.launchUrl",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      launchUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        let universalLinksOnlyArg = args[1] as! Bool
        api.launchUrl(url: urlArg, universalLinksOnly: universalLinksOnlyArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      launchUrlChannel.setMessageHandler(nil)
    }
    /// Opens the URL in an in-app SFSafariViewController, returning true
    /// when it has loaded successfully.
    let openUrlInSafariViewControllerChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.url_launcher_ios.UrlLauncherApi.openUrlInSafariViewController",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openUrlInSafariViewControllerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        api.openUrlInSafariViewController(url: urlArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      openUrlInSafariViewControllerChannel.setMessageHandler(nil)
    }
    /// Closes the view controller opened by [openUrlInSafariViewController].
    let closeSafariViewControllerChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.url_launcher_ios.UrlLauncherApi.closeSafariViewController",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeSafariViewControllerChannel.setMessageHandler { _, reply in
        do {
          try api.closeSafariViewController()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      closeSafariViewControllerChannel.setMessageHandler(nil)
    }
  }
}
