// // Copyright 2013 The Flutter Authors. All rights reserved.
// // Use of this source code is governed by a BSD-style license that can be
// // found in the LICENSE file.
// // Autogenerated from Pigeon (v22.2.0), do not edit directly.
// // See also: https://pub.dev/packages/pigeon
// // ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers
//
// import 'dart:async';
// import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
//
// import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
// import 'package:flutter/services.dart';
//
// PlatformException _createConnectionError(String channelName) {
//   return PlatformException(
//     code: 'channel-error',
//     message: 'Unable to establish connection on channel: "$channelName".',
//   );
// }
//
// List<Object?> wrapResponse(
//     {Object? result, PlatformException? error, bool empty = false}) {
//   if (empty) {
//     return <Object?>[];
//   }
//   if (error == null) {
//     return <Object?>[result];
//   }
//   return <Object?>[error.code, error.message, error.details];
// }
//
// /// Mode of how to select files for a file chooser.
// ///
// /// See https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams.
// enum FileChooserMode {
//   /// Open single file and requires that the file exists before allowing the
//   /// user to pick it.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams#MODE_OPEN.
//   open,
//
//   /// Similar to [open] but allows multiple files to be selected.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams#MODE_OPEN_MULTIPLE.
//   openMultiple,
//
//   /// Allows picking a nonexistent file and saving it.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams#MODE_SAVE.
//   save,
// }
//
// /// Indicates the type of message logged to the console.
// ///
// /// See https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel.
// enum ConsoleMessageLevel {
//   /// Indicates a message is logged for debugging.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel#DEBUG.
//   debug,
//
//   /// Indicates a message is provided as an error.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel#ERROR.
//   error,
//
//   /// Indicates a message is provided as a basic log message.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel#LOG.
//   log,
//
//   /// Indicates a message is provided as a tip.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel#TIP.
//   tip,
//
//   /// Indicates a message is provided as a warning.
//   ///
//   /// See https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel#WARNING.
//   warning,
//
//   /// Indicates a message with an unknown level.
//   ///
//   /// This does not represent an actual value provided by the platform and only
//   /// indicates a value was provided that isn't currently supported.
//   unknown,
// }
//
// class WebResourceRequestData {
//   WebResourceRequestData({
//     required this.url,
//     required this.isForMainFrame,
//     this.isRedirect,
//     required this.hasGesture,
//     required this.method,
//     required this.requestHeaders,
//   });
//
//   String url;
//
//   bool isForMainFrame;
//
//   bool? isRedirect;
//
//   bool hasGesture;
//
//   String method;
//
//   Map<String?, String?> requestHeaders;
//
//   Object encode() {
//     return <Object?>[
//       url,
//       isForMainFrame,
//       isRedirect,
//       hasGesture,
//       method,
//       requestHeaders,
//     ];
//   }
//
//   static WebResourceRequestData decode(Object result) {
//     result as List<Object?>;
//     return WebResourceRequestData(
//       url: result[0]! as String,
//       isForMainFrame: result[1]! as bool,
//       isRedirect: result[2] as bool?,
//       hasGesture: result[3]! as bool,
//       method: result[4]! as String,
//       requestHeaders:
//           (result[5] as Map<Object?, Object?>?)!.cast<String?, String?>(),
//     );
//   }
// }
//
// class WebResourceResponseData {
//   WebResourceResponseData({
//     required this.statusCode,
//   });
//
//   int statusCode;
//
//   Object encode() {
//     return <Object?>[
//       statusCode,
//     ];
//   }
//
//   static WebResourceResponseData decode(Object result) {
//     result as List<Object?>;
//     return WebResourceResponseData(
//       statusCode: result[0]! as int,
//     );
//   }
// }
//
// class WebResourceErrorData {
//   WebResourceErrorData({
//     required this.errorCode,
//     required this.description,
//   });
//
//   int errorCode;
//
//   String description;
//
//   Object encode() {
//     return <Object?>[
//       errorCode,
//       description,
//     ];
//   }
//
//   static WebResourceErrorData decode(Object result) {
//     result as List<Object?>;
//     return WebResourceErrorData(
//       errorCode: result[0]! as int,
//       description: result[1]! as String,
//     );
//   }
// }
//
// class WebViewPoint {
//   WebViewPoint({
//     required this.x,
//     required this.y,
//   });
//
//   int x;
//
//   int y;
//
//   Object encode() {
//     return <Object?>[
//       x,
//       y,
//     ];
//   }
//
//   static WebViewPoint decode(Object result) {
//     result as List<Object?>;
//     return WebViewPoint(
//       x: result[0]! as int,
//       y: result[1]! as int,
//     );
//   }
// }
//
// /// Represents a JavaScript console message from WebCore.
// ///
// /// See https://developer.android.com/reference/android/webkit/ConsoleMessage
// class ConsoleMessage {
//   ConsoleMessage({
//     required this.lineNumber,
//     required this.message,
//     required this.level,
//     required this.sourceId,
//   });
//
//   int lineNumber;
//
//   String message;
//
//   ConsoleMessageLevel level;
//
//   String sourceId;
//
//   Object encode() {
//     return <Object?>[
//       lineNumber,
//       message,
//       level,
//       sourceId,
//     ];
//   }
//
//   static ConsoleMessage decode(Object result) {
//     result as List<Object?>;
//     return ConsoleMessage(
//       lineNumber: result[0]! as int,
//       message: result[1]! as String,
//       level: result[2]! as ConsoleMessageLevel,
//       sourceId: result[3]! as String,
//     );
//   }
// }
//
// class _PigeonCodec extends StandardMessageCodec {
//   const _PigeonCodec();
//   @override
//   void writeValue(WriteBuffer buffer, Object? value) {
//     if (value is int) {
//       buffer.putUint8(4);
//       buffer.putInt64(value);
//     } else if (value is FileChooserMode) {
//       buffer.putUint8(129);
//       writeValue(buffer, value.index);
//     } else if (value is ConsoleMessageLevel) {
//       buffer.putUint8(130);
//       writeValue(buffer, value.index);
//     } else if (value is WebResourceRequestData) {
//       buffer.putUint8(131);
//       writeValue(buffer, value.encode());
//     } else if (value is WebResourceResponseData) {
//       buffer.putUint8(132);
//       writeValue(buffer, value.encode());
//     } else if (value is WebResourceErrorData) {
//       buffer.putUint8(133);
//       writeValue(buffer, value.encode());
//     } else if (value is WebViewPoint) {
//       buffer.putUint8(134);
//       writeValue(buffer, value.encode());
//     } else if (value is ConsoleMessage) {
//       buffer.putUint8(135);
//       writeValue(buffer, value.encode());
//     } else {
//       super.writeValue(buffer, value);
//     }
//   }
//
//   @override
//   Object? readValueOfType(int type, ReadBuffer buffer) {
//     switch (type) {
//       case 129:
//         final int? value = readValue(buffer) as int?;
//         return value == null ? null : FileChooserMode.values[value];
//       case 130:
//         final int? value = readValue(buffer) as int?;
//         return value == null ? null : ConsoleMessageLevel.values[value];
//       case 131:
//         return WebResourceRequestData.decode(readValue(buffer)!);
//       case 132:
//         return WebResourceResponseData.decode(readValue(buffer)!);
//       case 133:
//         return WebResourceErrorData.decode(readValue(buffer)!);
//       case 134:
//         return WebViewPoint.decode(readValue(buffer)!);
//       case 135:
//         return ConsoleMessage.decode(readValue(buffer)!);
//       default:
//         return super.readValueOfType(type, buffer);
//     }
//   }
// }
//
// /// Host API for managing the native `InstanceManager`.
// class InstanceManagerHostApi {
//   /// Constructor for [InstanceManagerHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   InstanceManagerHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   /// Clear the native `InstanceManager`.
//   ///
//   /// This is typically only used after a hot restart.
//   Future<void> clear() async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.InstanceManagerHostApi.clear$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(null) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Handles methods calls to the native Java Object class.
// ///
// /// Also handles calls to remove the reference to an instance with `dispose`.
// ///
// /// See https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html.
// class JavaObjectHostApi {
//   /// Constructor for [JavaObjectHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   JavaObjectHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> dispose(int identifier) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.JavaObjectHostApi.dispose$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[identifier]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Handles callbacks methods for the native Java Object class.
// ///
// /// See https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html.
// abstract class JavaObjectFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   void dispose(int identifier);
//
//   static void setUp(
//     JavaObjectFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.JavaObjectFlutterApi.dispose$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.JavaObjectFlutterApi.dispose was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_identifier = (args[0] as int?);
//           assert(arg_identifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.JavaObjectFlutterApi.dispose was null, expected non-null int.');
//           try {
//             api.dispose(arg_identifier!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// /// Host API for `CookieManager`.
// ///
// /// This class may handle instantiating and adding native object instances that
// /// are attached to a Dart instance or handle method calls on the associated
// /// native class or an instance of the class.
// class CookieManagerHostApi {
//   /// Constructor for [CookieManagerHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   CookieManagerHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   /// Handles attaching `CookieManager.instance` to a native instance.
//   Future<void> attachInstance(int instanceIdentifier) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.CookieManagerHostApi.attachInstance$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceIdentifier]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   /// Handles Dart method `CookieManager.setCookie`.
//   Future<void> setCookie(int identifier, String url, String value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.CookieManagerHostApi.setCookie$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[identifier, url, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   /// Handles Dart method `CookieManager.removeAllCookies`.
//   Future<bool> removeAllCookies(int identifier) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.CookieManagerHostApi.removeAllCookies$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[identifier]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as bool?)!;
//     }
//   }
//
//   /// Handles Dart method `CookieManager.setAcceptThirdPartyCookies`.
//   Future<void> setAcceptThirdPartyCookies(
//       int identifier, int webViewIdentifier, bool accept) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.CookieManagerHostApi.setAcceptThirdPartyCookies$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//             .send(<Object?>[identifier, webViewIdentifier, accept])
//         as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// class WebViewHostApi {
//   /// Constructor for [WebViewHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   WebViewHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> loadData(
//       int instanceId, String data, String? mimeType, String? encoding) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.loadData$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//             .send(<Object?>[instanceId, data, mimeType, encoding])
//         as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> loadDataWithBaseUrl(int instanceId, String? baseUrl, String data,
//       String? mimeType, String? encoding, String? historyUrl) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.loadDataWithBaseUrl$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[
//       instanceId,
//       baseUrl,
//       data,
//       mimeType,
//       encoding,
//       historyUrl
//     ]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> loadUrl(
//       int instanceId, String url, Map<String?, String?> headers) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.loadUrl$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, url, headers]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> postUrl(int instanceId, String url, Uint8List data) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.postUrl$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, url, data]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<String?> getUrl(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.getUrl$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return (pigeonVar_replyList[0] as String?);
//     }
//   }
//
//   Future<bool> canGoBack(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.canGoBack$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as bool?)!;
//     }
//   }
//
//   Future<bool> canGoForward(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.canGoForward$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as bool?)!;
//     }
//   }
//
//   Future<void> goBack(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.goBack$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> goForward(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.goForward$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> reload(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.reload$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> clearCache(int instanceId, bool includeDiskFiles) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.clearCache$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, includeDiskFiles]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<String?> evaluateJavascript(
//       int instanceId, String javascriptString) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.evaluateJavascript$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, javascriptString]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return (pigeonVar_replyList[0] as String?);
//     }
//   }
//
//   Future<String?> getTitle(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.getTitle$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return (pigeonVar_replyList[0] as String?);
//     }
//   }
//
//   Future<void> scrollTo(int instanceId, int x, int y) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.scrollTo$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, x, y]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> scrollBy(int instanceId, int x, int y) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.scrollBy$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, x, y]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<int> getScrollX(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.getScrollX$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as int?)!;
//     }
//   }
//
//   Future<int> getScrollY(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.getScrollY$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as int?)!;
//     }
//   }
//
//   Future<WebViewPoint> getScrollPosition(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.getScrollPosition$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as WebViewPoint?)!;
//     }
//   }
//
//   Future<void> setWebContentsDebuggingEnabled(bool enabled) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.setWebContentsDebuggingEnabled$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[enabled]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setWebViewClient(
//       int instanceId, int webViewClientInstanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.setWebViewClient$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, webViewClientInstanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> addJavaScriptChannel(
//       int instanceId, int javaScriptChannelInstanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.addJavaScriptChannel$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//             .send(<Object?>[instanceId, javaScriptChannelInstanceId])
//         as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> removeJavaScriptChannel(
//       int instanceId, int javaScriptChannelInstanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.removeJavaScriptChannel$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//             .send(<Object?>[instanceId, javaScriptChannelInstanceId])
//         as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setDownloadListener(
//       int instanceId, int? listenerInstanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.setDownloadListener$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, listenerInstanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setWebChromeClient(int instanceId, int? clientInstanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.setWebChromeClient$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, clientInstanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setBackgroundColor(int instanceId, int color) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewHostApi.setBackgroundColor$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, color]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Flutter API for `WebView`.
// ///
// /// This class may handle instantiating and adding Dart instances that are
// /// attached to a native instance or receiving callback methods from an
// /// overridden native class.
// ///
// /// See https://developer.android.com/reference/android/webkit/WebView.
// abstract class WebViewFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   /// Create a new Dart instance and add it to the `InstanceManager`.
//   void create(int identifier);
//
//   void onScrollChanged(
//       int webViewInstanceId, int left, int top, int oldLeft, int oldTop);
//
//   static void setUp(
//     WebViewFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_identifier = (args[0] as int?);
//           assert(arg_identifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.create was null, expected non-null int.');
//           try {
//             api.create(arg_identifier!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_webViewInstanceId = (args[0] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged was null, expected non-null int.');
//           final int? arg_left = (args[1] as int?);
//           assert(arg_left != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged was null, expected non-null int.');
//           final int? arg_top = (args[2] as int?);
//           assert(arg_top != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged was null, expected non-null int.');
//           final int? arg_oldLeft = (args[3] as int?);
//           assert(arg_oldLeft != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged was null, expected non-null int.');
//           final int? arg_oldTop = (args[4] as int?);
//           assert(arg_oldTop != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewFlutterApi.onScrollChanged was null, expected non-null int.');
//           try {
//             api.onScrollChanged(arg_webViewInstanceId!, arg_left!, arg_top!,
//                 arg_oldLeft!, arg_oldTop!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// class WebSettingsHostApi {
//   /// Constructor for [WebSettingsHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   WebSettingsHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId, int webViewInstanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, webViewInstanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setDomStorageEnabled(int instanceId, bool flag) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setDomStorageEnabled$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, flag]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setJavaScriptCanOpenWindowsAutomatically(
//       int instanceId, bool flag) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setJavaScriptCanOpenWindowsAutomatically$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, flag]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSupportMultipleWindows(int instanceId, bool support) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setSupportMultipleWindows$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, support]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setJavaScriptEnabled(int instanceId, bool flag) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setJavaScriptEnabled$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, flag]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setUserAgentString(
//       int instanceId, String? userAgentString) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setUserAgentString$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, userAgentString]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setMediaPlaybackRequiresUserGesture(
//       int instanceId, bool require) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setMediaPlaybackRequiresUserGesture$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, require]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSupportZoom(int instanceId, bool support) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setSupportZoom$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, support]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setLoadWithOverviewMode(int instanceId, bool overview) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setLoadWithOverviewMode$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, overview]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setUseWideViewPort(int instanceId, bool use) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setUseWideViewPort$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, use]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setDisplayZoomControls(int instanceId, bool enabled) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setDisplayZoomControls$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, enabled]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setBuiltInZoomControls(int instanceId, bool enabled) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setBuiltInZoomControls$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, enabled]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setAllowFileAccess(int instanceId, bool enabled) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setAllowFileAccess$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, enabled]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setTextZoom(int instanceId, int textZoom) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.setTextZoom$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, textZoom]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<String> getUserAgentString(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebSettingsHostApi.getUserAgentString$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as String?)!;
//     }
//   }
// }
//
// class JavaScriptChannelHostApi {
//   /// Constructor for [JavaScriptChannelHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   JavaScriptChannelHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId, String channelName) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.JavaScriptChannelHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, channelName]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// abstract class JavaScriptChannelFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   void postMessage(int instanceId, String message);
//
//   static void setUp(
//     JavaScriptChannelFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.JavaScriptChannelFlutterApi.postMessage$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.JavaScriptChannelFlutterApi.postMessage was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.JavaScriptChannelFlutterApi.postMessage was null, expected non-null int.');
//           final String? arg_message = (args[1] as String?);
//           assert(arg_message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.JavaScriptChannelFlutterApi.postMessage was null, expected non-null String.');
//           try {
//             api.postMessage(arg_instanceId!, arg_message!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// class WebViewClientHostApi {
//   /// Constructor for [WebViewClientHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   WebViewClientHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewClientHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSynchronousReturnValueForShouldOverrideUrlLoading(
//       int instanceId, bool value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebViewClientHostApi.setSynchronousReturnValueForShouldOverrideUrlLoading$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// abstract class WebViewClientFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   void onPageStarted(int instanceId, int webViewInstanceId, String url);
//
//   void onPageFinished(int instanceId, int webViewInstanceId, String url);
//
//   void onReceivedHttpError(int instanceId, int webViewInstanceId,
//       WebResourceRequestData request, WebResourceResponseData response);
//
//   void onReceivedRequestError(int instanceId, int webViewInstanceId,
//       WebResourceRequestData request, WebResourceErrorData error);
//
//   void onReceivedError(int instanceId, int webViewInstanceId, int errorCode,
//       String description, String failingUrl);
//
//   void requestLoading(
//       int instanceId, int webViewInstanceId, WebResourceRequestData request);
//
//   void urlLoading(int instanceId, int webViewInstanceId, String url);
//
//   void doUpdateVisitedHistory(
//       int instanceId, int webViewInstanceId, String url, bool isReload);
//
//   void onReceivedHttpAuthRequest(int instanceId, int webViewInstanceId,
//       int httpAuthHandlerInstanceId, String host, String realm);
//
//   static void setUp(
//     WebViewClientFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageStarted$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageStarted was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageStarted was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageStarted was null, expected non-null int.');
//           final String? arg_url = (args[2] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageStarted was null, expected non-null String.');
//           try {
//             api.onPageStarted(
//                 arg_instanceId!, arg_webViewInstanceId!, arg_url!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageFinished$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageFinished was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageFinished was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageFinished was null, expected non-null int.');
//           final String? arg_url = (args[2] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onPageFinished was null, expected non-null String.');
//           try {
//             api.onPageFinished(
//                 arg_instanceId!, arg_webViewInstanceId!, arg_url!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpError$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpError was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpError was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpError was null, expected non-null int.');
//           final WebResourceRequestData? arg_request =
//               (args[2] as WebResourceRequestData?);
//           assert(arg_request != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpError was null, expected non-null WebResourceRequestData.');
//           final WebResourceResponseData? arg_response =
//               (args[3] as WebResourceResponseData?);
//           assert(arg_response != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpError was null, expected non-null WebResourceResponseData.');
//           try {
//             api.onReceivedHttpError(arg_instanceId!, arg_webViewInstanceId!,
//                 arg_request!, arg_response!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedRequestError$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedRequestError was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedRequestError was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedRequestError was null, expected non-null int.');
//           final WebResourceRequestData? arg_request =
//               (args[2] as WebResourceRequestData?);
//           assert(arg_request != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedRequestError was null, expected non-null WebResourceRequestData.');
//           final WebResourceErrorData? arg_error =
//               (args[3] as WebResourceErrorData?);
//           assert(arg_error != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedRequestError was null, expected non-null WebResourceErrorData.');
//           try {
//             api.onReceivedRequestError(arg_instanceId!, arg_webViewInstanceId!,
//                 arg_request!, arg_error!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError was null, expected non-null int.');
//           final int? arg_errorCode = (args[2] as int?);
//           assert(arg_errorCode != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError was null, expected non-null int.');
//           final String? arg_description = (args[3] as String?);
//           assert(arg_description != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError was null, expected non-null String.');
//           final String? arg_failingUrl = (args[4] as String?);
//           assert(arg_failingUrl != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedError was null, expected non-null String.');
//           try {
//             api.onReceivedError(arg_instanceId!, arg_webViewInstanceId!,
//                 arg_errorCode!, arg_description!, arg_failingUrl!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.requestLoading$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.requestLoading was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.requestLoading was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.requestLoading was null, expected non-null int.');
//           final WebResourceRequestData? arg_request =
//               (args[2] as WebResourceRequestData?);
//           assert(arg_request != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.requestLoading was null, expected non-null WebResourceRequestData.');
//           try {
//             api.requestLoading(
//                 arg_instanceId!, arg_webViewInstanceId!, arg_request!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.urlLoading$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.urlLoading was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.urlLoading was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.urlLoading was null, expected non-null int.');
//           final String? arg_url = (args[2] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.urlLoading was null, expected non-null String.');
//           try {
//             api.urlLoading(arg_instanceId!, arg_webViewInstanceId!, arg_url!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.doUpdateVisitedHistory$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.doUpdateVisitedHistory was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.doUpdateVisitedHistory was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.doUpdateVisitedHistory was null, expected non-null int.');
//           final String? arg_url = (args[2] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.doUpdateVisitedHistory was null, expected non-null String.');
//           final bool? arg_isReload = (args[3] as bool?);
//           assert(arg_isReload != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.doUpdateVisitedHistory was null, expected non-null bool.');
//           try {
//             api.doUpdateVisitedHistory(arg_instanceId!, arg_webViewInstanceId!,
//                 arg_url!, arg_isReload!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest was null, expected non-null int.');
//           final int? arg_httpAuthHandlerInstanceId = (args[2] as int?);
//           assert(arg_httpAuthHandlerInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest was null, expected non-null int.');
//           final String? arg_host = (args[3] as String?);
//           assert(arg_host != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest was null, expected non-null String.');
//           final String? arg_realm = (args[4] as String?);
//           assert(arg_realm != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebViewClientFlutterApi.onReceivedHttpAuthRequest was null, expected non-null String.');
//           try {
//             api.onReceivedHttpAuthRequest(
//                 arg_instanceId!,
//                 arg_webViewInstanceId!,
//                 arg_httpAuthHandlerInstanceId!,
//                 arg_host!,
//                 arg_realm!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// class DownloadListenerHostApi {
//   /// Constructor for [DownloadListenerHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   DownloadListenerHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.DownloadListenerHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// abstract class DownloadListenerFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   void onDownloadStart(int instanceId, String url, String userAgent,
//       String contentDisposition, String mimetype, int contentLength);
//
//   static void setUp(
//     DownloadListenerFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null, expected non-null int.');
//           final String? arg_url = (args[1] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null, expected non-null String.');
//           final String? arg_userAgent = (args[2] as String?);
//           assert(arg_userAgent != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null, expected non-null String.');
//           final String? arg_contentDisposition = (args[3] as String?);
//           assert(arg_contentDisposition != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null, expected non-null String.');
//           final String? arg_mimetype = (args[4] as String?);
//           assert(arg_mimetype != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null, expected non-null String.');
//           final int? arg_contentLength = (args[5] as int?);
//           assert(arg_contentLength != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.DownloadListenerFlutterApi.onDownloadStart was null, expected non-null int.');
//           try {
//             api.onDownloadStart(arg_instanceId!, arg_url!, arg_userAgent!,
//                 arg_contentDisposition!, arg_mimetype!, arg_contentLength!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// class WebChromeClientHostApi {
//   /// Constructor for [WebChromeClientHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   WebChromeClientHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebChromeClientHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSynchronousReturnValueForOnShowFileChooser(
//       int instanceId, bool value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebChromeClientHostApi.setSynchronousReturnValueForOnShowFileChooser$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSynchronousReturnValueForOnConsoleMessage(
//       int instanceId, bool value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebChromeClientHostApi.setSynchronousReturnValueForOnConsoleMessage$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSynchronousReturnValueForOnJsAlert(
//       int instanceId, bool value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebChromeClientHostApi.setSynchronousReturnValueForOnJsAlert$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSynchronousReturnValueForOnJsConfirm(
//       int instanceId, bool value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebChromeClientHostApi.setSynchronousReturnValueForOnJsConfirm$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> setSynchronousReturnValueForOnJsPrompt(
//       int instanceId, bool value) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebChromeClientHostApi.setSynchronousReturnValueForOnJsPrompt$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, value]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// class FlutterAssetManagerHostApi {
//   /// Constructor for [FlutterAssetManagerHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   FlutterAssetManagerHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<List<String?>> list(String path) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.FlutterAssetManagerHostApi.list$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[path]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String?>();
//     }
//   }
//
//   Future<String> getAssetFilePathByName(String name) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.FlutterAssetManagerHostApi.getAssetFilePathByName$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[name]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as String?)!;
//     }
//   }
// }
//
// abstract class WebChromeClientFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   void onProgressChanged(int instanceId, int webViewInstanceId, int progress);
//
//   Future<List<String?>> onShowFileChooser(
//       int instanceId, int webViewInstanceId, int paramsInstanceId);
//
//   /// Callback to Dart function `WebChromeClient.onPermissionRequest`.
//   void onPermissionRequest(int instanceId, int requestInstanceId);
//
//   /// Callback to Dart function `WebChromeClient.onShowCustomView`.
//   void onShowCustomView(
//       int instanceId, int viewIdentifier, int callbackIdentifier);
//
//   /// Callback to Dart function `WebChromeClient.onHideCustomView`.
//   void onHideCustomView(int instanceId);
//
//   /// Callback to Dart function `WebChromeClient.onGeolocationPermissionsShowPrompt`.
//   void onGeolocationPermissionsShowPrompt(
//       int instanceId, int paramsInstanceId, String origin);
//
//   /// Callback to Dart function `WebChromeClient.onGeolocationPermissionsHidePrompt`.
//   void onGeolocationPermissionsHidePrompt(int identifier);
//
//   /// Callback to Dart function `WebChromeClient.onConsoleMessage`.
//   void onConsoleMessage(int instanceId, ConsoleMessage message);
//
//   Future<void> onJsAlert(int instanceId, String url, String message);
//
//   Future<bool> onJsConfirm(int instanceId, String url, String message);
//
//   Future<String> onJsPrompt(
//       int instanceId, String url, String message, String defaultValue);
//
//   static void setUp(
//     WebChromeClientFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onProgressChanged$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onProgressChanged was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onProgressChanged was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onProgressChanged was null, expected non-null int.');
//           final int? arg_progress = (args[2] as int?);
//           assert(arg_progress != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onProgressChanged was null, expected non-null int.');
//           try {
//             api.onProgressChanged(
//                 arg_instanceId!, arg_webViewInstanceId!, arg_progress!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowFileChooser$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowFileChooser was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowFileChooser was null, expected non-null int.');
//           final int? arg_webViewInstanceId = (args[1] as int?);
//           assert(arg_webViewInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowFileChooser was null, expected non-null int.');
//           final int? arg_paramsInstanceId = (args[2] as int?);
//           assert(arg_paramsInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowFileChooser was null, expected non-null int.');
//           try {
//             final List<String?> output = await api.onShowFileChooser(
//                 arg_instanceId!, arg_webViewInstanceId!, arg_paramsInstanceId!);
//             return wrapResponse(result: output);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onPermissionRequest$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onPermissionRequest was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onPermissionRequest was null, expected non-null int.');
//           final int? arg_requestInstanceId = (args[1] as int?);
//           assert(arg_requestInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onPermissionRequest was null, expected non-null int.');
//           try {
//             api.onPermissionRequest(arg_instanceId!, arg_requestInstanceId!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowCustomView$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowCustomView was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowCustomView was null, expected non-null int.');
//           final int? arg_viewIdentifier = (args[1] as int?);
//           assert(arg_viewIdentifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowCustomView was null, expected non-null int.');
//           final int? arg_callbackIdentifier = (args[2] as int?);
//           assert(arg_callbackIdentifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onShowCustomView was null, expected non-null int.');
//           try {
//             api.onShowCustomView(
//                 arg_instanceId!, arg_viewIdentifier!, arg_callbackIdentifier!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onHideCustomView$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onHideCustomView was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onHideCustomView was null, expected non-null int.');
//           try {
//             api.onHideCustomView(arg_instanceId!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsShowPrompt$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsShowPrompt was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsShowPrompt was null, expected non-null int.');
//           final int? arg_paramsInstanceId = (args[1] as int?);
//           assert(arg_paramsInstanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsShowPrompt was null, expected non-null int.');
//           final String? arg_origin = (args[2] as String?);
//           assert(arg_origin != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsShowPrompt was null, expected non-null String.');
//           try {
//             api.onGeolocationPermissionsShowPrompt(
//                 arg_instanceId!, arg_paramsInstanceId!, arg_origin!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsHidePrompt$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsHidePrompt was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_identifier = (args[0] as int?);
//           assert(arg_identifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onGeolocationPermissionsHidePrompt was null, expected non-null int.');
//           try {
//             api.onGeolocationPermissionsHidePrompt(arg_identifier!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onConsoleMessage$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onConsoleMessage was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onConsoleMessage was null, expected non-null int.');
//           final ConsoleMessage? arg_message = (args[1] as ConsoleMessage?);
//           assert(arg_message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onConsoleMessage was null, expected non-null ConsoleMessage.');
//           try {
//             api.onConsoleMessage(arg_instanceId!, arg_message!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsAlert$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsAlert was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsAlert was null, expected non-null int.');
//           final String? arg_url = (args[1] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsAlert was null, expected non-null String.');
//           final String? arg_message = (args[2] as String?);
//           assert(arg_message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsAlert was null, expected non-null String.');
//           try {
//             await api.onJsAlert(arg_instanceId!, arg_url!, arg_message!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsConfirm$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsConfirm was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsConfirm was null, expected non-null int.');
//           final String? arg_url = (args[1] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsConfirm was null, expected non-null String.');
//           final String? arg_message = (args[2] as String?);
//           assert(arg_message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsConfirm was null, expected non-null String.');
//           try {
//             final bool output =
//                 await api.onJsConfirm(arg_instanceId!, arg_url!, arg_message!);
//             return wrapResponse(result: output);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsPrompt$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsPrompt was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsPrompt was null, expected non-null int.');
//           final String? arg_url = (args[1] as String?);
//           assert(arg_url != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsPrompt was null, expected non-null String.');
//           final String? arg_message = (args[2] as String?);
//           assert(arg_message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsPrompt was null, expected non-null String.');
//           final String? arg_defaultValue = (args[3] as String?);
//           assert(arg_defaultValue != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.WebChromeClientFlutterApi.onJsPrompt was null, expected non-null String.');
//           try {
//             final String output = await api.onJsPrompt(
//                 arg_instanceId!, arg_url!, arg_message!, arg_defaultValue!);
//             return wrapResponse(result: output);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// class WebStorageHostApi {
//   /// Constructor for [WebStorageHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   WebStorageHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   Future<void> create(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebStorageHostApi.create$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   Future<void> deleteAllData(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.WebStorageHostApi.deleteAllData$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Handles callbacks methods for the native Java FileChooserParams class.
// ///
// /// See https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams.
// abstract class FileChooserParamsFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   void create(int instanceId, bool isCaptureEnabled, List<String?> acceptTypes,
//       FileChooserMode mode, String? filenameHint);
//
//   static void setUp(
//     FileChooserParamsFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.FileChooserParamsFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.FileChooserParamsFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.FileChooserParamsFlutterApi.create was null, expected non-null int.');
//           final bool? arg_isCaptureEnabled = (args[1] as bool?);
//           assert(arg_isCaptureEnabled != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.FileChooserParamsFlutterApi.create was null, expected non-null bool.');
//           final List<String?>? arg_acceptTypes =
//               (args[2] as List<Object?>?)?.cast<String?>();
//           assert(arg_acceptTypes != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.FileChooserParamsFlutterApi.create was null, expected non-null List<String?>.');
//           final FileChooserMode? arg_mode = (args[3] as FileChooserMode?);
//           assert(arg_mode != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.FileChooserParamsFlutterApi.create was null, expected non-null FileChooserMode.');
//           final String? arg_filenameHint = (args[4] as String?);
//           try {
//             api.create(arg_instanceId!, arg_isCaptureEnabled!, arg_acceptTypes!,
//                 arg_mode!, arg_filenameHint);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// /// Host API for `PermissionRequest`.
// ///
// /// This class may handle instantiating and adding native object instances that
// /// are attached to a Dart instance or handle method calls on the associated
// /// native class or an instance of the class.
// ///
// /// See https://developer.android.com/reference/android/webkit/PermissionRequest.
// class PermissionRequestHostApi {
//   /// Constructor for [PermissionRequestHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   PermissionRequestHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   /// Handles Dart method `PermissionRequest.grant`.
//   Future<void> grant(int instanceId, List<String?> resources) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.PermissionRequestHostApi.grant$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, resources]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   /// Handles Dart method `PermissionRequest.deny`.
//   Future<void> deny(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.PermissionRequestHostApi.deny$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Flutter API for `PermissionRequest`.
// ///
// /// This class may handle instantiating and adding Dart instances that are
// /// attached to a native instance or receiving callback methods from an
// /// overridden native class.
// ///
// /// See https://developer.android.com/reference/android/webkit/PermissionRequest.
// abstract class PermissionRequestFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   /// Create a new Dart instance and add it to the `InstanceManager`.
//   void create(int instanceId, List<String?> resources);
//
//   static void setUp(
//     PermissionRequestFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.PermissionRequestFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.PermissionRequestFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.PermissionRequestFlutterApi.create was null, expected non-null int.');
//           final List<String?>? arg_resources =
//               (args[1] as List<Object?>?)?.cast<String?>();
//           assert(arg_resources != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.PermissionRequestFlutterApi.create was null, expected non-null List<String?>.');
//           try {
//             api.create(arg_instanceId!, arg_resources!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// /// Host API for `CustomViewCallback`.
// ///
// /// This class may handle instantiating and adding native object instances that
// /// are attached to a Dart instance or handle method calls on the associated
// /// native class or an instance of the class.
// ///
// /// See https://developer.android.com/reference/android/webkit/WebChromeClient.CustomViewCallback.
// class CustomViewCallbackHostApi {
//   /// Constructor for [CustomViewCallbackHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   CustomViewCallbackHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   /// Handles Dart method `CustomViewCallback.onCustomViewHidden`.
//   Future<void> onCustomViewHidden(int identifier) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.CustomViewCallbackHostApi.onCustomViewHidden$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[identifier]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Flutter API for `CustomViewCallback`.
// ///
// /// This class may handle instantiating and adding Dart instances that are
// /// attached to a native instance or receiving callback methods from an
// /// overridden native class.
// ///
// /// See https://developer.android.com/reference/android/webkit/WebChromeClient.CustomViewCallback.
// abstract class CustomViewCallbackFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   /// Create a new Dart instance and add it to the `InstanceManager`.
//   void create(int identifier);
//
//   static void setUp(
//     CustomViewCallbackFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.CustomViewCallbackFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.CustomViewCallbackFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_identifier = (args[0] as int?);
//           assert(arg_identifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.CustomViewCallbackFlutterApi.create was null, expected non-null int.');
//           try {
//             api.create(arg_identifier!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// /// Flutter API for `View`.
// ///
// /// This class may handle instantiating and adding Dart instances that are
// /// attached to a native instance or receiving callback methods from an
// /// overridden native class.
// ///
// /// See https://developer.android.com/reference/android/view/View.
// abstract class ViewFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   /// Create a new Dart instance and add it to the `InstanceManager`.
//   void create(int identifier);
//
//   static void setUp(
//     ViewFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.ViewFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.ViewFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_identifier = (args[0] as int?);
//           assert(arg_identifier != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.ViewFlutterApi.create was null, expected non-null int.');
//           try {
//             api.create(arg_identifier!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// /// Host API for `GeolocationPermissionsCallback`.
// ///
// /// This class may handle instantiating and adding native object instances that
// /// are attached to a Dart instance or handle method calls on the associated
// /// native class or an instance of the class.
// ///
// /// See https://developer.android.com/reference/android/webkit/GeolocationPermissions.Callback.
// class GeolocationPermissionsCallbackHostApi {
//   /// Constructor for [GeolocationPermissionsCallbackHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   GeolocationPermissionsCallbackHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   /// Handles Dart method `GeolocationPermissionsCallback.invoke`.
//   Future<void> invoke(
//       int instanceId, String origin, bool allow, bool retain) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.GeolocationPermissionsCallbackHostApi.invoke$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, origin, allow, retain]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Flutter API for `GeolocationPermissionsCallback`.
// ///
// /// This class may handle instantiating and adding Dart instances that are
// /// attached to a native instance or receiving callback methods from an
// /// overridden native class.
// ///
// /// See https://developer.android.com/reference/android/webkit/GeolocationPermissions.Callback.
// abstract class GeolocationPermissionsCallbackFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   /// Create a new Dart instance and add it to the `InstanceManager`.
//   void create(int instanceId);
//
//   static void setUp(
//     GeolocationPermissionsCallbackFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.GeolocationPermissionsCallbackFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.GeolocationPermissionsCallbackFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.GeolocationPermissionsCallbackFlutterApi.create was null, expected non-null int.');
//           try {
//             api.create(arg_instanceId!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
//
// /// Host API for `HttpAuthHandler`.
// ///
// /// This class may handle instantiating and adding native object instances that
// /// are attached to a Dart instance or handle method calls on the associated
// /// native class or an instance of the class.
// ///
// /// See https://developer.android.com/reference/android/webkit/HttpAuthHandler.
// class HttpAuthHandlerHostApi {
//   /// Constructor for [HttpAuthHandlerHostApi].  The [binaryMessenger] named argument is
//   /// available for dependency injection.  If it is left null, the default
//   /// BinaryMessenger will be used which routes to the host platform.
//   HttpAuthHandlerHostApi(
//       {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
//       : pigeonVar_binaryMessenger = binaryMessenger,
//         pigeonVar_messageChannelSuffix =
//             messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//   final BinaryMessenger? pigeonVar_binaryMessenger;
//
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   final String pigeonVar_messageChannelSuffix;
//
//   /// Handles Dart method `HttpAuthHandler.useHttpAuthUsernamePassword`.
//   Future<bool> useHttpAuthUsernamePassword(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.HttpAuthHandlerHostApi.useHttpAuthUsernamePassword$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else if (pigeonVar_replyList[0] == null) {
//       throw PlatformException(
//         code: 'null-error',
//         message: 'Host platform returned null value for non-null return value.',
//       );
//     } else {
//       return (pigeonVar_replyList[0] as bool?)!;
//     }
//   }
//
//   /// Handles Dart method `HttpAuthHandler.cancel`.
//   Future<void> cancel(int instanceId) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.HttpAuthHandlerHostApi.cancel$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList =
//         await pigeonVar_channel.send(<Object?>[instanceId]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
//
//   /// Handles Dart method `HttpAuthHandler.proceed`.
//   Future<void> proceed(int instanceId, String username, String password) async {
//     final String pigeonVar_channelName =
//         'dev.flutter.pigeon.webview_flutter_android.HttpAuthHandlerHostApi.proceed$pigeonVar_messageChannelSuffix';
//     final BasicMessageChannel<Object?> pigeonVar_channel =
//         BasicMessageChannel<Object?>(
//       pigeonVar_channelName,
//       pigeonChannelCodec,
//       binaryMessenger: pigeonVar_binaryMessenger,
//     );
//     final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
//         .send(<Object?>[instanceId, username, password]) as List<Object?>?;
//     if (pigeonVar_replyList == null) {
//       throw _createConnectionError(pigeonVar_channelName);
//     } else if (pigeonVar_replyList.length > 1) {
//       throw PlatformException(
//         code: pigeonVar_replyList[0]! as String,
//         message: pigeonVar_replyList[1] as String?,
//         details: pigeonVar_replyList[2],
//       );
//     } else {
//       return;
//     }
//   }
// }
//
// /// Flutter API for `HttpAuthHandler`.
// ///
// /// This class may handle instantiating and adding Dart instances that are
// /// attached to a native instance or receiving callback methods from an
// /// overridden native class.
// ///
// /// See https://developer.android.com/reference/android/webkit/HttpAuthHandler.
// abstract class HttpAuthHandlerFlutterApi {
//   static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();
//
//   /// Create a new Dart instance and add it to the `InstanceManager`.
//   void create(int instanceId);
//
//   static void setUp(
//     HttpAuthHandlerFlutterApi? api, {
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//   }) {
//     messageChannelSuffix =
//         messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
//     {
//       final BasicMessageChannel<
//           Object?> pigeonVar_channel = BasicMessageChannel<
//               Object?>(
//           'dev.flutter.pigeon.webview_flutter_android.HttpAuthHandlerFlutterApi.create$messageChannelSuffix',
//           pigeonChannelCodec,
//           binaryMessenger: binaryMessenger);
//       if (api == null) {
//         pigeonVar_channel.setMessageHandler(null);
//       } else {
//         pigeonVar_channel.setMessageHandler((Object? message) async {
//           assert(message != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.HttpAuthHandlerFlutterApi.create was null.');
//           final List<Object?> args = (message as List<Object?>?)!;
//           final int? arg_instanceId = (args[0] as int?);
//           assert(arg_instanceId != null,
//               'Argument for dev.flutter.pigeon.webview_flutter_android.HttpAuthHandlerFlutterApi.create was null, expected non-null int.');
//           try {
//             api.create(arg_instanceId!);
//             return wrapResponse(empty: true);
//           } on PlatformException catch (e) {
//             return wrapResponse(error: e);
//           } catch (e) {
//             return wrapResponse(
//                 error: PlatformException(code: 'error', message: e.toString()));
//           }
//         });
//       }
//     }
//   }
// }
